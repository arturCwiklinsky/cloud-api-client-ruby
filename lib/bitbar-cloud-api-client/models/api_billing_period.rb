=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.100.0
Contact: damian.sniezek@smartbear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'date'

module BitbarCloudApiClient
  class APIBillingPeriod
    attr_accessor :account_service_id

    attr_accessor :additional_hours

    attr_accessor :additional_hours_price

    attr_accessor :api_billing_period_type

    attr_accessor :create_time

    attr_accessor :end_billing_period

    attr_accessor :id

    attr_accessor :last_payment_date

    attr_accessor :mail

    attr_accessor :paid

    attr_accessor :payment_method

    attr_accessor :plan

    attr_accessor :self_uri

    attr_accessor :service_price

    attr_accessor :start_billing_period

    attr_accessor :subscription_end

    attr_accessor :subscription_start

    attr_accessor :total_price

    attr_accessor :usages

    attr_accessor :user_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_service_id' => :'accountServiceId',
        :'additional_hours' => :'additionalHours',
        :'additional_hours_price' => :'additionalHoursPrice',
        :'api_billing_period_type' => :'apiBillingPeriodType',
        :'create_time' => :'createTime',
        :'end_billing_period' => :'endBillingPeriod',
        :'id' => :'id',
        :'last_payment_date' => :'lastPaymentDate',
        :'mail' => :'mail',
        :'paid' => :'paid',
        :'payment_method' => :'paymentMethod',
        :'plan' => :'plan',
        :'self_uri' => :'selfURI',
        :'service_price' => :'servicePrice',
        :'start_billing_period' => :'startBillingPeriod',
        :'subscription_end' => :'subscriptionEnd',
        :'subscription_start' => :'subscriptionStart',
        :'total_price' => :'totalPrice',
        :'usages' => :'usages',
        :'user_id' => :'userId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account_service_id' => :'Integer',
        :'additional_hours' => :'Integer',
        :'additional_hours_price' => :'Integer',
        :'api_billing_period_type' => :'String',
        :'create_time' => :'Integer',
        :'end_billing_period' => :'Integer',
        :'id' => :'Integer',
        :'last_payment_date' => :'Integer',
        :'mail' => :'String',
        :'paid' => :'BOOLEAN',
        :'payment_method' => :'String',
        :'plan' => :'String',
        :'self_uri' => :'String',
        :'service_price' => :'Integer',
        :'start_billing_period' => :'Integer',
        :'subscription_end' => :'Integer',
        :'subscription_start' => :'Integer',
        :'total_price' => :'Integer',
        :'usages' => :'Array<APIBillingPeriodUsage>',
        :'user_id' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'accountServiceId')
        self.account_service_id = attributes[:'accountServiceId']
      end

      if attributes.has_key?(:'additionalHours')
        self.additional_hours = attributes[:'additionalHours']
      end

      if attributes.has_key?(:'additionalHoursPrice')
        self.additional_hours_price = attributes[:'additionalHoursPrice']
      end

      if attributes.has_key?(:'apiBillingPeriodType')
        self.api_billing_period_type = attributes[:'apiBillingPeriodType']
      end

      if attributes.has_key?(:'createTime')
        self.create_time = attributes[:'createTime']
      end

      if attributes.has_key?(:'endBillingPeriod')
        self.end_billing_period = attributes[:'endBillingPeriod']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'lastPaymentDate')
        self.last_payment_date = attributes[:'lastPaymentDate']
      end

      if attributes.has_key?(:'mail')
        self.mail = attributes[:'mail']
      end

      if attributes.has_key?(:'paid')
        self.paid = attributes[:'paid']
      end

      if attributes.has_key?(:'paymentMethod')
        self.payment_method = attributes[:'paymentMethod']
      end

      if attributes.has_key?(:'plan')
        self.plan = attributes[:'plan']
      end

      if attributes.has_key?(:'selfURI')
        self.self_uri = attributes[:'selfURI']
      end

      if attributes.has_key?(:'servicePrice')
        self.service_price = attributes[:'servicePrice']
      end

      if attributes.has_key?(:'startBillingPeriod')
        self.start_billing_period = attributes[:'startBillingPeriod']
      end

      if attributes.has_key?(:'subscriptionEnd')
        self.subscription_end = attributes[:'subscriptionEnd']
      end

      if attributes.has_key?(:'subscriptionStart')
        self.subscription_start = attributes[:'subscriptionStart']
      end

      if attributes.has_key?(:'totalPrice')
        self.total_price = attributes[:'totalPrice']
      end

      if attributes.has_key?(:'usages')
        if (value = attributes[:'usages']).is_a?(Array)
          self.usages = value
        end
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      api_billing_period_type_validator = EnumAttributeValidator.new('String', ['BUY', 'CHARGE', 'CANCEL'])
      return false unless api_billing_period_type_validator.valid?(@api_billing_period_type)
      payment_method_validator = EnumAttributeValidator.new('String', ['PAYPAL', 'BRAINTREE', 'STRIPE', 'INVOICE', 'PROMOTION', 'AWS'])
      return false unless payment_method_validator.valid?(@payment_method)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] api_billing_period_type Object to be assigned
    def api_billing_period_type=(api_billing_period_type)
      validator = EnumAttributeValidator.new('String', ['BUY', 'CHARGE', 'CANCEL'])
      unless validator.valid?(api_billing_period_type)
        fail ArgumentError, 'invalid value for "api_billing_period_type", must be one of #{validator.allowable_values}.'
      end
      @api_billing_period_type = api_billing_period_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(payment_method)
      validator = EnumAttributeValidator.new('String', ['PAYPAL', 'BRAINTREE', 'STRIPE', 'INVOICE', 'PROMOTION', 'AWS'])
      unless validator.valid?(payment_method)
        fail ArgumentError, 'invalid value for "payment_method", must be one of #{validator.allowable_values}.'
      end
      @payment_method = payment_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_service_id == o.account_service_id &&
          additional_hours == o.additional_hours &&
          additional_hours_price == o.additional_hours_price &&
          api_billing_period_type == o.api_billing_period_type &&
          create_time == o.create_time &&
          end_billing_period == o.end_billing_period &&
          id == o.id &&
          last_payment_date == o.last_payment_date &&
          mail == o.mail &&
          paid == o.paid &&
          payment_method == o.payment_method &&
          plan == o.plan &&
          self_uri == o.self_uri &&
          service_price == o.service_price &&
          start_billing_period == o.start_billing_period &&
          subscription_end == o.subscription_end &&
          subscription_start == o.subscription_start &&
          total_price == o.total_price &&
          usages == o.usages &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_service_id, additional_hours, additional_hours_price, api_billing_period_type, create_time, end_billing_period, id, last_payment_date, mail, paid, payment_method, plan, self_uri, service_price, start_billing_period, subscription_end, subscription_start, total_price, usages, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BitbarCloudApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
