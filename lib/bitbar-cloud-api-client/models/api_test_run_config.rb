=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.100.0
Contact: damian.sniezek@smartbear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'date'

module BitbarCloudApiClient
  class APITestRunConfig
    attr_accessor :app_crawler_run

    attr_accessor :appium_broker_address

    attr_accessor :application_password

    attr_accessor :application_username

    attr_accessor :available_device_groups

    attr_accessor :available_devices

    attr_accessor :available_frameworks

    attr_accessor :client_side_test_config

    attr_accessor :computed_devices

    attr_accessor :credits_price

    attr_accessor :device_group_id

    attr_accessor :device_ids

    attr_accessor :device_language_code

    attr_accessor :device_name_pattern

    attr_accessor :files

    attr_accessor :framework_id

    attr_accessor :hook_url

    attr_accessor :id

    attr_accessor :instrumentation_runner

    attr_accessor :limitation_type

    attr_accessor :limitation_value

    attr_accessor :loaded_previous

    attr_accessor :max_auto_retries_count

    attr_accessor :os_type

    attr_accessor :project_id

    attr_accessor :project_name

    attr_accessor :resign_files

    attr_accessor :run_available

    attr_accessor :scheduler

    attr_accessor :screenshot_dir

    attr_accessor :self_uri

    attr_accessor :status

    attr_accessor :status_code

    attr_accessor :test_run_id

    attr_accessor :test_run_name

    attr_accessor :test_run_parameters

    attr_accessor :timeout

    attr_accessor :use_samples

    attr_accessor :used_device_group_id

    attr_accessor :used_device_group_name

    attr_accessor :video_recording_enabled

    attr_accessor :with_annotation

    attr_accessor :without_annotation

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_crawler_run' => :'appCrawlerRun',
        :'appium_broker_address' => :'appiumBrokerAddress',
        :'application_password' => :'applicationPassword',
        :'application_username' => :'applicationUsername',
        :'available_device_groups' => :'availableDeviceGroups',
        :'available_devices' => :'availableDevices',
        :'available_frameworks' => :'availableFrameworks',
        :'client_side_test_config' => :'clientSideTestConfig',
        :'computed_devices' => :'computedDevices',
        :'credits_price' => :'creditsPrice',
        :'device_group_id' => :'deviceGroupId',
        :'device_ids' => :'deviceIds',
        :'device_language_code' => :'deviceLanguageCode',
        :'device_name_pattern' => :'deviceNamePattern',
        :'files' => :'files',
        :'framework_id' => :'frameworkId',
        :'hook_url' => :'hookURL',
        :'id' => :'id',
        :'instrumentation_runner' => :'instrumentationRunner',
        :'limitation_type' => :'limitationType',
        :'limitation_value' => :'limitationValue',
        :'loaded_previous' => :'loadedPrevious',
        :'max_auto_retries_count' => :'maxAutoRetriesCount',
        :'os_type' => :'osType',
        :'project_id' => :'projectId',
        :'project_name' => :'projectName',
        :'resign_files' => :'resignFiles',
        :'run_available' => :'runAvailable',
        :'scheduler' => :'scheduler',
        :'screenshot_dir' => :'screenshotDir',
        :'self_uri' => :'selfURI',
        :'status' => :'status',
        :'status_code' => :'statusCode',
        :'test_run_id' => :'testRunId',
        :'test_run_name' => :'testRunName',
        :'test_run_parameters' => :'testRunParameters',
        :'timeout' => :'timeout',
        :'use_samples' => :'useSamples',
        :'used_device_group_id' => :'usedDeviceGroupId',
        :'used_device_group_name' => :'usedDeviceGroupName',
        :'video_recording_enabled' => :'videoRecordingEnabled',
        :'with_annotation' => :'withAnnotation',
        :'without_annotation' => :'withoutAnnotation'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'app_crawler_run' => :'BOOLEAN',
        :'appium_broker_address' => :'String',
        :'application_password' => :'String',
        :'application_username' => :'String',
        :'available_device_groups' => :'Array<APIDeviceGroup>',
        :'available_devices' => :'Array<APIDevice>',
        :'available_frameworks' => :'Array<APIFramework>',
        :'client_side_test_config' => :'APIClientSideTestConfig',
        :'computed_devices' => :'Array<Integer>',
        :'credits_price' => :'Integer',
        :'device_group_id' => :'Integer',
        :'device_ids' => :'Array<Integer>',
        :'device_language_code' => :'String',
        :'device_name_pattern' => :'String',
        :'files' => :'Array<APIFileConfig>',
        :'framework_id' => :'Integer',
        :'hook_url' => :'String',
        :'id' => :'Integer',
        :'instrumentation_runner' => :'String',
        :'limitation_type' => :'String',
        :'limitation_value' => :'String',
        :'loaded_previous' => :'BOOLEAN',
        :'max_auto_retries_count' => :'Integer',
        :'os_type' => :'String',
        :'project_id' => :'Integer',
        :'project_name' => :'String',
        :'resign_files' => :'BOOLEAN',
        :'run_available' => :'BOOLEAN',
        :'scheduler' => :'String',
        :'screenshot_dir' => :'String',
        :'self_uri' => :'String',
        :'status' => :'String',
        :'status_code' => :'Integer',
        :'test_run_id' => :'Integer',
        :'test_run_name' => :'String',
        :'test_run_parameters' => :'Array<APITestRunParameter>',
        :'timeout' => :'Integer',
        :'use_samples' => :'BOOLEAN',
        :'used_device_group_id' => :'Integer',
        :'used_device_group_name' => :'String',
        :'video_recording_enabled' => :'BOOLEAN',
        :'with_annotation' => :'String',
        :'without_annotation' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'appCrawlerRun')
        self.app_crawler_run = attributes[:'appCrawlerRun']
      end

      if attributes.has_key?(:'appiumBrokerAddress')
        self.appium_broker_address = attributes[:'appiumBrokerAddress']
      end

      if attributes.has_key?(:'applicationPassword')
        self.application_password = attributes[:'applicationPassword']
      end

      if attributes.has_key?(:'applicationUsername')
        self.application_username = attributes[:'applicationUsername']
      end

      if attributes.has_key?(:'availableDeviceGroups')
        if (value = attributes[:'availableDeviceGroups']).is_a?(Array)
          self.available_device_groups = value
        end
      end

      if attributes.has_key?(:'availableDevices')
        if (value = attributes[:'availableDevices']).is_a?(Array)
          self.available_devices = value
        end
      end

      if attributes.has_key?(:'availableFrameworks')
        if (value = attributes[:'availableFrameworks']).is_a?(Array)
          self.available_frameworks = value
        end
      end

      if attributes.has_key?(:'clientSideTestConfig')
        self.client_side_test_config = attributes[:'clientSideTestConfig']
      end

      if attributes.has_key?(:'computedDevices')
        if (value = attributes[:'computedDevices']).is_a?(Array)
          self.computed_devices = value
        end
      end

      if attributes.has_key?(:'creditsPrice')
        self.credits_price = attributes[:'creditsPrice']
      end

      if attributes.has_key?(:'deviceGroupId')
        self.device_group_id = attributes[:'deviceGroupId']
      end

      if attributes.has_key?(:'deviceIds')
        if (value = attributes[:'deviceIds']).is_a?(Array)
          self.device_ids = value
        end
      end

      if attributes.has_key?(:'deviceLanguageCode')
        self.device_language_code = attributes[:'deviceLanguageCode']
      end

      if attributes.has_key?(:'deviceNamePattern')
        self.device_name_pattern = attributes[:'deviceNamePattern']
      end

      if attributes.has_key?(:'files')
        if (value = attributes[:'files']).is_a?(Array)
          self.files = value
        end
      end

      if attributes.has_key?(:'frameworkId')
        self.framework_id = attributes[:'frameworkId']
      end

      if attributes.has_key?(:'hookURL')
        self.hook_url = attributes[:'hookURL']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'instrumentationRunner')
        self.instrumentation_runner = attributes[:'instrumentationRunner']
      end

      if attributes.has_key?(:'limitationType')
        self.limitation_type = attributes[:'limitationType']
      end

      if attributes.has_key?(:'limitationValue')
        self.limitation_value = attributes[:'limitationValue']
      end

      if attributes.has_key?(:'loadedPrevious')
        self.loaded_previous = attributes[:'loadedPrevious']
      end

      if attributes.has_key?(:'maxAutoRetriesCount')
        self.max_auto_retries_count = attributes[:'maxAutoRetriesCount']
      end

      if attributes.has_key?(:'osType')
        self.os_type = attributes[:'osType']
      end

      if attributes.has_key?(:'projectId')
        self.project_id = attributes[:'projectId']
      end

      if attributes.has_key?(:'projectName')
        self.project_name = attributes[:'projectName']
      end

      if attributes.has_key?(:'resignFiles')
        self.resign_files = attributes[:'resignFiles']
      end

      if attributes.has_key?(:'runAvailable')
        self.run_available = attributes[:'runAvailable']
      end

      if attributes.has_key?(:'scheduler')
        self.scheduler = attributes[:'scheduler']
      end

      if attributes.has_key?(:'screenshotDir')
        self.screenshot_dir = attributes[:'screenshotDir']
      end

      if attributes.has_key?(:'selfURI')
        self.self_uri = attributes[:'selfURI']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'statusCode')
        self.status_code = attributes[:'statusCode']
      end

      if attributes.has_key?(:'testRunId')
        self.test_run_id = attributes[:'testRunId']
      end

      if attributes.has_key?(:'testRunName')
        self.test_run_name = attributes[:'testRunName']
      end

      if attributes.has_key?(:'testRunParameters')
        if (value = attributes[:'testRunParameters']).is_a?(Array)
          self.test_run_parameters = value
        end
      end

      if attributes.has_key?(:'timeout')
        self.timeout = attributes[:'timeout']
      end

      if attributes.has_key?(:'useSamples')
        self.use_samples = attributes[:'useSamples']
      end

      if attributes.has_key?(:'usedDeviceGroupId')
        self.used_device_group_id = attributes[:'usedDeviceGroupId']
      end

      if attributes.has_key?(:'usedDeviceGroupName')
        self.used_device_group_name = attributes[:'usedDeviceGroupName']
      end

      if attributes.has_key?(:'videoRecordingEnabled')
        self.video_recording_enabled = attributes[:'videoRecordingEnabled']
      end

      if attributes.has_key?(:'withAnnotation')
        self.with_annotation = attributes[:'withAnnotation']
      end

      if attributes.has_key?(:'withoutAnnotation')
        self.without_annotation = attributes[:'withoutAnnotation']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      limitation_type_validator = EnumAttributeValidator.new('String', ['PACKAGE', 'CLASS'])
      return false unless limitation_type_validator.valid?(@limitation_type)
      os_type_validator = EnumAttributeValidator.new('String', ['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'])
      return false unless os_type_validator.valid?(@os_type)
      scheduler_validator = EnumAttributeValidator.new('String', ['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'])
      return false unless scheduler_validator.valid?(@scheduler)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] limitation_type Object to be assigned
    def limitation_type=(limitation_type)
      validator = EnumAttributeValidator.new('String', ['PACKAGE', 'CLASS'])
      unless validator.valid?(limitation_type)
        fail ArgumentError, 'invalid value for "limitation_type", must be one of #{validator.allowable_values}.'
      end
      @limitation_type = limitation_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_type Object to be assigned
    def os_type=(os_type)
      validator = EnumAttributeValidator.new('String', ['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'])
      unless validator.valid?(os_type)
        fail ArgumentError, 'invalid value for "os_type", must be one of #{validator.allowable_values}.'
      end
      @os_type = os_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scheduler Object to be assigned
    def scheduler=(scheduler)
      validator = EnumAttributeValidator.new('String', ['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'])
      unless validator.valid?(scheduler)
        fail ArgumentError, 'invalid value for "scheduler", must be one of #{validator.allowable_values}.'
      end
      @scheduler = scheduler
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_crawler_run == o.app_crawler_run &&
          appium_broker_address == o.appium_broker_address &&
          application_password == o.application_password &&
          application_username == o.application_username &&
          available_device_groups == o.available_device_groups &&
          available_devices == o.available_devices &&
          available_frameworks == o.available_frameworks &&
          client_side_test_config == o.client_side_test_config &&
          computed_devices == o.computed_devices &&
          credits_price == o.credits_price &&
          device_group_id == o.device_group_id &&
          device_ids == o.device_ids &&
          device_language_code == o.device_language_code &&
          device_name_pattern == o.device_name_pattern &&
          files == o.files &&
          framework_id == o.framework_id &&
          hook_url == o.hook_url &&
          id == o.id &&
          instrumentation_runner == o.instrumentation_runner &&
          limitation_type == o.limitation_type &&
          limitation_value == o.limitation_value &&
          loaded_previous == o.loaded_previous &&
          max_auto_retries_count == o.max_auto_retries_count &&
          os_type == o.os_type &&
          project_id == o.project_id &&
          project_name == o.project_name &&
          resign_files == o.resign_files &&
          run_available == o.run_available &&
          scheduler == o.scheduler &&
          screenshot_dir == o.screenshot_dir &&
          self_uri == o.self_uri &&
          status == o.status &&
          status_code == o.status_code &&
          test_run_id == o.test_run_id &&
          test_run_name == o.test_run_name &&
          test_run_parameters == o.test_run_parameters &&
          timeout == o.timeout &&
          use_samples == o.use_samples &&
          used_device_group_id == o.used_device_group_id &&
          used_device_group_name == o.used_device_group_name &&
          video_recording_enabled == o.video_recording_enabled &&
          with_annotation == o.with_annotation &&
          without_annotation == o.without_annotation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [app_crawler_run, appium_broker_address, application_password, application_username, available_device_groups, available_devices, available_frameworks, client_side_test_config, computed_devices, credits_price, device_group_id, device_ids, device_language_code, device_name_pattern, files, framework_id, hook_url, id, instrumentation_runner, limitation_type, limitation_value, loaded_previous, max_auto_retries_count, os_type, project_id, project_name, resign_files, run_available, scheduler, screenshot_dir, self_uri, status, status_code, test_run_id, test_run_name, test_run_parameters, timeout, use_samples, used_device_group_id, used_device_group_name, video_recording_enabled, with_annotation, without_annotation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BitbarCloudApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
