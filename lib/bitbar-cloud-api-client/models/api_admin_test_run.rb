=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.87.0
Contact: support@bitbar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module BitbarCloudApiClient
  class APIAdminTestRun
    attr_accessor :app_crawler_run

    attr_accessor :create_time

    attr_accessor :duration

    attr_accessor :end_time

    attr_accessor :framework_id

    attr_accessor :framework_name

    attr_accessor :id

    attr_accessor :priority

    attr_accessor :project_id

    attr_accessor :project_name

    attr_accessor :scheduler

    attr_accessor :self_uri

    attr_accessor :start_time

    attr_accessor :started_by_id

    attr_accessor :state

    attr_accessor :success_ratio

    attr_accessor :test_run_name

    attr_accessor :user_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_crawler_run' => :'appCrawlerRun',
        :'create_time' => :'createTime',
        :'duration' => :'duration',
        :'end_time' => :'endTime',
        :'framework_id' => :'frameworkId',
        :'framework_name' => :'frameworkName',
        :'id' => :'id',
        :'priority' => :'priority',
        :'project_id' => :'projectId',
        :'project_name' => :'projectName',
        :'scheduler' => :'scheduler',
        :'self_uri' => :'selfURI',
        :'start_time' => :'startTime',
        :'started_by_id' => :'startedById',
        :'state' => :'state',
        :'success_ratio' => :'successRatio',
        :'test_run_name' => :'testRunName',
        :'user_name' => :'userName'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'app_crawler_run' => :'BOOLEAN',
        :'create_time' => :'DateTime',
        :'duration' => :'Integer',
        :'end_time' => :'DateTime',
        :'framework_id' => :'Integer',
        :'framework_name' => :'String',
        :'id' => :'Integer',
        :'priority' => :'Integer',
        :'project_id' => :'Integer',
        :'project_name' => :'String',
        :'scheduler' => :'String',
        :'self_uri' => :'String',
        :'start_time' => :'DateTime',
        :'started_by_id' => :'Integer',
        :'state' => :'String',
        :'success_ratio' => :'Float',
        :'test_run_name' => :'String',
        :'user_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'appCrawlerRun')
        self.app_crawler_run = attributes[:'appCrawlerRun']
      end

      if attributes.has_key?(:'createTime')
        self.create_time = attributes[:'createTime']
      end

      if attributes.has_key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.has_key?(:'endTime')
        self.end_time = attributes[:'endTime']
      end

      if attributes.has_key?(:'frameworkId')
        self.framework_id = attributes[:'frameworkId']
      end

      if attributes.has_key?(:'frameworkName')
        self.framework_name = attributes[:'frameworkName']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.has_key?(:'projectId')
        self.project_id = attributes[:'projectId']
      end

      if attributes.has_key?(:'projectName')
        self.project_name = attributes[:'projectName']
      end

      if attributes.has_key?(:'scheduler')
        self.scheduler = attributes[:'scheduler']
      end

      if attributes.has_key?(:'selfURI')
        self.self_uri = attributes[:'selfURI']
      end

      if attributes.has_key?(:'startTime')
        self.start_time = attributes[:'startTime']
      end

      if attributes.has_key?(:'startedById')
        self.started_by_id = attributes[:'startedById']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'successRatio')
        self.success_ratio = attributes[:'successRatio']
      end

      if attributes.has_key?(:'testRunName')
        self.test_run_name = attributes[:'testRunName']
      end

      if attributes.has_key?(:'userName')
        self.user_name = attributes[:'userName']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      scheduler_validator = EnumAttributeValidator.new('String', ['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'])
      return false unless scheduler_validator.valid?(@scheduler)
      state_validator = EnumAttributeValidator.new('String', ['WAITING', 'RUNNING', 'FINISHED'])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scheduler Object to be assigned
    def scheduler=(scheduler)
      validator = EnumAttributeValidator.new('String', ['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'])
      unless validator.valid?(scheduler)
        fail ArgumentError, 'invalid value for "scheduler", must be one of #{validator.allowable_values}.'
      end
      @scheduler = scheduler
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['WAITING', 'RUNNING', 'FINISHED'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_crawler_run == o.app_crawler_run &&
          create_time == o.create_time &&
          duration == o.duration &&
          end_time == o.end_time &&
          framework_id == o.framework_id &&
          framework_name == o.framework_name &&
          id == o.id &&
          priority == o.priority &&
          project_id == o.project_id &&
          project_name == o.project_name &&
          scheduler == o.scheduler &&
          self_uri == o.self_uri &&
          start_time == o.start_time &&
          started_by_id == o.started_by_id &&
          state == o.state &&
          success_ratio == o.success_ratio &&
          test_run_name == o.test_run_name &&
          user_name == o.user_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [app_crawler_run, create_time, duration, end_time, framework_id, framework_name, id, priority, project_id, project_name, scheduler, self_uri, start_time, started_by_id, state, success_ratio, test_run_name, user_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BitbarCloudApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
