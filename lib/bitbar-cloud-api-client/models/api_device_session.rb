=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.87.0
Contact: support@bitbar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module BitbarCloudApiClient
  class APIDeviceSession
    attr_accessor :auto_retries_left_count

    attr_accessor :billable

    attr_accessor :create_time

    attr_accessor :device

    attr_accessor :device_instance_id

    attr_accessor :device_log_first_timestamp

    attr_accessor :device_run_id

    attr_accessor :device_time

    attr_accessor :duration

    attr_accessor :end_time

    attr_accessor :exclude_reason

    attr_accessor :id

    attr_accessor :install_time

    attr_accessor :launch_app_duration

    attr_accessor :name

    attr_accessor :project_id

    attr_accessor :retry_state

    attr_accessor :self_uri

    attr_accessor :start_time

    attr_accessor :state

    attr_accessor :success_ratio

    attr_accessor :test_case_all_count

    attr_accessor :test_case_failed_count

    attr_accessor :test_case_passed_count

    attr_accessor :test_case_skipped_count

    attr_accessor :test_case_success_count

    attr_accessor :test_run_id

    attr_accessor :time_limit

    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auto_retries_left_count' => :'autoRetriesLeftCount',
        :'billable' => :'billable',
        :'create_time' => :'createTime',
        :'device' => :'device',
        :'device_instance_id' => :'deviceInstanceId',
        :'device_log_first_timestamp' => :'deviceLogFirstTimestamp',
        :'device_run_id' => :'deviceRunId',
        :'device_time' => :'deviceTime',
        :'duration' => :'duration',
        :'end_time' => :'endTime',
        :'exclude_reason' => :'excludeReason',
        :'id' => :'id',
        :'install_time' => :'installTime',
        :'launch_app_duration' => :'launchAppDuration',
        :'name' => :'name',
        :'project_id' => :'projectId',
        :'retry_state' => :'retryState',
        :'self_uri' => :'selfURI',
        :'start_time' => :'startTime',
        :'state' => :'state',
        :'success_ratio' => :'successRatio',
        :'test_case_all_count' => :'testCaseAllCount',
        :'test_case_failed_count' => :'testCaseFailedCount',
        :'test_case_passed_count' => :'testCasePassedCount',
        :'test_case_skipped_count' => :'testCaseSkippedCount',
        :'test_case_success_count' => :'testCaseSuccessCount',
        :'test_run_id' => :'testRunId',
        :'time_limit' => :'timeLimit',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'auto_retries_left_count' => :'Integer',
        :'billable' => :'BOOLEAN',
        :'create_time' => :'DateTime',
        :'device' => :'APIDevice',
        :'device_instance_id' => :'Integer',
        :'device_log_first_timestamp' => :'Integer',
        :'device_run_id' => :'Integer',
        :'device_time' => :'Integer',
        :'duration' => :'Integer',
        :'end_time' => :'DateTime',
        :'exclude_reason' => :'String',
        :'id' => :'Integer',
        :'install_time' => :'DateTime',
        :'launch_app_duration' => :'Integer',
        :'name' => :'String',
        :'project_id' => :'Integer',
        :'retry_state' => :'String',
        :'self_uri' => :'String',
        :'start_time' => :'DateTime',
        :'state' => :'String',
        :'success_ratio' => :'Float',
        :'test_case_all_count' => :'Integer',
        :'test_case_failed_count' => :'Integer',
        :'test_case_passed_count' => :'Integer',
        :'test_case_skipped_count' => :'Integer',
        :'test_case_success_count' => :'Integer',
        :'test_run_id' => :'Integer',
        :'time_limit' => :'Integer',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'autoRetriesLeftCount')
        self.auto_retries_left_count = attributes[:'autoRetriesLeftCount']
      end

      if attributes.has_key?(:'billable')
        self.billable = attributes[:'billable']
      end

      if attributes.has_key?(:'createTime')
        self.create_time = attributes[:'createTime']
      end

      if attributes.has_key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.has_key?(:'deviceInstanceId')
        self.device_instance_id = attributes[:'deviceInstanceId']
      end

      if attributes.has_key?(:'deviceLogFirstTimestamp')
        self.device_log_first_timestamp = attributes[:'deviceLogFirstTimestamp']
      end

      if attributes.has_key?(:'deviceRunId')
        self.device_run_id = attributes[:'deviceRunId']
      end

      if attributes.has_key?(:'deviceTime')
        self.device_time = attributes[:'deviceTime']
      end

      if attributes.has_key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.has_key?(:'endTime')
        self.end_time = attributes[:'endTime']
      end

      if attributes.has_key?(:'excludeReason')
        self.exclude_reason = attributes[:'excludeReason']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'installTime')
        self.install_time = attributes[:'installTime']
      end

      if attributes.has_key?(:'launchAppDuration')
        self.launch_app_duration = attributes[:'launchAppDuration']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'projectId')
        self.project_id = attributes[:'projectId']
      end

      if attributes.has_key?(:'retryState')
        self.retry_state = attributes[:'retryState']
      end

      if attributes.has_key?(:'selfURI')
        self.self_uri = attributes[:'selfURI']
      end

      if attributes.has_key?(:'startTime')
        self.start_time = attributes[:'startTime']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'successRatio')
        self.success_ratio = attributes[:'successRatio']
      end

      if attributes.has_key?(:'testCaseAllCount')
        self.test_case_all_count = attributes[:'testCaseAllCount']
      end

      if attributes.has_key?(:'testCaseFailedCount')
        self.test_case_failed_count = attributes[:'testCaseFailedCount']
      end

      if attributes.has_key?(:'testCasePassedCount')
        self.test_case_passed_count = attributes[:'testCasePassedCount']
      end

      if attributes.has_key?(:'testCaseSkippedCount')
        self.test_case_skipped_count = attributes[:'testCaseSkippedCount']
      end

      if attributes.has_key?(:'testCaseSuccessCount')
        self.test_case_success_count = attributes[:'testCaseSuccessCount']
      end

      if attributes.has_key?(:'testRunId')
        self.test_run_id = attributes[:'testRunId']
      end

      if attributes.has_key?(:'timeLimit')
        self.time_limit = attributes[:'timeLimit']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      retry_state_validator = EnumAttributeValidator.new('String', ['NONE', 'MANUAL', 'AUTO'])
      return false unless retry_state_validator.valid?(@retry_state)
      state_validator = EnumAttributeValidator.new('String', ['ABORTED', 'EXCLUDED', 'FAILED', 'RUNNING', 'SUCCEEDED', 'TIMEOUT', 'WAITING', 'WARNING'])
      return false unless state_validator.valid?(@state)
      type_validator = EnumAttributeValidator.new('String', ['AUTOMATIC', 'MANUAL', 'REMOTE'])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] retry_state Object to be assigned
    def retry_state=(retry_state)
      validator = EnumAttributeValidator.new('String', ['NONE', 'MANUAL', 'AUTO'])
      unless validator.valid?(retry_state)
        fail ArgumentError, 'invalid value for "retry_state", must be one of #{validator.allowable_values}.'
      end
      @retry_state = retry_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['ABORTED', 'EXCLUDED', 'FAILED', 'RUNNING', 'SUCCEEDED', 'TIMEOUT', 'WAITING', 'WARNING'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['AUTOMATIC', 'MANUAL', 'REMOTE'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auto_retries_left_count == o.auto_retries_left_count &&
          billable == o.billable &&
          create_time == o.create_time &&
          device == o.device &&
          device_instance_id == o.device_instance_id &&
          device_log_first_timestamp == o.device_log_first_timestamp &&
          device_run_id == o.device_run_id &&
          device_time == o.device_time &&
          duration == o.duration &&
          end_time == o.end_time &&
          exclude_reason == o.exclude_reason &&
          id == o.id &&
          install_time == o.install_time &&
          launch_app_duration == o.launch_app_duration &&
          name == o.name &&
          project_id == o.project_id &&
          retry_state == o.retry_state &&
          self_uri == o.self_uri &&
          start_time == o.start_time &&
          state == o.state &&
          success_ratio == o.success_ratio &&
          test_case_all_count == o.test_case_all_count &&
          test_case_failed_count == o.test_case_failed_count &&
          test_case_passed_count == o.test_case_passed_count &&
          test_case_skipped_count == o.test_case_skipped_count &&
          test_case_success_count == o.test_case_success_count &&
          test_run_id == o.test_run_id &&
          time_limit == o.time_limit &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [auto_retries_left_count, billable, create_time, device, device_instance_id, device_log_first_timestamp, device_run_id, device_time, duration, end_time, exclude_reason, id, install_time, launch_app_duration, name, project_id, retry_state, self_uri, start_time, state, success_ratio, test_case_all_count, test_case_failed_count, test_case_passed_count, test_case_skipped_count, test_case_success_count, test_run_id, time_limit, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BitbarCloudApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
