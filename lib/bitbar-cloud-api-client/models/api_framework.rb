=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.87.0
Contact: support@bitbar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module BitbarCloudApiClient
  class APIFramework
    attr_accessor :account_id

    attr_accessor :can_run_from_ui

    attr_accessor :create_time

    attr_accessor :description

    attr_accessor :documentation_url

    attr_accessor :for_projects

    attr_accessor :icon

    attr_accessor :id

    attr_accessor :label_id

    attr_accessor :label_name

    attr_accessor :main_user_email

    attr_accessor :name

    attr_accessor :os_type

    attr_accessor :required_app_extensions

    attr_accessor :required_test_extensions

    attr_accessor :required_test_file_tags

    attr_accessor :retryable

    attr_accessor :sample_app

    attr_accessor :sample_test

    attr_accessor :secured

    attr_accessor :self_uri

    attr_accessor :skip_older_sdk

    attr_accessor :skip_queue

    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_id' => :'accountId',
        :'can_run_from_ui' => :'canRunFromUI',
        :'create_time' => :'createTime',
        :'description' => :'description',
        :'documentation_url' => :'documentationUrl',
        :'for_projects' => :'forProjects',
        :'icon' => :'icon',
        :'id' => :'id',
        :'label_id' => :'labelId',
        :'label_name' => :'labelName',
        :'main_user_email' => :'mainUserEmail',
        :'name' => :'name',
        :'os_type' => :'osType',
        :'required_app_extensions' => :'requiredAppExtensions',
        :'required_test_extensions' => :'requiredTestExtensions',
        :'required_test_file_tags' => :'requiredTestFileTags',
        :'retryable' => :'retryable',
        :'sample_app' => :'sampleApp',
        :'sample_test' => :'sampleTest',
        :'secured' => :'secured',
        :'self_uri' => :'selfURI',
        :'skip_older_sdk' => :'skipOlderSdk',
        :'skip_queue' => :'skipQueue',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account_id' => :'Integer',
        :'can_run_from_ui' => :'BOOLEAN',
        :'create_time' => :'DateTime',
        :'description' => :'String',
        :'documentation_url' => :'String',
        :'for_projects' => :'BOOLEAN',
        :'icon' => :'String',
        :'id' => :'Integer',
        :'label_id' => :'Integer',
        :'label_name' => :'String',
        :'main_user_email' => :'String',
        :'name' => :'String',
        :'os_type' => :'String',
        :'required_app_extensions' => :'String',
        :'required_test_extensions' => :'String',
        :'required_test_file_tags' => :'String',
        :'retryable' => :'BOOLEAN',
        :'sample_app' => :'APIUserFile',
        :'sample_test' => :'APIUserFile',
        :'secured' => :'BOOLEAN',
        :'self_uri' => :'String',
        :'skip_older_sdk' => :'BOOLEAN',
        :'skip_queue' => :'BOOLEAN',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'canRunFromUI')
        self.can_run_from_ui = attributes[:'canRunFromUI']
      end

      if attributes.has_key?(:'createTime')
        self.create_time = attributes[:'createTime']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'documentationUrl')
        self.documentation_url = attributes[:'documentationUrl']
      end

      if attributes.has_key?(:'forProjects')
        self.for_projects = attributes[:'forProjects']
      end

      if attributes.has_key?(:'icon')
        self.icon = attributes[:'icon']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'labelId')
        self.label_id = attributes[:'labelId']
      end

      if attributes.has_key?(:'labelName')
        self.label_name = attributes[:'labelName']
      end

      if attributes.has_key?(:'mainUserEmail')
        self.main_user_email = attributes[:'mainUserEmail']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'osType')
        self.os_type = attributes[:'osType']
      end

      if attributes.has_key?(:'requiredAppExtensions')
        self.required_app_extensions = attributes[:'requiredAppExtensions']
      end

      if attributes.has_key?(:'requiredTestExtensions')
        self.required_test_extensions = attributes[:'requiredTestExtensions']
      end

      if attributes.has_key?(:'requiredTestFileTags')
        self.required_test_file_tags = attributes[:'requiredTestFileTags']
      end

      if attributes.has_key?(:'retryable')
        self.retryable = attributes[:'retryable']
      end

      if attributes.has_key?(:'sampleApp')
        self.sample_app = attributes[:'sampleApp']
      end

      if attributes.has_key?(:'sampleTest')
        self.sample_test = attributes[:'sampleTest']
      end

      if attributes.has_key?(:'secured')
        self.secured = attributes[:'secured']
      end

      if attributes.has_key?(:'selfURI')
        self.self_uri = attributes[:'selfURI']
      end

      if attributes.has_key?(:'skipOlderSdk')
        self.skip_older_sdk = attributes[:'skipOlderSdk']
      end

      if attributes.has_key?(:'skipQueue')
        self.skip_queue = attributes[:'skipQueue']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      os_type_validator = EnumAttributeValidator.new('String', ['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'])
      return false unless os_type_validator.valid?(@os_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_type Object to be assigned
    def os_type=(os_type)
      validator = EnumAttributeValidator.new('String', ['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'])
      unless validator.valid?(os_type)
        fail ArgumentError, 'invalid value for "os_type", must be one of #{validator.allowable_values}.'
      end
      @os_type = os_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          can_run_from_ui == o.can_run_from_ui &&
          create_time == o.create_time &&
          description == o.description &&
          documentation_url == o.documentation_url &&
          for_projects == o.for_projects &&
          icon == o.icon &&
          id == o.id &&
          label_id == o.label_id &&
          label_name == o.label_name &&
          main_user_email == o.main_user_email &&
          name == o.name &&
          os_type == o.os_type &&
          required_app_extensions == o.required_app_extensions &&
          required_test_extensions == o.required_test_extensions &&
          required_test_file_tags == o.required_test_file_tags &&
          retryable == o.retryable &&
          sample_app == o.sample_app &&
          sample_test == o.sample_test &&
          secured == o.secured &&
          self_uri == o.self_uri &&
          skip_older_sdk == o.skip_older_sdk &&
          skip_queue == o.skip_queue &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_id, can_run_from_ui, create_time, description, documentation_url, for_projects, icon, id, label_id, label_name, main_user_email, name, os_type, required_app_extensions, required_test_extensions, required_test_file_tags, retryable, sample_app, sample_test, secured, self_uri, skip_older_sdk, skip_queue, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BitbarCloudApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
