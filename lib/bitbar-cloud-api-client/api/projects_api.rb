=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.87.0
Contact: support@bitbar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module BitbarCloudApiClient
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create project.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [String] :mode mode
    # @option opts [String] :name name
    # @option opts [String] :type type (default to GENERIC)
    # @return [APIProject]
    def create_my_project_using_post(user_id, opts = {})
      data, _status_code, _headers = create_my_project_using_post_with_http_info(user_id, opts)
      data
    end

    # Create project.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [String] :mode mode
    # @option opts [String] :name name
    # @option opts [String] :type type
    # @return [Array<(APIProject, Fixnum, Hash)>] APIProject data, response status code and response headers
    def create_my_project_using_post_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.create_my_project_using_post ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectsApi.create_my_project_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['ANDROID', 'IOS', 'CALABASH', 'CALABASH_IOS', 'XCTEST', 'XCUITEST', 'APPIUM_ANDROID', 'APPIUM_ANDROID_SERVER_SIDE', 'APPIUM_IOS', 'APPIUM_IOS_SERVER_SIDE', 'GENERIC'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of ANDROID, IOS, CALABASH, CALABASH_IOS, XCTEST, XCUITEST, APPIUM_ANDROID, APPIUM_ANDROID_SERVER_SIDE, APPIUM_IOS, APPIUM_IOS_SERVER_SIDE, GENERIC'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'appCrawlerRun'] = opts[:'app_crawler_run'] if !opts[:'app_crawler_run'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#create_my_project_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete project.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_project_using_delete(project_id, user_id, opts = {})
      delete_user_project_using_delete_with_http_info(project_id, user_id, opts)
      nil
    end

    # Delete project.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_project_using_delete_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.delete_user_project_using_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.delete_user_project_using_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectsApi.delete_user_project_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#delete_user_project_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get project.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIProject]
    def get_user_project_using_get(project_id, user_id, opts = {})
      data, _status_code, _headers = get_user_project_using_get_with_http_info(project_id, user_id, opts)
      data
    end

    # Get project.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProject, Fixnum, Hash)>] APIProject data, response status code and response headers
    def get_user_project_using_get_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_user_project_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.get_user_project_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectsApi.get_user_project_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_user_project_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get projects.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134484593&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134484593&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;readonly_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sharedbyemail_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [BOOLEAN] :show_statistics showStatistics (default to false)
    # @option opts [BOOLEAN] :skip_common_project skipCommonProject (default to false)
    # @option opts [BOOLEAN] :skip_shared skipShared (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;sharedByEmail_a
    # @option opts [BOOLEAN] :with_additional_users withAdditionalUsers (default to false)
    # @return [APIListOfAPIProject]
    def get_user_projects_using_get(user_id, opts = {})
      data, _status_code, _headers = get_user_projects_using_get_with_http_info(user_id, opts)
      data
    end

    # Get projects.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134484593&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134484593&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;readonly_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sharedbyemail_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [BOOLEAN] :show_statistics showStatistics
    # @option opts [BOOLEAN] :skip_common_project skipCommonProject
    # @option opts [BOOLEAN] :skip_shared skipShared
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;sharedByEmail_a
    # @option opts [BOOLEAN] :with_additional_users withAdditionalUsers
    # @return [Array<(APIListOfAPIProject, Fixnum, Hash)>] APIListOfAPIProject data, response status code and response headers
    def get_user_projects_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_user_projects_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectsApi.get_user_projects_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'showStatistics'] = opts[:'show_statistics'] if !opts[:'show_statistics'].nil?
      query_params[:'skipCommonProject'] = opts[:'skip_common_project'] if !opts[:'skip_common_project'].nil?
      query_params[:'skipShared'] = opts[:'skip_shared'] if !opts[:'skip_shared'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'withAdditionalUsers'] = opts[:'with_additional_users'] if !opts[:'with_additional_users'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_user_projects_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update project.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :archiving_item_count archivingItemCount
    # @option opts [String] :archiving_strategy archivingStrategy
    # @option opts [BOOLEAN] :common common
    # @option opts [String] :description description
    # @option opts [String] :name name
    # @return [APIProject]
    def update_user_project_using_post(project_id, user_id, opts = {})
      data, _status_code, _headers = update_user_project_using_post_with_http_info(project_id, user_id, opts)
      data
    end

    # Update project.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :archiving_item_count archivingItemCount
    # @option opts [String] :archiving_strategy archivingStrategy
    # @option opts [BOOLEAN] :common common
    # @option opts [String] :description description
    # @option opts [String] :name name
    # @return [Array<(APIProject, Fixnum, Hash)>] APIProject data, response status code and response headers
    def update_user_project_using_post_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.update_user_project_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.update_user_project_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectsApi.update_user_project_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'archiving_strategy'] && !['NEVER', 'DAYS', 'RUNS'].include?(opts[:'archiving_strategy'])
        fail ArgumentError, 'invalid value for "archiving_strategy", must be one of NEVER, DAYS, RUNS'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'archivingItemCount'] = opts[:'archiving_item_count'] if !opts[:'archiving_item_count'].nil?
      query_params[:'archivingStrategy'] = opts[:'archiving_strategy'] if !opts[:'archiving_strategy'].nil?
      query_params[:'common'] = opts[:'common'] if !opts[:'common'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#update_user_project_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
