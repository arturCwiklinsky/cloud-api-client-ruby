=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.87.0
Contact: support@bitbar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module BitbarCloudApiClient
  class AdminApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Abort build.
    # @param build_id buildId
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [APIPipelineBuild]
    def abort_build_using_post(build_id, job_id, opts = {})
      data, _status_code, _headers = abort_build_using_post_with_http_info(build_id, job_id, opts)
      data
    end

    # Abort build.
    # @param build_id buildId
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPipelineBuild, Fixnum, Hash)>] APIPipelineBuild data, response status code and response headers
    def abort_build_using_post_with_http_info(build_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.abort_build_using_post ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling AdminApi.abort_build_using_post"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AdminApi.abort_build_using_post"
      end
      # resource path
      local_var_path = '/api/v2/jobs/{jobId}/builds/{buildId}/abort'.sub('{' + 'buildId' + '}', build_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#abort_build_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Abort test run and receive partial results.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def abort_project_test_run_using_post(project_id, run_id, opts = {})
      data, _status_code, _headers = abort_project_test_run_using_post_with_http_info(project_id, run_id, opts)
      data
    end

    # Abort test run and receive partial results.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def abort_project_test_run_using_post_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.abort_project_test_run_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.abort_project_test_run_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.abort_project_test_run_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/abort'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#abort_project_test_run_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Abort test run and receive partial results.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIAdminTestRun]
    def abort_test_run_using_post(run_id, opts = {})
      data, _status_code, _headers = abort_test_run_using_post_with_http_info(run_id, opts)
      data
    end

    # Abort test run and receive partial results.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminTestRun, Fixnum, Hash)>] APIAdminTestRun data, response status code and response headers
    def abort_test_run_using_post_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.abort_test_run_using_post ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.abort_test_run_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}/abort'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminTestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#abort_test_run_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Abort test run and receive partial results.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [APITestRun]
    def abort_test_run_using_post1(run_id, opts = {})
      data, _status_code, _headers = abort_test_run_using_post1_with_http_info(run_id, opts)
      data
    end

    # Abort test run and receive partial results.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def abort_test_run_using_post1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.abort_test_run_using_post1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.abort_test_run_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/abort'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#abort_test_run_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def activate_license_using_post(id, opts = {})
      data, _status_code, _headers = activate_license_using_post_with_http_info(id, opts)
      data
    end

    # Activate license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Fixnum, Hash)>] APILicense data, response status code and response headers
    def activate_license_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.activate_license_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.activate_license_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}/activate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APILicense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#activate_license_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate service.
    # @param service_id serviceId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activate_time activateTime
    # @return [APIService]
    def activate_service_using_post(service_id, opts = {})
      data, _status_code, _headers = activate_service_using_post_with_http_info(service_id, opts)
      data
    end

    # Activate service.
    # @param service_id serviceId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activate_time activateTime
    # @return [Array<(APIService, Fixnum, Hash)>] APIService data, response status code and response headers
    def activate_service_using_post_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.activate_service_using_post ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AdminApi.activate_service_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/services/{serviceId}/activate'.sub('{' + 'serviceId' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'activateTime'] = opts[:'activate_time'] if !opts[:'activate_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#activate_service_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate account service.
    # @param account_service_id accountServiceId
    # @param [Hash] opts the optional parameters
    # @return [APIAccountService]
    def activate_user_service_using_post(account_service_id, opts = {})
      data, _status_code, _headers = activate_user_service_using_post_with_http_info(account_service_id, opts)
      data
    end

    # Activate account service.
    # @param account_service_id accountServiceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountService, Fixnum, Hash)>] APIAccountService data, response status code and response headers
    def activate_user_service_using_post_with_http_info(account_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.activate_user_service_using_post ...'
      end
      # verify the required parameter 'account_service_id' is set
      if @api_client.config.client_side_validation && account_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_service_id' when calling AdminApi.activate_user_service_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/account-services/{accountServiceId}/activate'.sub('{' + 'accountServiceId' + '}', account_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccountService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#activate_user_service_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add device specific cleanup configuration.
    # @param device_cleanup_configuration_id deviceCleanupConfigurationId
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceCleanupConfiguration]
    def add_device_cleanup_configuration_using_post(device_cleanup_configuration_id, device_id, opts = {})
      data, _status_code, _headers = add_device_cleanup_configuration_using_post_with_http_info(device_cleanup_configuration_id, device_id, opts)
      data
    end

    # Add device specific cleanup configuration.
    # @param device_cleanup_configuration_id deviceCleanupConfigurationId
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceCleanupConfiguration, Fixnum, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def add_device_cleanup_configuration_using_post_with_http_info(device_cleanup_configuration_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_device_cleanup_configuration_using_post ...'
      end
      # verify the required parameter 'device_cleanup_configuration_id' is set
      if @api_client.config.client_side_validation && device_cleanup_configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_cleanup_configuration_id' when calling AdminApi.add_device_cleanup_configuration_using_post"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.add_device_cleanup_configuration_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/cleanup-configuration'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceCleanupConfigurationId'] = device_cleanup_configuration_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceCleanupConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_device_cleanup_configuration_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add label to device.
    # @param device_id deviceId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceProperty]
    def add_device_label_using_post(device_id, label_id, opts = {})
      data, _status_code, _headers = add_device_label_using_post_with_http_info(device_id, label_id, opts)
      data
    end

    # Add label to device.
    # @param device_id deviceId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceProperty, Fixnum, Hash)>] APIDeviceProperty data, response status code and response headers
    def add_device_label_using_post_with_http_info(device_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_device_label_using_post ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.add_device_label_using_post"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AdminApi.add_device_label_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/labels'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'labelId'] = label_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_device_label_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create device model criterion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :field field
    # @option opts [Integer] :label_group_id labelGroupId
    # @return [nil]
    def add_device_model_criteria_using_post(opts = {})
      add_device_model_criteria_using_post_with_http_info(opts)
      nil
    end

    # Create device model criterion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :field field
    # @option opts [Integer] :label_group_id labelGroupId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_device_model_criteria_using_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_device_model_criteria_using_post ...'
      end
      if @api_client.config.client_side_validation && opts[:'field'] && !['NAME', 'FINGERPRINT', 'SERIAL_ID', 'UNLOCK_GESTURE', 'SOFTWARE_VERSION', 'INIT_STEP', 'ACCOUNT'].include?(opts[:'field'])
        fail ArgumentError, 'invalid value for "field", must be one of NAME, FINGERPRINT, SERIAL_ID, UNLOCK_GESTURE, SOFTWARE_VERSION, INIT_STEP, ACCOUNT'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-model-criteria'

      # query parameters
      query_params = {}
      query_params[:'field'] = opts[:'field'] if !opts[:'field'].nil?
      query_params[:'labelGroupId'] = opts[:'label_group_id'] if !opts[:'label_group_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_device_model_criteria_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add device to device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_id deviceId
    # @option opts [Array<Integer>] :device_ids deviceIds[]
    # @return [APIDeviceGroup]
    def add_device_to_device_group_using_post(device_group_id, opts = {})
      data, _status_code, _headers = add_device_to_device_group_using_post_with_http_info(device_group_id, opts)
      data
    end

    # Add device to device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_id deviceId
    # @option opts [Array<Integer>] :device_ids deviceIds[]
    # @return [Array<(APIDeviceGroup, Fixnum, Hash)>] APIDeviceGroup data, response status code and response headers
    def add_device_to_device_group_using_post_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_device_to_device_group_using_post ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.add_device_to_device_group_using_post"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/devices'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceId'] = @api_client.build_collection_param(opts[:'device_id'], :multi) if !opts[:'device_id'].nil?
      query_params[:'deviceIds[]'] = @api_client.build_collection_param(opts[:'device_ids'], :multi) if !opts[:'device_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_device_to_device_group_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add tag to test run.
    # @param name name
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APITag]
    def add_project_test_run_tag_using_post(name, project_id, run_id, opts = {})
      data, _status_code, _headers = add_project_test_run_tag_using_post_with_http_info(name, project_id, run_id, opts)
      data
    end

    # Add tag to test run.
    # @param name name
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITag, Fixnum, Hash)>] APITag data, response status code and response headers
    def add_project_test_run_tag_using_post_with_http_info(name, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_project_test_run_tag_using_post ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.add_project_test_run_tag_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.add_project_test_run_tag_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.add_project_test_run_tag_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/tags'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_project_test_run_tag_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add account role.
    # @param role_id roleId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :expire_time expireTime
    # @option opts [Integer] :value value
    # @return [APIRole]
    def add_role_to_account_using_post(role_id, user_id, opts = {})
      data, _status_code, _headers = add_role_to_account_using_post_with_http_info(role_id, user_id, opts)
      data
    end

    # Add account role.
    # @param role_id roleId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :expire_time expireTime
    # @option opts [Integer] :value value
    # @return [Array<(APIRole, Fixnum, Hash)>] APIRole data, response status code and response headers
    def add_role_to_account_using_post_with_http_info(role_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_role_to_account_using_post ...'
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling AdminApi.add_role_to_account_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.add_role_to_account_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account/roles'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'roleId'] = role_id
      query_params[:'expireTime'] = opts[:'expire_time'] if !opts[:'expire_time'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIRole')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_role_to_account_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add screenshot to device session.
    # @param device_session_id deviceSessionId
    # @param name name
    # @param screenshot screenshot
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def add_screenshot_using_post(device_session_id, name, screenshot, opts = {})
      data, _status_code, _headers = add_screenshot_using_post_with_http_info(device_session_id, name, screenshot, opts)
      data
    end

    # Add screenshot to device session.
    # @param device_session_id deviceSessionId
    # @param name name
    # @param screenshot screenshot
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def add_screenshot_using_post_with_http_info(device_session_id, name, screenshot, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_screenshot_using_post ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.add_screenshot_using_post"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.add_screenshot_using_post"
      end
      # verify the required parameter 'screenshot' is set
      if @api_client.config.client_side_validation && screenshot.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot' when calling AdminApi.add_screenshot_using_post"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/screenshots'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['screenshot'] = screenshot

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_screenshot_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add selectors to device group.
    # @param device_group_id deviceGroupId
    # @param selector_ids selectorIds[]
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceGroup]
    def add_selector_to_device_group_using_post(device_group_id, selector_ids, opts = {})
      data, _status_code, _headers = add_selector_to_device_group_using_post_with_http_info(device_group_id, selector_ids, opts)
      data
    end

    # Add selectors to device group.
    # @param device_group_id deviceGroupId
    # @param selector_ids selectorIds[]
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceGroup, Fixnum, Hash)>] APIDeviceGroup data, response status code and response headers
    def add_selector_to_device_group_using_post_with_http_info(device_group_id, selector_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_selector_to_device_group_using_post ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.add_selector_to_device_group_using_post"
      end
      # verify the required parameter 'selector_ids' is set
      if @api_client.config.client_side_validation && selector_ids.nil?
        fail ArgumentError, "Missing the required parameter 'selector_ids' when calling AdminApi.add_selector_to_device_group_using_post"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/selectors'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'selectorIds[]'] = @api_client.build_collection_param(selector_ids, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_selector_to_device_group_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add service to user.
    # @param service_id serviceId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count count (default to 1)
    # @return [APIAccountService]
    def add_service_to_user_using_post(service_id, user_id, opts = {})
      data, _status_code, _headers = add_service_to_user_using_post_with_http_info(service_id, user_id, opts)
      data
    end

    # Add service to user.
    # @param service_id serviceId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count count
    # @return [Array<(APIAccountService, Fixnum, Hash)>] APIAccountService data, response status code and response headers
    def add_service_to_user_using_post_with_http_info(service_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_service_to_user_using_post ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AdminApi.add_service_to_user_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.add_service_to_user_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account-services'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'serviceId'] = service_id
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccountService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_service_to_user_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add service to user.
    # @param service_id serviceId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count count (default to 1)
    # @return [APIAccountService]
    def add_service_to_user_using_post1(service_id, user_id, opts = {})
      data, _status_code, _headers = add_service_to_user_using_post1_with_http_info(service_id, user_id, opts)
      data
    end

    # Add service to user.
    # @param service_id serviceId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count count
    # @return [Array<(APIAccountService, Fixnum, Hash)>] APIAccountService data, response status code and response headers
    def add_service_to_user_using_post1_with_http_info(service_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_service_to_user_using_post1 ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AdminApi.add_service_to_user_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.add_service_to_user_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account/services'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'serviceId'] = service_id
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccountService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_service_to_user_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add tag to test run.
    # @param name name
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [APITag]
    def add_test_run_tag_using_post(name, run_id, opts = {})
      data, _status_code, _headers = add_test_run_tag_using_post_with_http_info(name, run_id, opts)
      data
    end

    # Add tag to test run.
    # @param name name
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(APITag, Fixnum, Hash)>] APITag data, response status code and response headers
    def add_test_run_tag_using_post_with_http_info(name, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_test_run_tag_using_post ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.add_test_run_tag_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.add_test_run_tag_using_post"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/tags'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_test_run_tag_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add label to device.
    # @param device_id deviceId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceProperty]
    def add_user_label_device_using_post(device_id, label_id, opts = {})
      data, _status_code, _headers = add_user_label_device_using_post_with_http_info(device_id, label_id, opts)
      data
    end

    # Add label to device.
    # @param device_id deviceId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceProperty, Fixnum, Hash)>] APIDeviceProperty data, response status code and response headers
    def add_user_label_device_using_post_with_http_info(device_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_user_label_device_using_post ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.add_user_label_device_using_post"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AdminApi.add_user_label_device_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/properties'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'labelId'] = label_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_user_label_device_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add user to access group.
    # @param access_group_id accessGroupId
    # @param email email
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def add_user_using_post(access_group_id, email, opts = {})
      data, _status_code, _headers = add_user_using_post_with_http_info(access_group_id, email, opts)
      data
    end

    # Add user to access group.
    # @param access_group_id accessGroupId
    # @param email email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def add_user_using_post_with_http_info(access_group_id, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.add_user_using_post ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.add_user_using_post"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AdminApi.add_user_using_post"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/users'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'email'] = email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_user_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Archive service.
    # @param service_id serviceId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def archive_service_using_delete(service_id, opts = {})
      archive_service_using_delete_with_http_info(service_id, opts)
      nil
    end

    # Archive service.
    # @param service_id serviceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def archive_service_using_delete_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.archive_service_using_delete ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AdminApi.archive_service_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/services/{serviceId}'.sub('{' + 'serviceId' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#archive_service_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create property banning application.
    # @param test_run_id testRunId
    # @param [Hash] opts the optional parameters
    # @return [APIProperty]
    def ban_application_using_post(test_run_id, opts = {})
      data, _status_code, _headers = ban_application_using_post_with_http_info(test_run_id, opts)
      data
    end

    # Create property banning application.
    # @param test_run_id testRunId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProperty, Fixnum, Hash)>] APIProperty data, response status code and response headers
    def ban_application_using_post_with_http_info(test_run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.ban_application_using_post ...'
      end
      # verify the required parameter 'test_run_id' is set
      if @api_client.config.client_side_validation && test_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'test_run_id' when calling AdminApi.ban_application_using_post"
      end
      # resource path
      local_var_path = '/api/v2/properties/app-bans'

      # query parameters
      query_params = {}
      query_params[:'testRunId'] = test_run_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#ban_application_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create property banning email domain.
    # @param email email
    # @param [Hash] opts the optional parameters
    # @return [APIProperty]
    def ban_email_domain_using_post(email, opts = {})
      data, _status_code, _headers = ban_email_domain_using_post_with_http_info(email, opts)
      data
    end

    # Create property banning email domain.
    # @param email email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProperty, Fixnum, Hash)>] APIProperty data, response status code and response headers
    def ban_email_domain_using_post_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.ban_email_domain_using_post ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AdminApi.ban_email_domain_using_post"
      end
      # resource path
      local_var_path = '/api/v2/properties/email-bans'

      # query parameters
      query_params = {}
      query_params[:'email'] = email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#ban_email_domain_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start blinking device screen.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [APIAdminDevice]
    def blink_using_post(device_id, opts = {})
      data, _status_code, _headers = blink_using_post_with_http_info(device_id, opts)
      data
    end

    # Start blinking device screen.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminDevice, Fixnum, Hash)>] APIAdminDevice data, response status code and response headers
    def blink_using_post_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.blink_using_post ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.blink_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/blink'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#blink_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check potential notifications generated by notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_all&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPINotification]
    def check_notification_plan_using_get(id, opts = {})
      data, _status_code, _headers = check_notification_plan_using_get_with_http_info(id, opts)
      data
    end

    # Check potential notifications generated by notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_all&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPINotification, Fixnum, Hash)>] APIListOfAPINotification data, response status code and response headers
    def check_notification_plan_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.check_notification_plan_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.check_notification_plan_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans/{id}/check'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPINotification')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#check_notification_plan_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create device cleanup configuration.
    # @param content content
    # @param discriminator discriminator
    # @param os_type osType
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled enabled (default to true)
    # @return [APIDeviceCleanupConfiguration]
    def create_device_cleanup_configuration_using_post(content, discriminator, os_type, opts = {})
      data, _status_code, _headers = create_device_cleanup_configuration_using_post_with_http_info(content, discriminator, os_type, opts)
      data
    end

    # Create device cleanup configuration.
    # @param content content
    # @param discriminator discriminator
    # @param os_type osType
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled enabled
    # @return [Array<(APIDeviceCleanupConfiguration, Fixnum, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def create_device_cleanup_configuration_using_post_with_http_info(content, discriminator, os_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_device_cleanup_configuration_using_post ...'
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling AdminApi.create_device_cleanup_configuration_using_post"
      end
      # verify the required parameter 'discriminator' is set
      if @api_client.config.client_side_validation && discriminator.nil?
        fail ArgumentError, "Missing the required parameter 'discriminator' when calling AdminApi.create_device_cleanup_configuration_using_post"
      end
      # verify the required parameter 'os_type' is set
      if @api_client.config.client_side_validation && os_type.nil?
        fail ArgumentError, "Missing the required parameter 'os_type' when calling AdminApi.create_device_cleanup_configuration_using_post"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(os_type)
        fail ArgumentError, "invalid value for 'os_type', must be one of IOS, ANDROID, DESKTOP, UNDEFINED"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations'

      # query parameters
      query_params = {}
      query_params[:'content'] = content
      query_params[:'discriminator'] = discriminator
      query_params[:'osType'] = os_type
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceCleanupConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_device_cleanup_configuration_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create connection for device session.
    # @param device_session_id deviceSessionId
    # @param host host
    # @param port port
    # @param type type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password password
    # @return [APIConnection]
    def create_device_session_connection_using_post(device_session_id, host, port, type, opts = {})
      data, _status_code, _headers = create_device_session_connection_using_post_with_http_info(device_session_id, host, port, type, opts)
      data
    end

    # Create connection for device session.
    # @param device_session_id deviceSessionId
    # @param host host
    # @param port port
    # @param type type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password password
    # @return [Array<(APIConnection, Fixnum, Hash)>] APIConnection data, response status code and response headers
    def create_device_session_connection_using_post_with_http_info(device_session_id, host, port, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_device_session_connection_using_post ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.create_device_session_connection_using_post"
      end
      # verify the required parameter 'host' is set
      if @api_client.config.client_side_validation && host.nil?
        fail ArgumentError, "Missing the required parameter 'host' when calling AdminApi.create_device_session_connection_using_post"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AdminApi.create_device_session_connection_using_post"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AdminApi.create_device_session_connection_using_post"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/connections'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'host'] = host
      query_params[:'port'] = port
      query_params[:'type'] = type
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_device_session_connection_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create framework.
    # @param content content
    # @param name name
    # @param os_type osType
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id accountId
    # @option opts [BOOLEAN] :add_label_to_devices addLabelToDevices (default to false)
    # @option opts [BOOLEAN] :can_run_from_ui canRunFromUI (default to true)
    # @option opts [String] :description description
    # @option opts [String] :documentation_url documentationUrl
    # @option opts [BOOLEAN] :for_projects forProjects (default to true)
    # @option opts [String] :icon icon
    # @option opts [Integer] :label_id labelId
    # @option opts [String] :required_app_extensions requiredAppExtensions
    # @option opts [String] :required_test_extensions requiredTestExtensions
    # @option opts [String] :required_test_file_tags requiredTestFileTags
    # @option opts [BOOLEAN] :retryable retryable (default to true)
    # @option opts [Array<Integer>] :role_ids roleIds[]
    # @option opts [Integer] :sample_app_id sampleAppId
    # @option opts [Integer] :sample_test_id sampleTestId
    # @option opts [BOOLEAN] :skip_older_sdk skipOlderSdk (default to true)
    # @option opts [BOOLEAN] :skip_queue skipQueue (default to false)
    # @option opts [String] :type type
    # @return [APIFramework]
    def create_framework_using_post(content, name, os_type, opts = {})
      data, _status_code, _headers = create_framework_using_post_with_http_info(content, name, os_type, opts)
      data
    end

    # Create framework.
    # @param content content
    # @param name name
    # @param os_type osType
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id accountId
    # @option opts [BOOLEAN] :add_label_to_devices addLabelToDevices
    # @option opts [BOOLEAN] :can_run_from_ui canRunFromUI
    # @option opts [String] :description description
    # @option opts [String] :documentation_url documentationUrl
    # @option opts [BOOLEAN] :for_projects forProjects
    # @option opts [String] :icon icon
    # @option opts [Integer] :label_id labelId
    # @option opts [String] :required_app_extensions requiredAppExtensions
    # @option opts [String] :required_test_extensions requiredTestExtensions
    # @option opts [String] :required_test_file_tags requiredTestFileTags
    # @option opts [BOOLEAN] :retryable retryable
    # @option opts [Array<Integer>] :role_ids roleIds[]
    # @option opts [Integer] :sample_app_id sampleAppId
    # @option opts [Integer] :sample_test_id sampleTestId
    # @option opts [BOOLEAN] :skip_older_sdk skipOlderSdk
    # @option opts [BOOLEAN] :skip_queue skipQueue
    # @option opts [String] :type type
    # @return [Array<(APIFramework, Fixnum, Hash)>] APIFramework data, response status code and response headers
    def create_framework_using_post_with_http_info(content, name, os_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_framework_using_post ...'
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling AdminApi.create_framework_using_post"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.create_framework_using_post"
      end
      # verify the required parameter 'os_type' is set
      if @api_client.config.client_side_validation && os_type.nil?
        fail ArgumentError, "Missing the required parameter 'os_type' when calling AdminApi.create_framework_using_post"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(os_type)
        fail ArgumentError, "invalid value for 'os_type', must be one of IOS, ANDROID, DESKTOP, UNDEFINED"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks'

      # query parameters
      query_params = {}
      query_params[:'content'] = content
      query_params[:'name'] = name
      query_params[:'osType'] = os_type
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'addLabelToDevices'] = opts[:'add_label_to_devices'] if !opts[:'add_label_to_devices'].nil?
      query_params[:'canRunFromUI'] = opts[:'can_run_from_ui'] if !opts[:'can_run_from_ui'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'documentationUrl'] = opts[:'documentation_url'] if !opts[:'documentation_url'].nil?
      query_params[:'forProjects'] = opts[:'for_projects'] if !opts[:'for_projects'].nil?
      query_params[:'icon'] = opts[:'icon'] if !opts[:'icon'].nil?
      query_params[:'labelId'] = opts[:'label_id'] if !opts[:'label_id'].nil?
      query_params[:'requiredAppExtensions'] = opts[:'required_app_extensions'] if !opts[:'required_app_extensions'].nil?
      query_params[:'requiredTestExtensions'] = opts[:'required_test_extensions'] if !opts[:'required_test_extensions'].nil?
      query_params[:'requiredTestFileTags'] = opts[:'required_test_file_tags'] if !opts[:'required_test_file_tags'].nil?
      query_params[:'retryable'] = opts[:'retryable'] if !opts[:'retryable'].nil?
      query_params[:'roleIds[]'] = @api_client.build_collection_param(opts[:'role_ids'], :multi) if !opts[:'role_ids'].nil?
      query_params[:'sampleAppId'] = opts[:'sample_app_id'] if !opts[:'sample_app_id'].nil?
      query_params[:'sampleTestId'] = opts[:'sample_test_id'] if !opts[:'sample_test_id'].nil?
      query_params[:'skipOlderSdk'] = opts[:'skip_older_sdk'] if !opts[:'skip_older_sdk'].nil?
      query_params[:'skipQueue'] = opts[:'skip_queue'] if !opts[:'skip_queue'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIFramework')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_framework_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create label group.
    # @param display_name displayName
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [APILabelGroup]
    def create_label_group_using_post(display_name, name, opts = {})
      data, _status_code, _headers = create_label_group_using_post_with_http_info(display_name, name, opts)
      data
    end

    # Create label group.
    # @param display_name displayName
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILabelGroup, Fixnum, Hash)>] APILabelGroup data, response status code and response headers
    def create_label_group_using_post_with_http_info(display_name, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_label_group_using_post ...'
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AdminApi.create_label_group_using_post"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.create_label_group_using_post"
      end
      # resource path
      local_var_path = '/api/v2/label-groups'

      # query parameters
      query_params = {}
      query_params[:'displayName'] = display_name
      query_params[:'name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APILabelGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_label_group_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add label to label group.
    # @param display_name displayName
    # @param group_id groupId
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceProperty]
    def create_label_using_post(display_name, group_id, name, opts = {})
      data, _status_code, _headers = create_label_using_post_with_http_info(display_name, group_id, name, opts)
      data
    end

    # Add label to label group.
    # @param display_name displayName
    # @param group_id groupId
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceProperty, Fixnum, Hash)>] APIDeviceProperty data, response status code and response headers
    def create_label_using_post_with_http_info(display_name, group_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_label_using_post ...'
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AdminApi.create_label_using_post"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdminApi.create_label_using_post"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.create_label_using_post"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}/labels'.sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'displayName'] = display_name
      query_params[:'name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_label_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create license.
    # @param unit unit
    # @param unit_count unitCount
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :android_device_limit androidDeviceLimit
    # @option opts [BOOLEAN] :android_enabled androidEnabled (default to false)
    # @option opts [Integer] :android_project_limit androidProjectLimit
    # @option opts [BOOLEAN] :build_enabled buildEnabled (default to false)
    # @option opts [Integer] :build_limit buildLimit
    # @option opts [Integer] :desktop_device_limit desktopDeviceLimit
    # @option opts [BOOLEAN] :desktop_enabled desktopEnabled (default to false)
    # @option opts [Integer] :desktop_project_limit desktopProjectLimit
    # @option opts [Integer] :global_device_limit globalDeviceLimit
    # @option opts [Integer] :global_project_limit globalProjectLimit
    # @option opts [BOOLEAN] :inspector_enabled inspectorEnabled (default to false)
    # @option opts [Integer] :ios_device_limit iosDeviceLimit
    # @option opts [BOOLEAN] :ios_enabled iosEnabled (default to false)
    # @option opts [Integer] :ios_project_limit iosProjectLimit
    # @option opts [BOOLEAN] :private_instance privateInstance (default to false)
    # @return [APILicense]
    def create_license_using_post(unit, unit_count, user_id, opts = {})
      data, _status_code, _headers = create_license_using_post_with_http_info(unit, unit_count, user_id, opts)
      data
    end

    # Create license.
    # @param unit unit
    # @param unit_count unitCount
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :android_device_limit androidDeviceLimit
    # @option opts [BOOLEAN] :android_enabled androidEnabled
    # @option opts [Integer] :android_project_limit androidProjectLimit
    # @option opts [BOOLEAN] :build_enabled buildEnabled
    # @option opts [Integer] :build_limit buildLimit
    # @option opts [Integer] :desktop_device_limit desktopDeviceLimit
    # @option opts [BOOLEAN] :desktop_enabled desktopEnabled
    # @option opts [Integer] :desktop_project_limit desktopProjectLimit
    # @option opts [Integer] :global_device_limit globalDeviceLimit
    # @option opts [Integer] :global_project_limit globalProjectLimit
    # @option opts [BOOLEAN] :inspector_enabled inspectorEnabled
    # @option opts [Integer] :ios_device_limit iosDeviceLimit
    # @option opts [BOOLEAN] :ios_enabled iosEnabled
    # @option opts [Integer] :ios_project_limit iosProjectLimit
    # @option opts [BOOLEAN] :private_instance privateInstance
    # @return [Array<(APILicense, Fixnum, Hash)>] APILicense data, response status code and response headers
    def create_license_using_post_with_http_info(unit, unit_count, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_license_using_post ...'
      end
      # verify the required parameter 'unit' is set
      if @api_client.config.client_side_validation && unit.nil?
        fail ArgumentError, "Missing the required parameter 'unit' when calling AdminApi.create_license_using_post"
      end
      # verify the required parameter 'unit_count' is set
      if @api_client.config.client_side_validation && unit_count.nil?
        fail ArgumentError, "Missing the required parameter 'unit_count' when calling AdminApi.create_license_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.create_license_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses'

      # query parameters
      query_params = {}
      query_params[:'unit'] = unit
      query_params[:'unitCount'] = unit_count
      query_params[:'userId'] = user_id
      query_params[:'androidDeviceLimit'] = opts[:'android_device_limit'] if !opts[:'android_device_limit'].nil?
      query_params[:'androidEnabled'] = opts[:'android_enabled'] if !opts[:'android_enabled'].nil?
      query_params[:'androidProjectLimit'] = opts[:'android_project_limit'] if !opts[:'android_project_limit'].nil?
      query_params[:'buildEnabled'] = opts[:'build_enabled'] if !opts[:'build_enabled'].nil?
      query_params[:'buildLimit'] = opts[:'build_limit'] if !opts[:'build_limit'].nil?
      query_params[:'desktopDeviceLimit'] = opts[:'desktop_device_limit'] if !opts[:'desktop_device_limit'].nil?
      query_params[:'desktopEnabled'] = opts[:'desktop_enabled'] if !opts[:'desktop_enabled'].nil?
      query_params[:'desktopProjectLimit'] = opts[:'desktop_project_limit'] if !opts[:'desktop_project_limit'].nil?
      query_params[:'globalDeviceLimit'] = opts[:'global_device_limit'] if !opts[:'global_device_limit'].nil?
      query_params[:'globalProjectLimit'] = opts[:'global_project_limit'] if !opts[:'global_project_limit'].nil?
      query_params[:'inspectorEnabled'] = opts[:'inspector_enabled'] if !opts[:'inspector_enabled'].nil?
      query_params[:'iosDeviceLimit'] = opts[:'ios_device_limit'] if !opts[:'ios_device_limit'].nil?
      query_params[:'iosEnabled'] = opts[:'ios_enabled'] if !opts[:'ios_enabled'].nil?
      query_params[:'iosProjectLimit'] = opts[:'ios_project_limit'] if !opts[:'ios_project_limit'].nil?
      query_params[:'privateInstance'] = opts[:'private_instance'] if !opts[:'private_instance'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APILicense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_license_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create notification plan.
    # @param channel channel
    # @param name name
    # @param notification_content notificationContent
    # @param notification_subject notificationSubject
    # @param scope scope
    # @param [Hash] opts the optional parameters
    # @return [APINotificationPlan]
    def create_notification_plan_using_post(channel, name, notification_content, notification_subject, scope, opts = {})
      data, _status_code, _headers = create_notification_plan_using_post_with_http_info(channel, name, notification_content, notification_subject, scope, opts)
      data
    end

    # Create notification plan.
    # @param channel channel
    # @param name name
    # @param notification_content notificationContent
    # @param notification_subject notificationSubject
    # @param scope scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(APINotificationPlan, Fixnum, Hash)>] APINotificationPlan data, response status code and response headers
    def create_notification_plan_using_post_with_http_info(channel, name, notification_content, notification_subject, scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_notification_plan_using_post ...'
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling AdminApi.create_notification_plan_using_post"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['SLACK', 'EMAIL', 'WEBHOOK'].include?(channel)
        fail ArgumentError, "invalid value for 'channel', must be one of SLACK, EMAIL, WEBHOOK"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.create_notification_plan_using_post"
      end
      # verify the required parameter 'notification_content' is set
      if @api_client.config.client_side_validation && notification_content.nil?
        fail ArgumentError, "Missing the required parameter 'notification_content' when calling AdminApi.create_notification_plan_using_post"
      end
      # verify the required parameter 'notification_subject' is set
      if @api_client.config.client_side_validation && notification_subject.nil?
        fail ArgumentError, "Missing the required parameter 'notification_subject' when calling AdminApi.create_notification_plan_using_post"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling AdminApi.create_notification_plan_using_post"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ALL', 'TEST_RUN', 'TEST_RUN_FAILURE', 'TEST_RUN_SUCCEEDED', 'MAINTENANCE', 'MAINTENANCE_RELEASE', 'CUSTOM', 'NEWS', 'SYSTEM', 'CHECK', 'PLAN_LIMIT_REACHED', 'PLAN_INVOICE'].include?(scope)
        fail ArgumentError, "invalid value for 'scope', must be one of ALL, TEST_RUN, TEST_RUN_FAILURE, TEST_RUN_SUCCEEDED, MAINTENANCE, MAINTENANCE_RELEASE, CUSTOM, NEWS, SYSTEM, CHECK, PLAN_LIMIT_REACHED, PLAN_INVOICE"
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans'

      # query parameters
      query_params = {}
      query_params[:'channel'] = channel
      query_params[:'name'] = name
      query_params[:'notificationContent'] = notification_content
      query_params[:'notificationSubject'] = notification_subject
      query_params[:'scope'] = scope

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APINotificationPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_notification_plan_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create property.
    # @param description description
    # @param name name
    # @param value value
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_time fromTime
    # @option opts [Integer] :to_time toTime
    # @return [APIProperty]
    def create_property_using_post(description, name, value, opts = {})
      data, _status_code, _headers = create_property_using_post_with_http_info(description, name, value, opts)
      data
    end

    # Create property.
    # @param description description
    # @param name name
    # @param value value
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_time fromTime
    # @option opts [Integer] :to_time toTime
    # @return [Array<(APIProperty, Fixnum, Hash)>] APIProperty data, response status code and response headers
    def create_property_using_post_with_http_info(description, name, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_property_using_post ...'
      end
      # verify the required parameter 'description' is set
      if @api_client.config.client_side_validation && description.nil?
        fail ArgumentError, "Missing the required parameter 'description' when calling AdminApi.create_property_using_post"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.create_property_using_post"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling AdminApi.create_property_using_post"
      end
      # resource path
      local_var_path = '/api/v2/properties'

      # query parameters
      query_params = {}
      query_params[:'description'] = description
      query_params[:'name'] = name
      query_params[:'value'] = value
      query_params[:'fromTime'] = opts[:'from_time'] if !opts[:'from_time'].nil?
      query_params[:'toTime'] = opts[:'to_time'] if !opts[:'to_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_property_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the service.
    # @param body body
    # @param [Hash] opts the optional parameters
    # @return [APIService]
    def create_service_using_post(body, opts = {})
      data, _status_code, _headers = create_service_using_post_with_http_info(body, opts)
      data
    end

    # Create or update the service.
    # @param body body
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIService, Fixnum, Hash)>] APIService data, response status code and response headers
    def create_service_using_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_service_using_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminApi.create_service_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_service_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create user.
    # @param email email
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def create_user_using_post(email, opts = {})
      data, _status_code, _headers = create_user_using_post_with_http_info(email, opts)
      data
    end

    # Create user.
    # @param email email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def create_user_using_post_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_user_using_post ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AdminApi.create_user_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/users'

      # query parameters
      query_params = {}
      query_params[:'email'] = email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_user_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create access group.
    # @param name name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope scope (default to USER)
    # @option opts [Integer] :user_id userId
    # @return [APIAccessGroup]
    def create_using_post(name, opts = {})
      data, _status_code, _headers = create_using_post_with_http_info(name, opts)
      data
    end

    # Create access group.
    # @param name name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope scope
    # @option opts [Integer] :user_id userId
    # @return [Array<(APIAccessGroup, Fixnum, Hash)>] APIAccessGroup data, response status code and response headers
    def create_using_post_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_using_post ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.create_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/access-groups'

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccessGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create build executor.
    # @param build_executor buildExecutor
    # @param [Hash] opts the optional parameters
    # @return [APIBuildExecutor]
    def create_using_post2(build_executor, opts = {})
      data, _status_code, _headers = create_using_post2_with_http_info(build_executor, opts)
      data
    end

    # Create build executor.
    # @param build_executor buildExecutor
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIBuildExecutor, Fixnum, Hash)>] APIBuildExecutor data, response status code and response headers
    def create_using_post2_with_http_info(build_executor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_using_post2 ...'
      end
      # verify the required parameter 'build_executor' is set
      if @api_client.config.client_side_validation && build_executor.nil?
        fail ArgumentError, "Missing the required parameter 'build_executor' when calling AdminApi.create_using_post2"
      end
      # resource path
      local_var_path = '/api/v2/admin/build-executors'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(build_executor)
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIBuildExecutor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_using_post2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create country vat rate.
    # @param country_code countryCode
    # @param vat_rate vatRate
    # @param [Hash] opts the optional parameters
    # @return [APICountryVatRate]
    def create_using_post3(country_code, vat_rate, opts = {})
      data, _status_code, _headers = create_using_post3_with_http_info(country_code, vat_rate, opts)
      data
    end

    # Create country vat rate.
    # @param country_code countryCode
    # @param vat_rate vatRate
    # @param [Hash] opts the optional parameters
    # @return [Array<(APICountryVatRate, Fixnum, Hash)>] APICountryVatRate data, response status code and response headers
    def create_using_post3_with_http_info(country_code, vat_rate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_using_post3 ...'
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling AdminApi.create_using_post3"
      end
      # verify the required parameter 'vat_rate' is set
      if @api_client.config.client_side_validation && vat_rate.nil?
        fail ArgumentError, "Missing the required parameter 'vat_rate' when calling AdminApi.create_using_post3"
      end
      # resource path
      local_var_path = '/api/v2/admin/country-vat-rates'

      # query parameters
      query_params = {}
      query_params[:'countryCode'] = country_code
      query_params[:'vatRate'] = vat_rate

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APICountryVatRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_using_post3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deactivate license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def deactivate_license_using_post(id, opts = {})
      data, _status_code, _headers = deactivate_license_using_post_with_http_info(id, opts)
      data
    end

    # Deactivate license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Fixnum, Hash)>] APILicense data, response status code and response headers
    def deactivate_license_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.deactivate_license_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.deactivate_license_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}/deactivate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APILicense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#deactivate_license_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deactivate account service.
    # @param account_service_id accountServiceId
    # @param [Hash] opts the optional parameters
    # @return [APIAccountService]
    def deactivate_user_service_using_post(account_service_id, opts = {})
      data, _status_code, _headers = deactivate_user_service_using_post_with_http_info(account_service_id, opts)
      data
    end

    # Deactivate account service.
    # @param account_service_id accountServiceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountService, Fixnum, Hash)>] APIAccountService data, response status code and response headers
    def deactivate_user_service_using_post_with_http_info(account_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.deactivate_user_service_using_post ...'
      end
      # verify the required parameter 'account_service_id' is set
      if @api_client.config.client_side_validation && account_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_service_id' when calling AdminApi.deactivate_user_service_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/account-services/{accountServiceId}/deactivate'.sub('{' + 'accountServiceId' + '}', account_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccountService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#deactivate_user_service_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete build.
    # @param build_id buildId
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_build_using_delete(build_id, job_id, opts = {})
      delete_build_using_delete_with_http_info(build_id, job_id, opts)
      nil
    end

    # Delete build.
    # @param build_id buildId
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_build_using_delete_with_http_info(build_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_build_using_delete ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling AdminApi.delete_build_using_delete"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AdminApi.delete_build_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/jobs/{jobId}/builds/{buildId}'.sub('{' + 'buildId' + '}', build_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_build_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete cluster.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cluster_using_delete(id, opts = {})
      delete_cluster_using_delete_with_http_info(id, opts)
      nil
    end

    # Delete cluster.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cluster_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_cluster_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_cluster_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/clusters/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_cluster_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device specific cleanup configuration.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_cleanup_configuration_using_delete(device_id, opts = {})
      delete_device_cleanup_configuration_using_delete_with_http_info(device_id, opts)
      nil
    end

    # Delete device specific cleanup configuration.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_device_cleanup_configuration_using_delete_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_device_cleanup_configuration_using_delete ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.delete_device_cleanup_configuration_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/cleanup-configuration'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_device_cleanup_configuration_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device from device group.
    # @param device_group_id deviceGroupId
    # @param device_model_id deviceModelId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_from_device_group_using_delete(device_group_id, device_model_id, opts = {})
      delete_device_from_device_group_using_delete_with_http_info(device_group_id, device_model_id, opts)
      nil
    end

    # Delete device from device group.
    # @param device_group_id deviceGroupId
    # @param device_model_id deviceModelId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_device_from_device_group_using_delete_with_http_info(device_group_id, device_model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_device_from_device_group_using_delete ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.delete_device_from_device_group_using_delete"
      end
      # verify the required parameter 'device_model_id' is set
      if @api_client.config.client_side_validation && device_model_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_model_id' when calling AdminApi.delete_device_from_device_group_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/devices/{deviceModelId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s).sub('{' + 'deviceModelId' + '}', device_model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_device_from_device_group_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_group_using_delete(device_group_id, opts = {})
      delete_device_group_using_delete_with_http_info(device_group_id, opts)
      nil
    end

    # Delete device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_device_group_using_delete_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_device_group_using_delete ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.delete_device_group_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_device_group_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete label from device.
    # @param device_id deviceId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_label_using_delete(device_id, label_id, opts = {})
      delete_device_label_using_delete_with_http_info(device_id, label_id, opts)
      nil
    end

    # Delete label from device.
    # @param device_id deviceId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_device_label_using_delete_with_http_info(device_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_device_label_using_delete ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.delete_device_label_using_delete"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AdminApi.delete_device_label_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/labels/{labelId}'.sub('{' + 'deviceId' + '}', device_id.to_s).sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_device_label_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device model criterion.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIMessage]
    def delete_device_model_criteria_using_delete(id, opts = {})
      data, _status_code, _headers = delete_device_model_criteria_using_delete_with_http_info(id, opts)
      data
    end

    # Delete device model criterion.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIMessage, Fixnum, Hash)>] APIMessage data, response status code and response headers
    def delete_device_model_criteria_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_device_model_criteria_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_device_model_criteria_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-model-criteria/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_device_model_criteria_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_using_delete(device_id, opts = {})
      delete_device_using_delete_with_http_info(device_id, opts)
      nil
    end

    # Delete device.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_device_using_delete_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_device_using_delete ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.delete_device_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_device_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete sample file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file_using_delete(file_id, opts = {})
      delete_file_using_delete_with_http_info(file_id, opts)
      nil
    end

    # Delete sample file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_file_using_delete_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_file_using_delete ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AdminApi.delete_file_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/samples/{fileId}'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_file_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file_using_delete1(file_id, opts = {})
      delete_file_using_delete1_with_http_info(file_id, opts)
      nil
    end

    # Delete file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_file_using_delete1_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_file_using_delete1 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AdminApi.delete_file_using_delete1"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_file_using_delete1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete framework.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_framework_using_delete(id, opts = {})
      delete_framework_using_delete_with_http_info(id, opts)
      nil
    end

    # Delete framework.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_framework_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_framework_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_framework_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_framework_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete job.
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_job_using_delete(job_id, opts = {})
      delete_job_using_delete_with_http_info(job_id, opts)
      nil
    end

    # Delete job.
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_job_using_delete_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_job_using_delete ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AdminApi.delete_job_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/jobs/{jobId}'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_job_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete label group.
    # @param group_id groupId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_label_group_using_delete(group_id, opts = {})
      delete_label_group_using_delete_with_http_info(group_id, opts)
      nil
    end

    # Delete label group.
    # @param group_id groupId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_label_group_using_delete_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_label_group_using_delete ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdminApi.delete_label_group_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}'.sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_label_group_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete label.
    # @param group_id groupId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_label_using_delete(group_id, label_id, opts = {})
      delete_label_using_delete_with_http_info(group_id, label_id, opts)
      nil
    end

    # Delete label.
    # @param group_id groupId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_label_using_delete_with_http_info(group_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_label_using_delete ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdminApi.delete_label_using_delete"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AdminApi.delete_label_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}/labels/{labelId}'.sub('{' + 'groupId' + '}', group_id.to_s).sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_label_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_license_using_delete(id, opts = {})
      delete_license_using_delete_with_http_info(id, opts)
      nil
    end

    # Delete license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_license_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_license_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_license_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_license_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_notification_plan_using_delete(id, opts = {})
      delete_notification_plan_using_delete_with_http_info(id, opts)
      nil
    end

    # Delete notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_notification_plan_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_notification_plan_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_notification_plan_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_notification_plan_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project_test_run_using_delete(project_id, run_id, opts = {})
      delete_project_test_run_using_delete_with_http_info(project_id, run_id, opts)
      nil
    end

    # Delete test run.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_project_test_run_using_delete_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_project_test_run_using_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.delete_project_test_run_using_delete"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.delete_project_test_run_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_project_test_run_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project_using_delete(project_id, opts = {})
      delete_project_using_delete_with_http_info(project_id, opts)
      nil
    end

    # Delete project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_project_using_delete_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_project_using_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.delete_project_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_project_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete property.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_property_using_delete(id, opts = {})
      delete_property_using_delete_with_http_info(id, opts)
      nil
    end

    # Delete property.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_property_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_property_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_property_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/properties/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_property_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group resource.
    # @param access_group_id accessGroupId
    # @param resource_id resourceId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource_using_delete(access_group_id, resource_id, opts = {})
      delete_resource_using_delete_with_http_info(access_group_id, resource_id, opts)
      nil
    end

    # Delete access group resource.
    # @param access_group_id accessGroupId
    # @param resource_id resourceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_resource_using_delete_with_http_info(access_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_resource_using_delete ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.delete_resource_using_delete"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling AdminApi.delete_resource_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_resource_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete account role.
    # @param account_role_id accountRoleId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_role_from_account_using_delete(account_role_id, user_id, opts = {})
      delete_role_from_account_using_delete_with_http_info(account_role_id, user_id, opts)
      nil
    end

    # Delete account role.
    # @param account_role_id accountRoleId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_from_account_using_delete_with_http_info(account_role_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_role_from_account_using_delete ...'
      end
      # verify the required parameter 'account_role_id' is set
      if @api_client.config.client_side_validation && account_role_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_role_id' when calling AdminApi.delete_role_from_account_using_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.delete_role_from_account_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account/roles/{accountRoleId}'.sub('{' + 'accountRoleId' + '}', account_role_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_role_from_account_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete screenshot from device session.
    # @param device_session_id deviceSessionId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_screenshot_from_inspector_device_session_using_delete(device_session_id, screenshot_id, opts = {})
      delete_screenshot_from_inspector_device_session_using_delete_with_http_info(device_session_id, screenshot_id, opts)
      nil
    end

    # Delete screenshot from device session.
    # @param device_session_id deviceSessionId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_screenshot_from_inspector_device_session_using_delete_with_http_info(device_session_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_screenshot_from_inspector_device_session_using_delete ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.delete_screenshot_from_inspector_device_session_using_delete"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AdminApi.delete_screenshot_from_inspector_device_session_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/screenshots/{screenshotId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_screenshot_from_inspector_device_session_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete selector from device group.
    # @param device_group_id deviceGroupId
    # @param selector_id selectorId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_selector_from_device_group_using_delete(device_group_id, selector_id, opts = {})
      delete_selector_from_device_group_using_delete_with_http_info(device_group_id, selector_id, opts)
      nil
    end

    # Delete selector from device group.
    # @param device_group_id deviceGroupId
    # @param selector_id selectorId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_selector_from_device_group_using_delete_with_http_info(device_group_id, selector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_selector_from_device_group_using_delete ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.delete_selector_from_device_group_using_delete"
      end
      # verify the required parameter 'selector_id' is set
      if @api_client.config.client_side_validation && selector_id.nil?
        fail ArgumentError, "Missing the required parameter 'selector_id' when calling AdminApi.delete_selector_from_device_group_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/selectors/{selectorId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s).sub('{' + 'selectorId' + '}', selector_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_selector_from_device_group_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run tag.
    # @param run_id runId
    # @param tag_id tagId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def delete_test_run_tag_using_delete(run_id, tag_id, opts = {})
      delete_test_run_tag_using_delete_with_http_info(run_id, tag_id, opts)
      nil
    end

    # Delete test run tag.
    # @param run_id runId
    # @param tag_id tagId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_test_run_tag_using_delete_with_http_info(run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_test_run_tag_using_delete ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.delete_test_run_tag_using_delete"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AdminApi.delete_test_run_tag_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/tags/{tagId}'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_test_run_tag_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run tag.
    # @param project_id projectId
    # @param run_id runId
    # @param tag_id tagId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_test_run_tag_with_project_using_delete(project_id, run_id, tag_id, opts = {})
      delete_test_run_tag_with_project_using_delete_with_http_info(project_id, run_id, tag_id, opts)
      nil
    end

    # Delete test run tag.
    # @param project_id projectId
    # @param run_id runId
    # @param tag_id tagId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_test_run_tag_with_project_using_delete_with_http_info(project_id, run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_test_run_tag_with_project_using_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.delete_test_run_tag_with_project_using_delete"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.delete_test_run_tag_with_project_using_delete"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AdminApi.delete_test_run_tag_with_project_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/tags/{tagId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_test_run_tag_with_project_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_test_run_using_delete(run_id, opts = {})
      delete_test_run_using_delete_with_http_info(run_id, opts)
      nil
    end

    # Delete test run.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_test_run_using_delete_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_test_run_using_delete ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.delete_test_run_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_test_run_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def delete_test_run_using_delete1(run_id, opts = {})
      delete_test_run_using_delete1_with_http_info(run_id, opts)
      nil
    end

    # Delete test run.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_test_run_using_delete1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_test_run_using_delete1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.delete_test_run_using_delete1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_test_run_using_delete1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete label from device.
    # @param device_id deviceId
    # @param property_id propertyId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_label_device_using_delete(device_id, property_id, opts = {})
      delete_user_label_device_using_delete_with_http_info(device_id, property_id, opts)
      nil
    end

    # Delete label from device.
    # @param device_id deviceId
    # @param property_id propertyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_label_device_using_delete_with_http_info(device_id, property_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_user_label_device_using_delete ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.delete_user_label_device_using_delete"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling AdminApi.delete_user_label_device_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/properties/{propertyId}'.sub('{' + 'deviceId' + '}', device_id.to_s).sub('{' + 'propertyId' + '}', property_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_user_label_device_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all user test runs.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_test_runs_using_delete(user_id, opts = {})
      delete_user_test_runs_using_delete_with_http_info(user_id, opts)
      nil
    end

    # Delete all user test runs.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_test_runs_using_delete_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_user_test_runs_using_delete ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.delete_user_test_runs_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/runs'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_user_test_runs_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group user.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_using_delete(access_group_id, user_id, opts = {})
      delete_user_using_delete_with_http_info(access_group_id, user_id, opts)
      nil
    end

    # Delete access group user.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_using_delete_with_http_info(access_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_user_using_delete ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.delete_user_using_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.delete_user_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/users/{userId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_user_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_using_delete(access_group_id, opts = {})
      delete_using_delete_with_http_info(access_group_id, opts)
      nil
    end

    # Delete access group.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_using_delete_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_using_delete ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.delete_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete build executor.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_using_delete2(id, opts = {})
      delete_using_delete2_with_http_info(id, opts)
      nil
    end

    # Delete build executor.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_using_delete2_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_using_delete2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_using_delete2"
      end
      # resource path
      local_var_path = '/api/v2/admin/build-executors/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_using_delete2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete country vat rate.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_using_delete3(id, opts = {})
      delete_using_delete3_with_http_info(id, opts)
      nil
    end

    # Delete country vat rate.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_using_delete3_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_using_delete3 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_using_delete3"
      end
      # resource path
      local_var_path = '/api/v2/admin/country-vat-rates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_using_delete3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disable user.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def disable_user_using_delete(user_id, opts = {})
      data, _status_code, _headers = disable_user_using_delete_with_http_info(user_id, opts)
      data
    end

    # Disable user.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def disable_user_using_delete_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.disable_user_using_delete ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.disable_user_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/disable'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#disable_user_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download icon of file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_icon_file_using_get(file_id, opts = {})
      download_icon_file_using_get_with_http_info(file_id, opts)
      nil
    end

    # Download icon of file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_icon_file_using_get_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.download_icon_file_using_get ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AdminApi.download_icon_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/icon'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#download_icon_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_license_using_get(id, opts = {})
      download_license_using_get_with_http_info(id, opts)
      nil
    end

    # Get license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_license_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.download_license_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.download_license_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}/download'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#download_license_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_output_files_zip_using_get(device_session_id, opts = {})
      download_output_files_zip_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_output_files_zip_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.download_output_files_zip_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.download_output_files_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#download_output_files_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_test_run_output_files_zip_using_get(device_session_id, project_id, run_id, opts = {})
      download_test_run_output_files_zip_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_test_run_output_files_zip_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.download_test_run_output_files_zip_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.download_test_run_output_files_zip_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.download_test_run_output_files_zip_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.download_test_run_output_files_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#download_test_run_output_files_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_test_run_output_files_zip_using_get1(device_session_id, run_id, opts = {})
      download_test_run_output_files_zip_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_test_run_output_files_zip_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.download_test_run_output_files_zip_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.download_test_run_output_files_zip_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.download_test_run_output_files_zip_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#download_test_run_output_files_zip_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :attachment attachment (default to true)
    # @return [nil]
    def download_user_file_using_get(file_id, opts = {})
      download_user_file_using_get_with_http_info(file_id, opts)
      nil
    end

    # Download file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :attachment attachment
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_user_file_using_get_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.download_user_file_using_get ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AdminApi.download_user_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/file'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'attachment'] = opts[:'attachment'] if !opts[:'attachment'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#download_user_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable user.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def enable_user_using_post(user_id, opts = {})
      data, _status_code, _headers = enable_user_using_post_with_http_info(user_id, opts)
      data
    end

    # Enable user.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def enable_user_using_post_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.enable_user_using_post ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.enable_user_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/enable'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#enable_user_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send notifications basing on notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APINotificationPlan]
    def execute_notification_plan_using_post(id, opts = {})
      data, _status_code, _headers = execute_notification_plan_using_post_with_http_info(id, opts)
      data
    end

    # Send notifications basing on notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APINotificationPlan, Fixnum, Hash)>] APINotificationPlan data, response status code and response headers
    def execute_notification_plan_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.execute_notification_plan_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.execute_notification_plan_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans/{id}/execute'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APINotificationPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#execute_notification_plan_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134479488&lt;br&gt;filter&#x3D;mainuserfirstname_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;mainuserlastname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;mainUserFirstName_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;mainUserLastName_a
    # @return [APIListOfAPIAccount]
    def get_account_list_using_get(opts = {})
      data, _status_code, _headers = get_account_list_using_get_with_http_info(opts)
      data
    end

    # Get accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134479488&lt;br&gt;filter&#x3D;mainuserfirstname_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;mainuserlastname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;mainUserFirstName_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;mainUserLastName_a
    # @return [Array<(APIListOfAPIAccount, Fixnum, Hash)>] APIListOfAPIAccount data, response status code and response headers
    def get_account_list_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_account_list_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/accounts'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_account_list_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account roles.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1576134479093&lt;br&gt;filter&#x3D;addedbyemail_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134479093&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;addedByEmail_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @return [APIListOfAPIRole]
    def get_account_roles_using_get(user_id, opts = {})
      data, _status_code, _headers = get_account_roles_using_get_with_http_info(user_id, opts)
      data
    end

    # Get account roles.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1576134479093&lt;br&gt;filter&#x3D;addedbyemail_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134479093&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;addedByEmail_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @return [Array<(APIListOfAPIRole, Fixnum, Hash)>] APIListOfAPIRole data, response status code and response headers
    def get_account_roles_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_account_roles_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.get_account_roles_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account/roles'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIRole')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_account_roles_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;chargetype_eq_usage&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1576134479387&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134479387&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a
    # @return [APIListOfAPIAccountService]
    def get_account_services_using_get(opts = {})
      data, _status_code, _headers = get_account_services_using_get_with_http_info(opts)
      data
    end

    # Get account services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;chargetype_eq_usage&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1576134479387&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134479387&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a
    # @return [Array<(APIListOfAPIAccountService, Fixnum, Hash)>] APIListOfAPIAccountService data, response status code and response headers
    def get_account_services_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_account_services_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/account-services'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAccountService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_account_services_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account.
    # @param account_id accountId
    # @param [Hash] opts the optional parameters
    # @return [APIAccount]
    def get_account_using_get1(account_id, opts = {})
      data, _status_code, _headers = get_account_using_get1_with_http_info(account_id, opts)
      data
    end

    # Get account.
    # @param account_id accountId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccount, Fixnum, Hash)>] APIAccount data, response status code and response headers
    def get_account_using_get1_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_account_using_get1 ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdminApi.get_account_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/admin/accounts/{accountId}'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_account_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get activities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134479584&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;useragent_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;httpmethod_eq_get&lt;br&gt;filter&#x3D;body_eq_value&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;uri_eq_value&lt;br&gt;filter&#x3D;parameters_eq_value&lt;br&gt;filter&#x3D;deprecatedresource_eq_null
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;userAgent_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;httpMethod_a&lt;br&gt;sort&#x3D;body_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;uri_a&lt;br&gt;sort&#x3D;parameters_a&lt;br&gt;sort&#x3D;deprecatedResource_a
    # @return [APIListOfAPIActivity]
    def get_activities_using_get(opts = {})
      data, _status_code, _headers = get_activities_using_get_with_http_info(opts)
      data
    end

    # Get activities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134479584&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;useragent_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;httpmethod_eq_get&lt;br&gt;filter&#x3D;body_eq_value&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;uri_eq_value&lt;br&gt;filter&#x3D;parameters_eq_value&lt;br&gt;filter&#x3D;deprecatedresource_eq_null
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;userAgent_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;httpMethod_a&lt;br&gt;sort&#x3D;body_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;uri_a&lt;br&gt;sort&#x3D;parameters_a&lt;br&gt;sort&#x3D;deprecatedResource_a
    # @return [Array<(APIListOfAPIActivity, Fixnum, Hash)>] APIListOfAPIActivity data, response status code and response headers
    def get_activities_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_activities_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/activities'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIActivity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_activities_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get market shares.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_android_version&lt;br&gt;filter&#x3D;value_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;value_a
    # @return [APIListOfAPIMarketShare]
    def get_activities_using_get1(opts = {})
      data, _status_code, _headers = get_activities_using_get1_with_http_info(opts)
      data
    end

    # Get market shares.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_android_version&lt;br&gt;filter&#x3D;value_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;value_a
    # @return [Array<(APIListOfAPIMarketShare, Fixnum, Hash)>] APIListOfAPIMarketShare data, response status code and response headers
    def get_activities_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_activities_using_get1 ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/market-shares'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIMarketShare')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_activities_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [APIAdminDevice]
    def get_admin_device_using_get(device_id, opts = {})
      data, _status_code, _headers = get_admin_device_using_get_with_http_info(device_id, opts)
      data
    end

    # Get device.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminDevice, Fixnum, Hash)>] APIAdminDevice data, response status code and response headers
    def get_admin_device_using_get_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_admin_device_using_get ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.get_admin_device_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_admin_device_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days days (default to 30)
    # @return [APIAdminDeviceSessionStatistics]
    def get_admin_test_runs_using_get(opts = {})
      data, _status_code, _headers = get_admin_test_runs_using_get_with_http_info(opts)
      data
    end

    # Get device session statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days days
    # @return [Array<(APIAdminDeviceSessionStatistics, Fixnum, Hash)>] APIAdminDeviceSessionStatistics data, response status code and response headers
    def get_admin_test_runs_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_admin_test_runs_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/statistics/device-sessions'

      # query parameters
      query_params = {}
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminDeviceSessionStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_admin_test_runs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134482595&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134482595&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPIAdminTestRun]
    def get_admin_test_runs_using_get1(opts = {})
      data, _status_code, _headers = get_admin_test_runs_using_get1_with_http_info(opts)
      data
    end

    # Get test runs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134482595&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134482595&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPIAdminTestRun, Fixnum, Hash)>] APIListOfAPIAdminTestRun data, response status code and response headers
    def get_admin_test_runs_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_admin_test_runs_using_get1 ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/runs'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminTestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_admin_test_runs_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get billing periods.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;additionalhoursprice_eq_1&lt;br&gt;filter&#x3D;mail_eq_value&lt;br&gt;filter&#x3D;totalprice_eq_1&lt;br&gt;filter&#x3D;startbillingperiod_eq_1576134479784&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;_endbillingperiod_eq_1576134479784&lt;br&gt;filter&#x3D;subscriptionend_eq_1576134479784&lt;br&gt;filter&#x3D;serviceprice_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134479784&lt;br&gt;filter&#x3D;subscriptionstart_eq_1576134479784&lt;br&gt;filter&#x3D;paid_eq_true&lt;br&gt;filter&#x3D;lastpaymentdate_eq_1576134479784&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;additionalhours_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;plan_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;additionalHoursPrice_a&lt;br&gt;sort&#x3D;mail_a&lt;br&gt;sort&#x3D;totalPrice_a&lt;br&gt;sort&#x3D;startBillingPeriod_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;_endBillingPeriod_a&lt;br&gt;sort&#x3D;subscriptionEnd_a&lt;br&gt;sort&#x3D;servicePrice_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;subscriptionStart_a&lt;br&gt;sort&#x3D;lastPaymentDate_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;additionalHours_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;paymentDate_a&lt;br&gt;sort&#x3D;additionalHoursPaymentDate_a&lt;br&gt;sort&#x3D;plan_a
    # @return [APIListOfAPIBillingPeriod]
    def get_all_billing_periods_using_get(opts = {})
      data, _status_code, _headers = get_all_billing_periods_using_get_with_http_info(opts)
      data
    end

    # Get billing periods.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;additionalhoursprice_eq_1&lt;br&gt;filter&#x3D;mail_eq_value&lt;br&gt;filter&#x3D;totalprice_eq_1&lt;br&gt;filter&#x3D;startbillingperiod_eq_1576134479784&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;_endbillingperiod_eq_1576134479784&lt;br&gt;filter&#x3D;subscriptionend_eq_1576134479784&lt;br&gt;filter&#x3D;serviceprice_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134479784&lt;br&gt;filter&#x3D;subscriptionstart_eq_1576134479784&lt;br&gt;filter&#x3D;paid_eq_true&lt;br&gt;filter&#x3D;lastpaymentdate_eq_1576134479784&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;additionalhours_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;plan_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;additionalHoursPrice_a&lt;br&gt;sort&#x3D;mail_a&lt;br&gt;sort&#x3D;totalPrice_a&lt;br&gt;sort&#x3D;startBillingPeriod_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;_endBillingPeriod_a&lt;br&gt;sort&#x3D;subscriptionEnd_a&lt;br&gt;sort&#x3D;servicePrice_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;subscriptionStart_a&lt;br&gt;sort&#x3D;lastPaymentDate_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;additionalHours_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;paymentDate_a&lt;br&gt;sort&#x3D;additionalHoursPaymentDate_a&lt;br&gt;sort&#x3D;plan_a
    # @return [Array<(APIListOfAPIBillingPeriod, Fixnum, Hash)>] APIListOfAPIBillingPeriod data, response status code and response headers
    def get_all_billing_periods_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_all_billing_periods_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/billing-periods'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIBillingPeriod')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_all_billing_periods_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get builds.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482784&lt;br&gt;filter&#x3D;pipelinejobid_eq_1&lt;br&gt;filter&#x3D;state_eq_created&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;buildnumber_eq_1&lt;br&gt;filter&#x3D;status_eq_undefined
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;pipelineJobId_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;buildNumber_a&lt;br&gt;sort&#x3D;status_a
    # @return [APIListOfAPIPipelineBuild]
    def get_all_builds_using_get(opts = {})
      data, _status_code, _headers = get_all_builds_using_get_with_http_info(opts)
      data
    end

    # Get builds.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482784&lt;br&gt;filter&#x3D;pipelinejobid_eq_1&lt;br&gt;filter&#x3D;state_eq_created&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;buildnumber_eq_1&lt;br&gt;filter&#x3D;status_eq_undefined
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;pipelineJobId_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;buildNumber_a&lt;br&gt;sort&#x3D;status_a
    # @return [Array<(APIListOfAPIPipelineBuild, Fixnum, Hash)>] APIListOfAPIPipelineBuild data, response status code and response headers
    def get_all_builds_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_all_builds_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/builds'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_all_builds_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps of all device sessions in run.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIDeviceSessionStep]
    def get_all_test_run_device_session_steps_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_all_test_run_device_session_steps_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # Get device session steps of all device sessions in run.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIDeviceSessionStep, Fixnum, Hash)>] APIListOfAPIDeviceSessionStep data, response status code and response headers
    def get_all_test_run_device_session_steps_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_all_test_run_device_session_steps_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_all_test_run_device_session_steps_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_all_test_run_device_session_steps_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/steps'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_all_test_run_device_session_steps_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps of all device sessions in run.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIDeviceSessionStep]
    def get_all_test_run_device_session_steps_using_get1(run_id, opts = {})
      data, _status_code, _headers = get_all_test_run_device_session_steps_using_get1_with_http_info(run_id, opts)
      data
    end

    # Get device session steps of all device sessions in run.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIDeviceSessionStep, Fixnum, Hash)>] APIListOfAPIDeviceSessionStep data, response status code and response headers
    def get_all_test_run_device_session_steps_using_get1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_all_test_run_device_session_steps_using_get1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_all_test_run_device_session_steps_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/steps'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_all_test_run_device_session_steps_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get build executors.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;label.id_eq_1&lt;br&gt;filter&#x3D;createtime_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_build&lt;br&gt;filter&#x3D;label.name_eq_value&lt;br&gt;filter&#x3D;enabled_eq_null&lt;br&gt;filter&#x3D;label.displayname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;label.id_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;label.name_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;label.displayName_a
    # @return [APIListOfAPIBuildExecutor]
    def get_all_using_get(opts = {})
      data, _status_code, _headers = get_all_using_get_with_http_info(opts)
      data
    end

    # Get build executors.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;label.id_eq_1&lt;br&gt;filter&#x3D;createtime_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_build&lt;br&gt;filter&#x3D;label.name_eq_value&lt;br&gt;filter&#x3D;enabled_eq_null&lt;br&gt;filter&#x3D;label.displayname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;label.id_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;label.name_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;label.displayName_a
    # @return [Array<(APIListOfAPIBuildExecutor, Fixnum, Hash)>] APIListOfAPIBuildExecutor data, response status code and response headers
    def get_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_all_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/build-executors'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIBuildExecutor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get property.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIProperty]
    def get_api_property_using_get(id, opts = {})
      data, _status_code, _headers = get_api_property_using_get_with_http_info(id, opts)
      data
    end

    # Get property.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProperty, Fixnum, Hash)>] APIProperty data, response status code and response headers
    def get_api_property_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_api_property_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_api_property_using_get"
      end
      # resource path
      local_var_path = '/api/v2/properties/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_api_property_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get property of banned application.
    # @param test_run_id testRunId
    # @param [Hash] opts the optional parameters
    # @return [APIProperty]
    def get_ban_application_using_get(test_run_id, opts = {})
      data, _status_code, _headers = get_ban_application_using_get_with_http_info(test_run_id, opts)
      data
    end

    # Get property of banned application.
    # @param test_run_id testRunId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProperty, Fixnum, Hash)>] APIProperty data, response status code and response headers
    def get_ban_application_using_get_with_http_info(test_run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_ban_application_using_get ...'
      end
      # verify the required parameter 'test_run_id' is set
      if @api_client.config.client_side_validation && test_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'test_run_id' when calling AdminApi.get_ban_application_using_get"
      end
      # resource path
      local_var_path = '/api/v2/properties/app-bans'

      # query parameters
      query_params = {}
      query_params[:'testRunId'] = test_run_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_ban_application_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get build.
    # @param build_id buildId
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [APIPipelineBuild]
    def get_build_using_get(build_id, job_id, opts = {})
      data, _status_code, _headers = get_build_using_get_with_http_info(build_id, job_id, opts)
      data
    end

    # Get build.
    # @param build_id buildId
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPipelineBuild, Fixnum, Hash)>] APIPipelineBuild data, response status code and response headers
    def get_build_using_get_with_http_info(build_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_build_using_get ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling AdminApi.get_build_using_get"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AdminApi.get_build_using_get"
      end
      # resource path
      local_var_path = '/api/v2/jobs/{jobId}/builds/{buildId}'.sub('{' + 'buildId' + '}', build_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_build_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get builds.
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482787&lt;br&gt;filter&#x3D;pipelinejobid_eq_1&lt;br&gt;filter&#x3D;state_eq_created&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;buildnumber_eq_1&lt;br&gt;filter&#x3D;status_eq_undefined
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;pipelineJobId_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;buildNumber_a&lt;br&gt;sort&#x3D;status_a
    # @return [APIListOfAPIPipelineBuild]
    def get_builds_using_get(job_id, opts = {})
      data, _status_code, _headers = get_builds_using_get_with_http_info(job_id, opts)
      data
    end

    # Get builds.
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482787&lt;br&gt;filter&#x3D;pipelinejobid_eq_1&lt;br&gt;filter&#x3D;state_eq_created&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;buildnumber_eq_1&lt;br&gt;filter&#x3D;status_eq_undefined
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;pipelineJobId_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;buildNumber_a&lt;br&gt;sort&#x3D;status_a
    # @return [Array<(APIListOfAPIPipelineBuild, Fixnum, Hash)>] APIListOfAPIPipelineBuild data, response status code and response headers
    def get_builds_using_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_builds_using_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AdminApi.get_builds_using_get"
      end
      # resource path
      local_var_path = '/api/v2/jobs/{jobId}/builds'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_builds_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification channels.
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIEnum]
    def get_channels_using_get(opts = {})
      data, _status_code, _headers = get_channels_using_get_with_http_info(opts)
      data
    end

    # Get notification channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIEnum, Fixnum, Hash)>] APIListOfAPIEnum data, response status code and response headers
    def get_channels_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_channels_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans/channels'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIEnum')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_channels_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get cluster.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_devices withDevices
    # @return [APICluster]
    def get_cluster_by_id_using_get(id, opts = {})
      data, _status_code, _headers = get_cluster_by_id_using_get_with_http_info(id, opts)
      data
    end

    # Get cluster.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_devices withDevices
    # @return [Array<(APICluster, Fixnum, Hash)>] APICluster data, response status code and response headers
    def get_cluster_by_id_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_cluster_by_id_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_cluster_by_id_using_get"
      end
      # resource path
      local_var_path = '/api/v2/clusters/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'withDevices'] = opts[:'with_devices'] if !opts[:'with_devices'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APICluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_cluster_by_id_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get cluster devices.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1576134480289&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @return [APIListOfAPIAdminDevice]
    def get_cluster_devices_using_get(id, opts = {})
      data, _status_code, _headers = get_cluster_devices_using_get_with_http_info(id, opts)
      data
    end

    # Get cluster devices.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1576134480289&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @return [Array<(APIListOfAPIAdminDevice, Fixnum, Hash)>] APIListOfAPIAdminDevice data, response status code and response headers
    def get_cluster_devices_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_cluster_devices_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_cluster_devices_using_get"
      end
      # resource path
      local_var_path = '/api/v2/clusters/{id}/devices'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_cluster_devices_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_cluster_logs_using_get(device_session_id, opts = {})
      get_cluster_logs_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_cluster_logs_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_cluster_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_cluster_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/cluster-logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_cluster_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_cluster_logs_using_get1(device_session_id, run_id, opts = {})
      get_cluster_logs_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_cluster_logs_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_cluster_logs_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_cluster_logs_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_cluster_logs_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/cluster-logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_cluster_logs_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1576134480390&lt;br&gt;filter&#x3D;pluginversion_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1576134480390&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;state_eq_offline&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;url_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;pluginVersion_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;url_a&lt;br&gt;sort&#x3D;enabled_a
    # @return [APIListOfAPICluster]
    def get_clusters_using_get(opts = {})
      data, _status_code, _headers = get_clusters_using_get_with_http_info(opts)
      data
    end

    # Get clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1576134480390&lt;br&gt;filter&#x3D;pluginversion_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1576134480390&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;state_eq_offline&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;url_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;pluginVersion_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;url_a&lt;br&gt;sort&#x3D;enabled_a
    # @return [Array<(APIListOfAPICluster, Fixnum, Hash)>] APIListOfAPICluster data, response status code and response headers
    def get_clusters_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_clusters_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/clusters'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPICluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_clusters_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device model criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;id_a
    # @return [APIListOfAPIDeviceModelCriterion]
    def get_criteria_using_get(opts = {})
      data, _status_code, _headers = get_criteria_using_get_with_http_info(opts)
      data
    end

    # Get device model criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;id_a
    # @return [Array<(APIListOfAPIDeviceModelCriterion, Fixnum, Hash)>] APIListOfAPIDeviceModelCriterion data, response status code and response headers
    def get_criteria_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_criteria_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-model-criteria'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceModelCriterion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_criteria_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current device session step.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_current_device_session_step_using_get(device_session_id, opts = {})
      data, _status_code, _headers = get_current_device_session_step_using_get_with_http_info(device_session_id, opts)
      data
    end

    # Get current device session step.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Fixnum, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_current_device_session_step_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_current_device_session_step_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_current_device_session_step_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/steps/current'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_current_device_session_step_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current device session step.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_current_device_session_step_using_get1(device_session_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_current_device_session_step_using_get1_with_http_info(device_session_id, project_id, run_id, opts)
      data
    end

    # Get current device session step.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Fixnum, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_current_device_session_step_using_get1_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_current_device_session_step_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_current_device_session_step_using_get1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_current_device_session_step_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_current_device_session_step_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps/current'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_current_device_session_step_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current device session step.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_current_device_session_step_using_get2(device_session_id, run_id, opts = {})
      data, _status_code, _headers = get_current_device_session_step_using_get2_with_http_info(device_session_id, run_id, opts)
      data
    end

    # Get current device session step.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Fixnum, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_current_device_session_step_using_get2_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_current_device_session_step_using_get2 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_current_device_session_step_using_get2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_current_device_session_step_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/steps/current'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_current_device_session_step_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device cleanup configuration.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceCleanupConfiguration]
    def get_device_cleanup_configuration_using_get(id, opts = {})
      data, _status_code, _headers = get_device_cleanup_configuration_using_get_with_http_info(id, opts)
      data
    end

    # Get device cleanup configuration.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceCleanupConfiguration, Fixnum, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def get_device_cleanup_configuration_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_cleanup_configuration_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_device_cleanup_configuration_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceCleanupConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_cleanup_configuration_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device specific cleanup configuration.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceCleanupConfiguration]
    def get_device_cleanup_configuration_using_get1(device_id, opts = {})
      data, _status_code, _headers = get_device_cleanup_configuration_using_get1_with_http_info(device_id, opts)
      data
    end

    # Get device specific cleanup configuration.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceCleanupConfiguration, Fixnum, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def get_device_cleanup_configuration_using_get1_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_cleanup_configuration_using_get1 ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.get_device_cleanup_configuration_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/cleanup-configuration'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceCleanupConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_cleanup_configuration_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device cleanup configurations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createdbyemail_eq_value&lt;br&gt;filter&#x3D;lastmodificationtime_eq_1576134480885&lt;br&gt;filter&#x3D;createtime_eq_1576134480885&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;global_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;createdbyid_eq_1&lt;br&gt;filter&#x3D;content_eq_value&lt;br&gt;filter&#x3D;discriminator_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createdByEmail_a&lt;br&gt;sort&#x3D;lastModificationTime_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;global_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;createdById_a&lt;br&gt;sort&#x3D;content_a&lt;br&gt;sort&#x3D;discriminator_a
    # @return [APIListOfAPIDeviceCleanupConfiguration]
    def get_device_cleanup_configurations_using_get(opts = {})
      data, _status_code, _headers = get_device_cleanup_configurations_using_get_with_http_info(opts)
      data
    end

    # Get device cleanup configurations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createdbyemail_eq_value&lt;br&gt;filter&#x3D;lastmodificationtime_eq_1576134480885&lt;br&gt;filter&#x3D;createtime_eq_1576134480885&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;global_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;createdbyid_eq_1&lt;br&gt;filter&#x3D;content_eq_value&lt;br&gt;filter&#x3D;discriminator_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createdByEmail_a&lt;br&gt;sort&#x3D;lastModificationTime_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;global_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;createdById_a&lt;br&gt;sort&#x3D;content_a&lt;br&gt;sort&#x3D;discriminator_a
    # @return [Array<(APIListOfAPIDeviceCleanupConfiguration, Fixnum, Hash)>] APIListOfAPIDeviceCleanupConfiguration data, response status code and response headers
    def get_device_cleanup_configurations_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_cleanup_configurations_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceCleanupConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_cleanup_configurations_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group devices.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;device.archivetime_eq_1576134482901&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a
    # @option opts [BOOLEAN] :with_properties withProperties (default to false)
    # @return [APIListOfAPIDevice]
    def get_device_group_devices_using_get(device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_devices_using_get_with_http_info(device_group_id, opts)
      data
    end

    # Get device group devices.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;device.archivetime_eq_1576134482901&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a
    # @option opts [BOOLEAN] :with_properties withProperties
    # @return [Array<(APIListOfAPIDevice, Fixnum, Hash)>] APIListOfAPIDevice data, response status code and response headers
    def get_device_group_devices_using_get_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_group_devices_using_get ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.get_device_group_devices_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/devices'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'withProperties'] = opts[:'with_properties'] if !opts[:'with_properties'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_group_devices_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group selectors.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @return [APIListOfAPIDeviceProperty]
    def get_device_group_selectors_using_get(device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_selectors_using_get_with_http_info(device_group_id, opts)
      data
    end

    # Get device group selectors.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @return [Array<(APIListOfAPIDeviceProperty, Fixnum, Hash)>] APIListOfAPIDeviceProperty data, response status code and response headers
    def get_device_group_selectors_using_get_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_group_selectors_using_get ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.get_device_group_selectors_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/selectors'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_group_selectors_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceGroup]
    def get_device_group_using_get(device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_using_get_with_http_info(device_group_id, opts)
      data
    end

    # Get device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceGroup, Fixnum, Hash)>] APIDeviceGroup data, response status code and response headers
    def get_device_group_using_get_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_group_using_get ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.get_device_group_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_group_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @return [APIListOfAPIDeviceGroup]
    def get_device_groups_using_get(opts = {})
      data, _status_code, _headers = get_device_groups_using_get_with_http_info(opts)
      data
    end

    # Get device groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @return [Array<(APIListOfAPIDeviceGroup, Fixnum, Hash)>] APIListOfAPIDeviceGroup data, response status code and response headers
    def get_device_groups_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_groups_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/device-groups'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_groups_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device labels.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @return [APIListOfAPIDeviceProperty]
    def get_device_labels_using_get(device_id, opts = {})
      data, _status_code, _headers = get_device_labels_using_get_with_http_info(device_id, opts)
      data
    end

    # Get device labels.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @return [Array<(APIListOfAPIDeviceProperty, Fixnum, Hash)>] APIListOfAPIDeviceProperty data, response status code and response headers
    def get_device_labels_using_get_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_labels_using_get ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.get_device_labels_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/labels'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_labels_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device models.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;total_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;online_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;total_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;online_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @return [APIListOfAPIAdminDeviceModel]
    def get_device_models_using_get(opts = {})
      data, _status_code, _headers = get_device_models_using_get_with_http_info(opts)
      data
    end

    # Get device models.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;total_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;online_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;total_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;online_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @return [Array<(APIListOfAPIAdminDeviceModel, Fixnum, Hash)>] APIListOfAPIAdminDeviceModel data, response status code and response headers
    def get_device_models_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_models_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-models'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminDeviceModel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_models_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device problems.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;clustername_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;clusterid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;deviceid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;clusterName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;clusterId_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;deviceId_a
    # @return [APIListOfAPIAdminDeviceProblem]
    def get_device_problems_using_get(opts = {})
      data, _status_code, _headers = get_device_problems_using_get_with_http_info(opts)
      data
    end

    # Get device problems.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;clustername_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;clusterid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;deviceid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;clusterName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;clusterId_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;deviceId_a
    # @return [Array<(APIListOfAPIAdminDeviceProblem, Fixnum, Hash)>] APIListOfAPIAdminDeviceProblem data, response status code and response headers
    def get_device_problems_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_problems_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-problems'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminDeviceProblem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_problems_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device properties.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @return [APIListOfAPIDeviceProperty]
    def get_device_properties_using_get(device_id, opts = {})
      data, _status_code, _headers = get_device_properties_using_get_with_http_info(device_id, opts)
      data
    end

    # Get device properties.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @return [Array<(APIListOfAPIDeviceProperty, Fixnum, Hash)>] APIListOfAPIDeviceProperty data, response status code and response headers
    def get_device_properties_using_get_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_properties_using_get ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.get_device_properties_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/properties'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_properties_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device queue.
    # Ignores sort value. Sorts by order in queue.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134481497&lt;br&gt;filter&#x3D;createtime_eq_1576134481497&lt;br&gt;filter&#x3D;startedbydisplayname_eq_value&lt;br&gt;filter&#x3D;devicemodel.id_eq_1&lt;br&gt;filter&#x3D;currentsteptype_eq_waiting&lt;br&gt;filter&#x3D;starttime_eq_1576134481497&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481497&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;priority_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startedByDisplayName_a&lt;br&gt;sort&#x3D;deviceModel.id_a&lt;br&gt;sort&#x3D;currentStepType_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;priority_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;testRunName_a
    # @return [APIListOfAPIAdminDeviceSession]
    def get_device_queue_using_get(device_id, opts = {})
      data, _status_code, _headers = get_device_queue_using_get_with_http_info(device_id, opts)
      data
    end

    # Get device queue.
    # Ignores sort value. Sorts by order in queue.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134481497&lt;br&gt;filter&#x3D;createtime_eq_1576134481497&lt;br&gt;filter&#x3D;startedbydisplayname_eq_value&lt;br&gt;filter&#x3D;devicemodel.id_eq_1&lt;br&gt;filter&#x3D;currentsteptype_eq_waiting&lt;br&gt;filter&#x3D;starttime_eq_1576134481497&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481497&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;priority_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startedByDisplayName_a&lt;br&gt;sort&#x3D;deviceModel.id_a&lt;br&gt;sort&#x3D;currentStepType_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;priority_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;testRunName_a
    # @return [Array<(APIListOfAPIAdminDeviceSession, Fixnum, Hash)>] APIListOfAPIAdminDeviceSession data, response status code and response headers
    def get_device_queue_using_get_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_queue_using_get ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.get_device_queue_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/queue'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_queue_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_device_session_data_zip_using_get(device_session_id, opts = {})
      get_device_session_data_zip_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_data_zip_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_data_zip_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_data_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/result-data.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_data_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_device_session_data_zip_using_get1(device_session_id, run_id, opts = {})
      get_device_session_data_zip_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_data_zip_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_data_zip_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_data_zip_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_data_zip_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/result-data.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_data_zip_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134481586&lt;br&gt;filter&#x3D;createtime_eq_1576134481587&lt;br&gt;filter&#x3D;startedbydisplayname_eq_value&lt;br&gt;filter&#x3D;devicemodel.id_eq_1&lt;br&gt;filter&#x3D;currentsteptype_eq_waiting&lt;br&gt;filter&#x3D;starttime_eq_1576134481587&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481587&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;priority_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startedByDisplayName_a&lt;br&gt;sort&#x3D;deviceModel.id_a&lt;br&gt;sort&#x3D;currentStepType_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;priority_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;testRunName_a
    # @return [APIListOfAPIAdminDeviceSession]
    def get_device_session_history_using_get(opts = {})
      data, _status_code, _headers = get_device_session_history_using_get_with_http_info(opts)
      data
    end

    # Get device sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134481586&lt;br&gt;filter&#x3D;createtime_eq_1576134481587&lt;br&gt;filter&#x3D;startedbydisplayname_eq_value&lt;br&gt;filter&#x3D;devicemodel.id_eq_1&lt;br&gt;filter&#x3D;currentsteptype_eq_waiting&lt;br&gt;filter&#x3D;starttime_eq_1576134481587&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481587&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;priority_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startedByDisplayName_a&lt;br&gt;sort&#x3D;deviceModel.id_a&lt;br&gt;sort&#x3D;currentStepType_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;priority_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;testRunName_a
    # @return [Array<(APIListOfAPIAdminDeviceSession, Fixnum, Hash)>] APIListOfAPIAdminDeviceSession data, response status code and response headers
    def get_device_session_history_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_history_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-sessions'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_history_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_device_session_junit_using_get(device_session_id, opts = {})
      get_device_session_junit_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_junit_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_junit_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_junit_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/junit.xml'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_junit_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_device_session_junit_using_get1(device_session_id, run_id, opts = {})
      get_device_session_junit_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_junit_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_junit_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_junit_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_junit_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/junit.xml'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_junit_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_device_session_logs_using_get(device_session_id, opts = {})
      get_device_session_logs_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_logs_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_device_session_logs_using_get1(device_session_id, run_id, opts = {})
      get_device_session_logs_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_logs_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_logs_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_logs_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_logs_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_logs_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_device_session_performance_using_get(device_session_id, opts = {})
      get_device_session_performance_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_performance_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_performance_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_performance_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/performance'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_device_session_performance_using_get1(device_session_id, run_id, opts = {})
      get_device_session_performance_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_performance_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_performance_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_performance_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_performance_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/performance'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_performance_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :height height
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @option opts [Integer] :width width
    # @return [nil]
    def get_device_session_screenshot_using_get(device_session_id, screenshot_id, opts = {})
      get_device_session_screenshot_using_get_with_http_info(device_session_id, screenshot_id, opts)
      nil
    end

    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :height height
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @option opts [Integer] :width width
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_screenshot_using_get_with_http_info(device_session_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_screenshot_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_screenshot_using_get"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AdminApi.get_device_session_screenshot_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/screenshots/{screenshotId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_screenshot_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :height height
    # @option opts [Integer] :width width
    # @return [nil]
    def get_device_session_screenshot_using_get1(device_session_id, run_id, screenshot_id, opts = {})
      get_device_session_screenshot_using_get1_with_http_info(device_session_id, run_id, screenshot_id, opts)
      nil
    end

    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :height height
    # @option opts [Integer] :width width
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_screenshot_using_get1_with_http_info(device_session_id, run_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_screenshot_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_screenshot_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_screenshot_using_get1"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AdminApi.get_device_session_screenshot_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/screenshots/{screenshotId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_screenshot_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshots.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [Integer] :test_run_id testRunId
    # @return [APIListOfAPIScreenshot]
    def get_device_session_screenshots_using_get(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_screenshots_using_get_with_http_info(device_session_id, opts)
      data
    end

    # Get device session screenshots.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(APIListOfAPIScreenshot, Fixnum, Hash)>] APIListOfAPIScreenshot data, response status code and response headers
    def get_device_session_screenshots_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_screenshots_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_screenshots_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/screenshots'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_screenshots_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshots.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIScreenshot]
    def get_device_session_screenshots_using_get1(device_session_id, run_id, opts = {})
      data, _status_code, _headers = get_device_session_screenshots_using_get1_with_http_info(device_session_id, run_id, opts)
      data
    end

    # Get device session screenshots.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIScreenshot, Fixnum, Hash)>] APIListOfAPIScreenshot data, response status code and response headers
    def get_device_session_screenshots_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_screenshots_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_screenshots_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_screenshots_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/screenshots'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_screenshots_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session step.
    # @param device_session_id deviceSessionId
    # @param device_session_step_id deviceSessionStepId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_device_session_step_using_get(device_session_id, device_session_step_id, opts = {})
      data, _status_code, _headers = get_device_session_step_using_get_with_http_info(device_session_id, device_session_step_id, opts)
      data
    end

    # Get device session step.
    # @param device_session_id deviceSessionId
    # @param device_session_step_id deviceSessionStepId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Fixnum, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_device_session_step_using_get_with_http_info(device_session_id, device_session_step_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_step_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_step_using_get"
      end
      # verify the required parameter 'device_session_step_id' is set
      if @api_client.config.client_side_validation && device_session_step_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_step_id' when calling AdminApi.get_device_session_step_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/steps/{deviceSessionStepId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'deviceSessionStepId' + '}', device_session_step_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_step_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session step.
    # @param device_session_id deviceSessionId
    # @param device_session_step_id deviceSessionStepId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_device_session_step_using_get1(device_session_id, device_session_step_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_device_session_step_using_get1_with_http_info(device_session_id, device_session_step_id, project_id, run_id, opts)
      data
    end

    # Get device session step.
    # @param device_session_id deviceSessionId
    # @param device_session_step_id deviceSessionStepId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Fixnum, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_device_session_step_using_get1_with_http_info(device_session_id, device_session_step_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_step_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_step_using_get1"
      end
      # verify the required parameter 'device_session_step_id' is set
      if @api_client.config.client_side_validation && device_session_step_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_step_id' when calling AdminApi.get_device_session_step_using_get1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_device_session_step_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_step_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps/{deviceSessionStepId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'deviceSessionStepId' + '}', device_session_step_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_step_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session step.
    # @param device_session_id deviceSessionId
    # @param device_session_step_id deviceSessionStepId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_device_session_step_using_get2(device_session_id, device_session_step_id, run_id, opts = {})
      data, _status_code, _headers = get_device_session_step_using_get2_with_http_info(device_session_id, device_session_step_id, run_id, opts)
      data
    end

    # Get device session step.
    # @param device_session_id deviceSessionId
    # @param device_session_step_id deviceSessionStepId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Fixnum, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_device_session_step_using_get2_with_http_info(device_session_id, device_session_step_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_step_using_get2 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_step_using_get2"
      end
      # verify the required parameter 'device_session_step_id' is set
      if @api_client.config.client_side_validation && device_session_step_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_step_id' when calling AdminApi.get_device_session_step_using_get2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_step_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/steps/{deviceSessionStepId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'deviceSessionStepId' + '}', device_session_step_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_step_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIDeviceSessionStep]
    def get_device_session_steps_using_get(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_steps_using_get_with_http_info(device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIDeviceSessionStep, Fixnum, Hash)>] APIListOfAPIDeviceSessionStep data, response status code and response headers
    def get_device_session_steps_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_steps_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_steps_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/steps'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_steps_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIDeviceSessionStep]
    def get_device_session_steps_using_get1(device_session_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_device_session_steps_using_get1_with_http_info(device_session_id, project_id, run_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIDeviceSessionStep, Fixnum, Hash)>] APIListOfAPIDeviceSessionStep data, response status code and response headers
    def get_device_session_steps_using_get1_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_steps_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_steps_using_get1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_device_session_steps_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_steps_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_steps_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIDeviceSessionStep]
    def get_device_session_steps_using_get2(device_session_id, run_id, opts = {})
      data, _status_code, _headers = get_device_session_steps_using_get2_with_http_info(device_session_id, run_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIDeviceSessionStep, Fixnum, Hash)>] APIListOfAPIDeviceSessionStep data, response status code and response headers
    def get_device_session_steps_using_get2_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_steps_using_get2 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_steps_using_get2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_steps_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/steps'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_steps_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;result_eq_passed&lt;br&gt;filter&#x3D;createtime_eq_1576134483194&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;result_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [Integer] :test_run_id testRunId
    # @return [APIListOfAPITestCaseRun]
    def get_device_session_steps_with_params_using_get(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_steps_with_params_using_get_with_http_info(device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;result_eq_passed&lt;br&gt;filter&#x3D;createtime_eq_1576134483194&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;result_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(APIListOfAPITestCaseRun, Fixnum, Hash)>] APIListOfAPITestCaseRun data, response status code and response headers
    def get_device_session_steps_with_params_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_steps_with_params_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_steps_with_params_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/test-case-runs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITestCaseRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_steps_with_params_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;result_eq_passed&lt;br&gt;filter&#x3D;createtime_eq_1576134483195&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;result_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPITestCaseRun]
    def get_device_session_test_case_runs_using_get(device_session_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_device_session_test_case_runs_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;result_eq_passed&lt;br&gt;filter&#x3D;createtime_eq_1576134483195&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;result_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPITestCaseRun, Fixnum, Hash)>] APIListOfAPITestCaseRun data, response status code and response headers
    def get_device_session_test_case_runs_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_test_case_runs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_test_case_runs_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_device_session_test_case_runs_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_test_case_runs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/test-case-runs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITestCaseRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_test_case_runs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;result_eq_passed&lt;br&gt;filter&#x3D;createtime_eq_1576134483197&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;result_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPITestCaseRun]
    def get_device_session_test_case_runs_using_get1(device_session_id, run_id, opts = {})
      data, _status_code, _headers = get_device_session_test_case_runs_using_get1_with_http_info(device_session_id, run_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;result_eq_passed&lt;br&gt;filter&#x3D;createtime_eq_1576134483197&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;result_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPITestCaseRun, Fixnum, Hash)>] APIListOfAPITestCaseRun data, response status code and response headers
    def get_device_session_test_case_runs_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_test_case_runs_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_test_case_runs_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_test_case_runs_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/test-case-runs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITestCaseRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_test_case_runs_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [APIDeviceSession]
    def get_device_session_using_get(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_using_get_with_http_info(device_session_id, opts)
      data
    end

    # Get device session.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def get_device_session_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def get_device_session_with_project_using_get(device_session_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_device_session_with_project_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      data
    end

    # Get device session.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def get_device_session_with_project_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_with_project_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_with_project_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_device_session_with_project_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_with_project_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_with_project_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def get_device_session_with_run_using_get(device_session_id, run_id, opts = {})
      data, _status_code, _headers = get_device_session_with_run_using_get_with_http_info(device_session_id, run_id, opts)
      data
    end

    # Get device session.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def get_device_session_with_run_using_get_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_session_with_run_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_device_session_with_run_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_session_with_run_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_session_with_run_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483591&lt;br&gt;filter&#x3D;launchappduration_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134483591&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134483591&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;launchAppDuration_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;testRunName_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPIDeviceSession]
    def get_device_sessions_using_get(run_id, opts = {})
      data, _status_code, _headers = get_device_sessions_using_get_with_http_info(run_id, opts)
      data
    end

    # Get device sessions.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483591&lt;br&gt;filter&#x3D;launchappduration_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134483591&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134483591&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;launchAppDuration_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;testRunName_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPIDeviceSession, Fixnum, Hash)>] APIListOfAPIDeviceSession data, response status code and response headers
    def get_device_sessions_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_sessions_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_device_sessions_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_sessions_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device statuses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;tdsversion_eq_value&lt;br&gt;filter&#x3D;internalstorage_eq_1&lt;br&gt;filter&#x3D;alarmon_eq_true&lt;br&gt;filter&#x3D;externalstorage_eq_1&lt;br&gt;filter&#x3D;monitoringon_eq_true&lt;br&gt;filter&#x3D;devicetime_eq_1&lt;br&gt;filter&#x3D;ssid_eq_value&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;internetaccess_eq_true&lt;br&gt;filter&#x3D;emailaccount_eq_value&lt;br&gt;filter&#x3D;clustername_eq_value&lt;br&gt;filter&#x3D;bluetoothon_eq_true&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;mocklocationon_eq_true&lt;br&gt;filter&#x3D;batterylevel_eq_1&lt;br&gt;filter&#x3D;locationserviceon_eq_true&lt;br&gt;filter&#x3D;testexecuting_eq_true&lt;br&gt;filter&#x3D;screenlocked_eq_true&lt;br&gt;filter&#x3D;sdcardpresent_eq_true&lt;br&gt;filter&#x3D;aslon_eq_true&lt;br&gt;filter&#x3D;devicetimezone_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1576134481687&lt;br&gt;filter&#x3D;flashon_eq_true&lt;br&gt;filter&#x3D;tetheringon_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;tdsVersion_a&lt;br&gt;sort&#x3D;internalStorage_a&lt;br&gt;sort&#x3D;alarmOn_a&lt;br&gt;sort&#x3D;externalStorage_a&lt;br&gt;sort&#x3D;monitoringOn_a&lt;br&gt;sort&#x3D;deviceTime_a&lt;br&gt;sort&#x3D;ssid_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;internetAccess_a&lt;br&gt;sort&#x3D;emailAccount_a&lt;br&gt;sort&#x3D;clusterName_a&lt;br&gt;sort&#x3D;bluetoothOn_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;mockLocationOn_a&lt;br&gt;sort&#x3D;batteryLevel_a&lt;br&gt;sort&#x3D;locationServiceOn_a&lt;br&gt;sort&#x3D;testExecuting_a&lt;br&gt;sort&#x3D;screenLocked_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;sdcardPresent_a&lt;br&gt;sort&#x3D;aslOn_a&lt;br&gt;sort&#x3D;deviceTimeZone_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;flashOn_a&lt;br&gt;sort&#x3D;tetheringOn_a
    # @return [APIListOfAPIDeviceStatus]
    def get_device_statuses_using_get(opts = {})
      data, _status_code, _headers = get_device_statuses_using_get_with_http_info(opts)
      data
    end

    # Get device statuses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;tdsversion_eq_value&lt;br&gt;filter&#x3D;internalstorage_eq_1&lt;br&gt;filter&#x3D;alarmon_eq_true&lt;br&gt;filter&#x3D;externalstorage_eq_1&lt;br&gt;filter&#x3D;monitoringon_eq_true&lt;br&gt;filter&#x3D;devicetime_eq_1&lt;br&gt;filter&#x3D;ssid_eq_value&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;internetaccess_eq_true&lt;br&gt;filter&#x3D;emailaccount_eq_value&lt;br&gt;filter&#x3D;clustername_eq_value&lt;br&gt;filter&#x3D;bluetoothon_eq_true&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;mocklocationon_eq_true&lt;br&gt;filter&#x3D;batterylevel_eq_1&lt;br&gt;filter&#x3D;locationserviceon_eq_true&lt;br&gt;filter&#x3D;testexecuting_eq_true&lt;br&gt;filter&#x3D;screenlocked_eq_true&lt;br&gt;filter&#x3D;sdcardpresent_eq_true&lt;br&gt;filter&#x3D;aslon_eq_true&lt;br&gt;filter&#x3D;devicetimezone_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1576134481687&lt;br&gt;filter&#x3D;flashon_eq_true&lt;br&gt;filter&#x3D;tetheringon_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;tdsVersion_a&lt;br&gt;sort&#x3D;internalStorage_a&lt;br&gt;sort&#x3D;alarmOn_a&lt;br&gt;sort&#x3D;externalStorage_a&lt;br&gt;sort&#x3D;monitoringOn_a&lt;br&gt;sort&#x3D;deviceTime_a&lt;br&gt;sort&#x3D;ssid_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;internetAccess_a&lt;br&gt;sort&#x3D;emailAccount_a&lt;br&gt;sort&#x3D;clusterName_a&lt;br&gt;sort&#x3D;bluetoothOn_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;mockLocationOn_a&lt;br&gt;sort&#x3D;batteryLevel_a&lt;br&gt;sort&#x3D;locationServiceOn_a&lt;br&gt;sort&#x3D;testExecuting_a&lt;br&gt;sort&#x3D;screenLocked_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;sdcardPresent_a&lt;br&gt;sort&#x3D;aslOn_a&lt;br&gt;sort&#x3D;deviceTimeZone_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;flashOn_a&lt;br&gt;sort&#x3D;tetheringOn_a
    # @return [Array<(APIListOfAPIDeviceStatus, Fixnum, Hash)>] APIListOfAPIDeviceStatus data, response status code and response headers
    def get_device_statuses_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_statuses_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device/statuses'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_statuses_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device time, counted testRuns and deviceSessions per day, user, project, deviceModel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134481698&lt;br&gt;filter&#x3D;_endtime_eq_1576134481698&lt;br&gt;filter&#x3D;projectname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @return [APIListOfAPIDeviceTimeCountSessionReportEntry]
    def get_device_time_count_session_report_using_get(opts = {})
      data, _status_code, _headers = get_device_time_count_session_report_using_get_with_http_info(opts)
      data
    end

    # Get device time, counted testRuns and deviceSessions per day, user, project, deviceModel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134481698&lt;br&gt;filter&#x3D;_endtime_eq_1576134481698&lt;br&gt;filter&#x3D;projectname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @return [Array<(APIListOfAPIDeviceTimeCountSessionReportEntry, Fixnum, Hash)>] APIListOfAPIDeviceTimeCountSessionReportEntry data, response status code and response headers
    def get_device_time_count_session_report_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_time_count_session_report_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-time/count-session-report'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceTimeCountSessionReportEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_time_count_session_report_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device time summary.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1576134481796&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481796&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userName_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [BOOLEAN] :with_additional_users withAdditionalUsers (default to false)
    # @return [APIUserDeviceTimeSummary]
    def get_device_time_history_summary_using_get(opts = {})
      data, _status_code, _headers = get_device_time_history_summary_using_get_with_http_info(opts)
      data
    end

    # Get device time summary.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1576134481796&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481796&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userName_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [BOOLEAN] :with_additional_users withAdditionalUsers
    # @return [Array<(APIUserDeviceTimeSummary, Fixnum, Hash)>] APIUserDeviceTimeSummary data, response status code and response headers
    def get_device_time_history_summary_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_time_history_summary_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-time-summary'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'withAdditionalUsers'] = opts[:'with_additional_users'] if !opts[:'with_additional_users'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserDeviceTimeSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_time_history_summary_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device time history.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1576134481793&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481793&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userName_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [BOOLEAN] :with_additional_users withAdditionalUsers (default to false)
    # @return [APIListOfAPIUserDeviceTime]
    def get_device_time_history_using_get(opts = {})
      data, _status_code, _headers = get_device_time_history_using_get_with_http_info(opts)
      data
    end

    # Get device time history.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1576134481793&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481793&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userName_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [BOOLEAN] :with_additional_users withAdditionalUsers
    # @return [Array<(APIListOfAPIUserDeviceTime, Fixnum, Hash)>] APIListOfAPIUserDeviceTime data, response status code and response headers
    def get_device_time_history_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_time_history_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-time'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'withAdditionalUsers'] = opts[:'with_additional_users'] if !opts[:'with_additional_users'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserDeviceTime')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_time_history_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device preparing and waiting time per day, user, project, deviceModel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134481885&lt;br&gt;filter&#x3D;_endtime_eq_1576134481885&lt;br&gt;filter&#x3D;projectname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @return [APIListOfAPIDeviceTimeStepTimeReportEntry]
    def get_device_time_step_time_report_using_get(opts = {})
      data, _status_code, _headers = get_device_time_step_time_report_using_get_with_http_info(opts)
      data
    end

    # Get device preparing and waiting time per day, user, project, deviceModel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134481885&lt;br&gt;filter&#x3D;_endtime_eq_1576134481885&lt;br&gt;filter&#x3D;projectname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @return [Array<(APIListOfAPIDeviceTimeStepTimeReportEntry, Fixnum, Hash)>] APIListOfAPIDeviceTimeStepTimeReportEntry data, response status code and response headers
    def get_device_time_step_time_report_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_time_step_time_report_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-time/step-time-report'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceTimeStepTimeReportEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_time_step_time_report_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device frame.
    # @param device_type_id deviceTypeId
    # @param [Hash] opts the optional parameters
    # @return [APIAdminDeviceType]
    def get_device_type_using_get(device_type_id, opts = {})
      data, _status_code, _headers = get_device_type_using_get_with_http_info(device_type_id, opts)
      data
    end

    # Get device frame.
    # @param device_type_id deviceTypeId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminDeviceType, Fixnum, Hash)>] APIAdminDeviceType data, response status code and response headers
    def get_device_type_using_get_with_http_info(device_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_type_using_get ...'
      end
      # verify the required parameter 'device_type_id' is set
      if @api_client.config.client_side_validation && device_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_type_id' when calling AdminApi.get_device_type_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-types/{deviceTypeId}'.sub('{' + 'deviceTypeId' + '}', device_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminDeviceType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_type_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device frames.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;imageprefix_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;imagePrefix_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIAdminDeviceType]
    def get_device_types_using_get(opts = {})
      data, _status_code, _headers = get_device_types_using_get_with_http_info(opts)
      data
    end

    # Get device frames.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;imageprefix_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;imagePrefix_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIAdminDeviceType, Fixnum, Hash)>] APIListOfAPIAdminDeviceType data, response status code and response headers
    def get_device_types_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_device_types_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-types'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminDeviceType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_device_types_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get devices used given device cleanup configuration.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1576134480887&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @return [APIListOfAPIAdminDevice]
    def get_devices_used_device_cleanup_configuration_using_get(id, opts = {})
      data, _status_code, _headers = get_devices_used_device_cleanup_configuration_using_get_with_http_info(id, opts)
      data
    end

    # Get devices used given device cleanup configuration.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1576134480887&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @return [Array<(APIListOfAPIAdminDevice, Fixnum, Hash)>] APIListOfAPIAdminDevice data, response status code and response headers
    def get_devices_used_device_cleanup_configuration_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_devices_used_device_cleanup_configuration_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_devices_used_device_cleanup_configuration_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/{id}/devices'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_devices_used_device_cleanup_configuration_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get devices.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1576134481499&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @option opts [BOOLEAN] :with_disabled withDisabled (default to true)
    # @return [APIListOfAPIAdminDevice]
    def get_devices_using_get(opts = {})
      data, _status_code, _headers = get_devices_using_get_with_http_info(opts)
      data
    end

    # Get devices.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1576134481499&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @option opts [BOOLEAN] :with_disabled withDisabled
    # @return [Array<(APIListOfAPIAdminDevice, Fixnum, Hash)>] APIListOfAPIAdminDevice data, response status code and response headers
    def get_devices_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_devices_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/devices'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'withDisabled'] = opts[:'with_disabled'] if !opts[:'with_disabled'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_devices_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get emails.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134481894&lt;br&gt;filter&#x3D;subject_eq_value&lt;br&gt;filter&#x3D;lastretrytime_eq_1576134481894&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;sent_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;subject_a&lt;br&gt;sort&#x3D;lastRetryTime_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;sent_a
    # @return [APIListOfAPIAdminEmail]
    def get_emails_using_get(opts = {})
      data, _status_code, _headers = get_emails_using_get_with_http_info(opts)
      data
    end

    # Get emails.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134481894&lt;br&gt;filter&#x3D;subject_eq_value&lt;br&gt;filter&#x3D;lastretrytime_eq_1576134481894&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;sent_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;subject_a&lt;br&gt;sort&#x3D;lastRetryTime_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;sent_a
    # @return [Array<(APIListOfAPIAdminEmail, Fixnum, Hash)>] APIListOfAPIAdminEmail data, response status code and response headers
    def get_emails_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_emails_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/emails'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminEmail')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_emails_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get errors.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;quantity_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_abort_request&lt;br&gt;filter&#x3D;timestamp_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;quantity_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @return [APIListOfAPIAdminError]
    def get_errors_using_get(opts = {})
      data, _status_code, _headers = get_errors_using_get_with_http_info(opts)
      data
    end

    # Get errors.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;quantity_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_abort_request&lt;br&gt;filter&#x3D;timestamp_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;quantity_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @return [Array<(APIListOfAPIAdminError, Fixnum, Hash)>] APIListOfAPIAdminError data, response status code and response headers
    def get_errors_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_errors_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/errors'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminError')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_errors_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get file tags.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIUserFileTag]
    def get_file_tags_using_get(file_id, opts = {})
      data, _status_code, _headers = get_file_tags_using_get_with_http_info(file_id, opts)
      data
    end

    # Get file tags.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIUserFileTag, Fixnum, Hash)>] APIListOfAPIUserFileTag data, response status code and response headers
    def get_file_tags_using_get_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_file_tags_using_get ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AdminApi.get_file_tags_using_get"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/tags'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFileTag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_file_tags_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get files.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483901&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [APIListOfAPIUserFile]
    def get_files_using_get(opts = {})
      data, _status_code, _headers = get_files_using_get_with_http_info(opts)
      data
    end

    # Get files.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483901&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_files_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_files_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/files'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_files_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get available framework labels.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @return [APIListOfAPIDeviceProperty]
    def get_framework_available_labels_using_get(opts = {})
      data, _status_code, _headers = get_framework_available_labels_using_get_with_http_info(opts)
      data
    end

    # Get available framework labels.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @return [Array<(APIListOfAPIDeviceProperty, Fixnum, Hash)>] APIListOfAPIDeviceProperty data, response status code and response headers
    def get_framework_available_labels_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_framework_available_labels_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/available-labels'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_framework_available_labels_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get framework's config.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIProjectJobConfig]
    def get_framework_config_using_get(id, opts = {})
      data, _status_code, _headers = get_framework_config_using_get_with_http_info(id, opts)
      data
    end

    # Get framework&#39;s config.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProjectJobConfig, Fixnum, Hash)>] APIProjectJobConfig data, response status code and response headers
    def get_framework_config_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_framework_config_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_framework_config_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}/config'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProjectJobConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_framework_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get roles required by framework.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;name_eq_admin&lt;br&gt;filter&#x3D;id_eq_null
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIRole]
    def get_framework_roles_using_get(id, opts = {})
      data, _status_code, _headers = get_framework_roles_using_get_with_http_info(id, opts)
      data
    end

    # Get roles required by framework.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;name_eq_admin&lt;br&gt;filter&#x3D;id_eq_null
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIRole, Fixnum, Hash)>] APIListOfAPIRole data, response status code and response headers
    def get_framework_roles_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_framework_roles_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_framework_roles_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}/required-roles'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIRole')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_framework_roles_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get framework statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days days (default to 30)
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134482503&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134482503
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a
    # @return [APIListOfAPIAdminFrameworkStatistics]
    def get_framework_statistics_using_get(opts = {})
      data, _status_code, _headers = get_framework_statistics_using_get_with_http_info(opts)
      data
    end

    # Get framework statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days days
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134482503&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134482503
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a
    # @return [Array<(APIListOfAPIAdminFrameworkStatistics, Fixnum, Hash)>] APIListOfAPIAdminFrameworkStatistics data, response status code and response headers
    def get_framework_statistics_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_framework_statistics_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/statistics/frameworks'

      # query parameters
      query_params = {}
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminFrameworkStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_framework_statistics_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get framework.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIFramework]
    def get_framework_using_get(id, opts = {})
      data, _status_code, _headers = get_framework_using_get_with_http_info(id, opts)
      data
    end

    # Get framework.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIFramework, Fixnum, Hash)>] APIFramework data, response status code and response headers
    def get_framework_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_framework_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_framework_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIFramework')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_framework_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get frameworks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;retryable_eq_true&lt;br&gt;filter&#x3D;canrunfromui_eq_true&lt;br&gt;filter&#x3D;skipqueue_eq_true&lt;br&gt;filter&#x3D;forprojects_eq_true&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;type_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;labelid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134484201&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;jobconfigid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelname_eq_value&lt;br&gt;filter&#x3D;secured_eq_true&lt;br&gt;filter&#x3D;skipoldersdk_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;retryable_a&lt;br&gt;sort&#x3D;canRunFromUI_a&lt;br&gt;sort&#x3D;skipQueue_a&lt;br&gt;sort&#x3D;forProjects_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;labelId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;jobConfigId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelName_a&lt;br&gt;sort&#x3D;secured_a&lt;br&gt;sort&#x3D;skipOlderSdk_a
    # @return [APIListOfAPIFramework]
    def get_frameworks_using_get(opts = {})
      data, _status_code, _headers = get_frameworks_using_get_with_http_info(opts)
      data
    end

    # Get frameworks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;retryable_eq_true&lt;br&gt;filter&#x3D;canrunfromui_eq_true&lt;br&gt;filter&#x3D;skipqueue_eq_true&lt;br&gt;filter&#x3D;forprojects_eq_true&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;type_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;labelid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134484201&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;jobconfigid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelname_eq_value&lt;br&gt;filter&#x3D;secured_eq_true&lt;br&gt;filter&#x3D;skipoldersdk_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;retryable_a&lt;br&gt;sort&#x3D;canRunFromUI_a&lt;br&gt;sort&#x3D;skipQueue_a&lt;br&gt;sort&#x3D;forProjects_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;labelId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;jobConfigId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelName_a&lt;br&gt;sort&#x3D;secured_a&lt;br&gt;sort&#x3D;skipOlderSdk_a
    # @return [Array<(APIListOfAPIFramework, Fixnum, Hash)>] APIListOfAPIFramework data, response status code and response headers
    def get_frameworks_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_frameworks_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIFramework')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_frameworks_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get connection for device session.
    # @param connection_id connectionId
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [APIConnection]
    def get_inspector_device_session_connection_using_get(connection_id, device_session_id, opts = {})
      data, _status_code, _headers = get_inspector_device_session_connection_using_get_with_http_info(connection_id, device_session_id, opts)
      data
    end

    # Get connection for device session.
    # @param connection_id connectionId
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIConnection, Fixnum, Hash)>] APIConnection data, response status code and response headers
    def get_inspector_device_session_connection_using_get_with_http_info(connection_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_inspector_device_session_connection_using_get ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling AdminApi.get_inspector_device_session_connection_using_get"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_inspector_device_session_connection_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/connections/{connectionId}'.sub('{' + 'connectionId' + '}', connection_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_inspector_device_session_connection_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get connections for device session.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;path_eq_value&lt;br&gt;filter&#x3D;password_eq_value&lt;br&gt;filter&#x3D;urlschema_eq_value&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;port_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134483687&lt;br&gt;filter&#x3D;host_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134483687&lt;br&gt;filter&#x3D;type_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;path_a&lt;br&gt;sort&#x3D;password_a&lt;br&gt;sort&#x3D;urlSchema_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;port_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;host_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;type_a
    # @return [APIListOfAPIConnection]
    def get_inspector_device_session_connections_using_get(device_session_id, opts = {})
      data, _status_code, _headers = get_inspector_device_session_connections_using_get_with_http_info(device_session_id, opts)
      data
    end

    # Get connections for device session.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;path_eq_value&lt;br&gt;filter&#x3D;password_eq_value&lt;br&gt;filter&#x3D;urlschema_eq_value&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;port_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134483687&lt;br&gt;filter&#x3D;host_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134483687&lt;br&gt;filter&#x3D;type_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;path_a&lt;br&gt;sort&#x3D;password_a&lt;br&gt;sort&#x3D;urlSchema_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;port_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;host_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;type_a
    # @return [Array<(APIListOfAPIConnection, Fixnum, Hash)>] APIListOfAPIConnection data, response status code and response headers
    def get_inspector_device_session_connections_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_inspector_device_session_connections_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_inspector_device_session_connections_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/connections'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_inspector_device_session_connections_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get manual sessions queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;billable_eq_true&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134481999&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134481999&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481999
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;deviceModelName_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;billable_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a
    # @return [APIListOfAPIAdminInteractiveDeviceSession]
    def get_interactive_queue_using_get(opts = {})
      data, _status_code, _headers = get_interactive_queue_using_get_with_http_info(opts)
      data
    end

    # Get manual sessions queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;billable_eq_true&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134481999&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1576134481999&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134481999
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;deviceModelName_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;billable_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a
    # @return [Array<(APIListOfAPIAdminInteractiveDeviceSession, Fixnum, Hash)>] APIListOfAPIAdminInteractiveDeviceSession data, response status code and response headers
    def get_interactive_queue_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_interactive_queue_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/interactive-queue'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAdminInteractiveDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_interactive_queue_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get job.
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [APIPipelineJob]
    def get_job_using_get(job_id, opts = {})
      data, _status_code, _headers = get_job_using_get_with_http_info(job_id, opts)
      data
    end

    # Get job.
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPipelineJob, Fixnum, Hash)>] APIPipelineJob data, response status code and response headers
    def get_job_using_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_job_using_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AdminApi.get_job_using_get"
      end
      # resource path
      local_var_path = '/api/v2/jobs/{jobId}'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineJob')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_job_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jobs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134484402&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_build&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a
    # @return [APIListOfAPIPipelineJob]
    def get_jobs_using_get(opts = {})
      data, _status_code, _headers = get_jobs_using_get_with_http_info(opts)
      data
    end

    # Get jobs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134484402&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_build&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a
    # @return [Array<(APIListOfAPIPipelineJob, Fixnum, Hash)>] APIListOfAPIPipelineJob data, response status code and response headers
    def get_jobs_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_jobs_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/jobs'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIPipelineJob')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_jobs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def get_license_using_get(id, opts = {})
      data, _status_code, _headers = get_license_using_get_with_http_info(id, opts)
      data
    end

    # Get license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Fixnum, Hash)>] APILicense data, response status code and response headers
    def get_license_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_license_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_license_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APILicense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_license_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get license installed to cloud.
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def get_license_using_get1(opts = {})
      data, _status_code, _headers = get_license_using_get1_with_http_info(opts)
      data
    end

    # Get license installed to cloud.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Fixnum, Hash)>] APILicense data, response status code and response headers
    def get_license_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_license_using_get1 ...'
      end
      # resource path
      local_var_path = '/api/v2/license'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APILicense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_license_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get licenses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1576134482100&lt;br&gt;filter&#x3D;closetime_eq_1576134482100&lt;br&gt;filter&#x3D;privateinstance_eq_true&lt;br&gt;filter&#x3D;activatetime_eq_1576134482100&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;status_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;closeTime_a&lt;br&gt;sort&#x3D;privateInstance_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;status_a
    # @return [APIListOfAPILicense]
    def get_licenses_using_get(opts = {})
      data, _status_code, _headers = get_licenses_using_get_with_http_info(opts)
      data
    end

    # Get licenses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1576134482100&lt;br&gt;filter&#x3D;closetime_eq_1576134482100&lt;br&gt;filter&#x3D;privateinstance_eq_true&lt;br&gt;filter&#x3D;activatetime_eq_1576134482100&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;status_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;closeTime_a&lt;br&gt;sort&#x3D;privateInstance_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;status_a
    # @return [Array<(APIListOfAPILicense, Fixnum, Hash)>] APIListOfAPILicense data, response status code and response headers
    def get_licenses_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_licenses_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPILicense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_licenses_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @return [APIListOfAPIAccessGroup]
    def get_list_using_get(opts = {})
      data, _status_code, _headers = get_list_using_get_with_http_info(opts)
      data
    end

    # Get access groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @return [Array<(APIListOfAPIAccessGroup, Fixnum, Hash)>] APIListOfAPIAccessGroup data, response status code and response headers
    def get_list_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_list_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/access-groups'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAccessGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_list_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get country vat rates.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;country_eq_value&lt;br&gt;filter&#x3D;countrycode_eq_value&lt;br&gt;filter&#x3D;vatrate_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;country_a&lt;br&gt;sort&#x3D;countryCode_a&lt;br&gt;sort&#x3D;vatRate_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPICountryVatRate]
    def get_list_using_get2(opts = {})
      data, _status_code, _headers = get_list_using_get2_with_http_info(opts)
      data
    end

    # Get country vat rates.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;country_eq_value&lt;br&gt;filter&#x3D;countrycode_eq_value&lt;br&gt;filter&#x3D;vatrate_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;country_a&lt;br&gt;sort&#x3D;countryCode_a&lt;br&gt;sort&#x3D;vatRate_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPICountryVatRate, Fixnum, Hash)>] APIListOfAPICountryVatRate data, response status code and response headers
    def get_list_using_get2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_list_using_get2 ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/country-vat-rates'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPICountryVatRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_list_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APINotificationPlan]
    def get_notification_plan_using_get(id, opts = {})
      data, _status_code, _headers = get_notification_plan_using_get_with_http_info(id, opts)
      data
    end

    # Get notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APINotificationPlan, Fixnum, Hash)>] APINotificationPlan data, response status code and response headers
    def get_notification_plan_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_notification_plan_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_notification_plan_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APINotificationPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_notification_plan_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification plans.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134485502&lt;br&gt;filter&#x3D;scope_eq_all&lt;br&gt;filter&#x3D;handlerid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;senttime_eq_1576134485502&lt;br&gt;filter&#x3D;updatetime_eq_1576134485502&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;handleremail_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;scope_a&lt;br&gt;sort&#x3D;handlerId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;sentTime_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;handlerEmail_a
    # @return [APIListOfAPINotificationPlan]
    def get_notification_plans_using_get(opts = {})
      data, _status_code, _headers = get_notification_plans_using_get_with_http_info(opts)
      data
    end

    # Get notification plans.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134485502&lt;br&gt;filter&#x3D;scope_eq_all&lt;br&gt;filter&#x3D;handlerid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;senttime_eq_1576134485502&lt;br&gt;filter&#x3D;updatetime_eq_1576134485502&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;handleremail_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;scope_a&lt;br&gt;sort&#x3D;handlerId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;sentTime_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;handlerEmail_a
    # @return [Array<(APIListOfAPINotificationPlan, Fixnum, Hash)>] APIListOfAPINotificationPlan data, response status code and response headers
    def get_notification_plans_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_notification_plans_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPINotificationPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_notification_plans_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483690&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [APIListOfAPIUserFile]
    def get_output_files_for_device_session_by_tag_using_get(device_session_id, opts = {})
      data, _status_code, _headers = get_output_files_for_device_session_by_tag_using_get_with_http_info(device_session_id, opts)
      data
    end

    # Get device session output files.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483690&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_output_files_for_device_session_by_tag_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_output_files_for_device_session_by_tag_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_output_files_for_device_session_by_tag_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_output_files_for_device_session_by_tag_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483692&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [APIListOfAPIUserFile]
    def get_output_files_for_device_session_by_tag_using_get1(device_session_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_output_files_for_device_session_by_tag_using_get1_with_http_info(device_session_id, project_id, run_id, opts)
      data
    end

    # Get device session output files.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483692&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_output_files_for_device_session_by_tag_using_get1_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_output_files_for_device_session_by_tag_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_output_files_for_device_session_by_tag_using_get1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_output_files_for_device_session_by_tag_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_output_files_for_device_session_by_tag_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_output_files_for_device_session_by_tag_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483693&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [APIListOfAPIUserFile]
    def get_output_files_for_device_session_by_tag_using_get2(device_session_id, run_id, opts = {})
      data, _status_code, _headers = get_output_files_for_device_session_by_tag_using_get2_with_http_info(device_session_id, run_id, opts)
      data
    end

    # Get device session output files.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483693&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_output_files_for_device_session_by_tag_using_get2_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_output_files_for_device_session_by_tag_using_get2 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_output_files_for_device_session_by_tag_using_get2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_output_files_for_device_session_by_tag_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_output_files_for_device_session_by_tag_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get output files.
    # @param build_id buildId
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482790&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [APIListOfAPIUserFile]
    def get_output_files_for_pipeline_build_by_tag_using_get(build_id, job_id, opts = {})
      data, _status_code, _headers = get_output_files_for_pipeline_build_by_tag_using_get_with_http_info(build_id, job_id, opts)
      data
    end

    # Get output files.
    # @param build_id buildId
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482790&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_output_files_for_pipeline_build_by_tag_using_get_with_http_info(build_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_output_files_for_pipeline_build_by_tag_using_get ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling AdminApi.get_output_files_for_pipeline_build_by_tag_using_get"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AdminApi.get_output_files_for_pipeline_build_by_tag_using_get"
      end
      # resource path
      local_var_path = '/api/v2/jobs/{jobId}/builds/{buildId}/output-file-set/files'.sub('{' + 'buildId' + '}', build_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_output_files_for_pipeline_build_by_tag_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_application_file_using_get(project_id, opts = {})
      get_project_application_file_using_get_with_http_info(project_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_application_file_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_application_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_application_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/application'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_application_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_cluster_logs_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_cluster_logs_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_cluster_logs_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_cluster_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_project_cluster_logs_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_cluster_logs_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_cluster_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/cluster-logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_cluster_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunConfig]
    def get_project_config_using_get(project_id, opts = {})
      data, _status_code, _headers = get_project_config_using_get_with_http_info(project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def get_project_config_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_config_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_config_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/config'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_data_file_using_get(project_id, opts = {})
      get_project_data_file_using_get_with_http_info(project_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_data_file_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_data_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_data_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/data'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_data_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_device_session_data_zip_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_device_session_data_zip_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_device_session_data_zip_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_device_session_data_zip_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_project_device_session_data_zip_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_device_session_data_zip_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_device_session_data_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/result-data.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_device_session_data_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_device_session_junit_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_device_session_junit_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_device_session_junit_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_device_session_junit_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_project_device_session_junit_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_device_session_junit_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_device_session_junit_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/junit.xml'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_device_session_junit_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_device_session_logs_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_device_session_logs_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_device_session_logs_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_device_session_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_project_device_session_logs_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_device_session_logs_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_device_session_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_device_session_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_device_session_performance_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_device_session_performance_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_device_session_performance_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_device_session_performance_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_project_device_session_performance_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_device_session_performance_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_device_session_performance_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/performance'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_device_session_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :height height
    # @option opts [Integer] :width width
    # @return [nil]
    def get_project_device_session_screenshot_using_get(device_session_id, project_id, run_id, screenshot_id, opts = {})
      get_project_device_session_screenshot_using_get_with_http_info(device_session_id, project_id, run_id, screenshot_id, opts)
      nil
    end

    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :height height
    # @option opts [Integer] :width width
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_device_session_screenshot_using_get_with_http_info(device_session_id, project_id, run_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_device_session_screenshot_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_project_device_session_screenshot_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_device_session_screenshot_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_device_session_screenshot_using_get"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AdminApi.get_project_device_session_screenshot_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/screenshots/{screenshotId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_device_session_screenshot_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshots.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIScreenshot]
    def get_project_device_session_screenshots_using_get(device_session_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_device_session_screenshots_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      data
    end

    # Get device session screenshots.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIScreenshot, Fixnum, Hash)>] APIListOfAPIScreenshot data, response status code and response headers
    def get_project_device_session_screenshots_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_device_session_screenshots_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_project_device_session_screenshots_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_device_session_screenshots_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_device_session_screenshots_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/screenshots'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_device_session_screenshots_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483695&lt;br&gt;filter&#x3D;launchappduration_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134483695&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134483695&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;launchAppDuration_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;testRunName_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPIDeviceSession]
    def get_project_device_sessions_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_device_sessions_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # Get device sessions.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483695&lt;br&gt;filter&#x3D;launchappduration_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134483695&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134483695&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;launchAppDuration_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;testRunName_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPIDeviceSession, Fixnum, Hash)>] APIListOfAPIDeviceSession data, response status code and response headers
    def get_project_device_sessions_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_device_sessions_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_device_sessions_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_device_sessions_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_device_sessions_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_file_zip_using_get(project_id, opts = {})
      get_project_file_zip_using_get_with_http_info(project_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_file_zip_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_file_zip_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_file_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_file_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIUserFile]
    def get_project_files_using_get(project_id, opts = {})
      data, _status_code, _headers = get_project_files_using_get_with_http_info(project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_project_files_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_files_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_files_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_files_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_file_using_get(project_id, opts = {})
      get_project_test_file_using_get_with_http_info(project_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_file_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/test'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_run_application_file_using_get(project_id, run_id, opts = {})
      get_project_test_run_application_file_using_get_with_http_info(project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_run_application_file_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_run_application_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_run_application_file_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_test_run_application_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files/application'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_run_application_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunConfig]
    def get_project_test_run_config_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_test_run_config_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def get_project_test_run_config_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_run_config_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_run_config_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_test_run_config_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/config'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_run_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_run_data_file_using_get(project_id, run_id, opts = {})
      get_project_test_run_data_file_using_get_with_http_info(project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_run_data_file_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_run_data_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_run_data_file_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_test_run_data_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files/data'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_run_data_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_run_file_zip_using_get(project_id, run_id, opts = {})
      get_project_test_run_file_zip_using_get_with_http_info(project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_run_file_zip_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_run_file_zip_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_run_file_zip_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_test_run_file_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_run_file_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIUserFile]
    def get_project_test_run_files_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_test_run_files_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_project_test_run_files_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_run_files_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_run_files_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_test_run_files_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_run_files_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tags.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPITag]
    def get_project_test_run_tags_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_test_run_tags_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # Get test run tags.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPITag, Fixnum, Hash)>] APIListOfAPITag data, response status code and response headers
    def get_project_test_run_tags_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_run_tags_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_run_tags_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_test_run_tags_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/tags'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_run_tags_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_run_test_file_using_get(project_id, run_id, opts = {})
      get_project_test_run_test_file_using_get_with_http_info(project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_run_test_file_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_run_test_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_run_test_file_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_test_run_test_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files/test'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_run_test_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def get_project_test_run_with_project_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_test_run_with_project_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # Get test run.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def get_project_test_run_with_project_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_run_with_project_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_run_with_project_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_project_test_run_with_project_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_run_with_project_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134485003&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134485003&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPITestRun]
    def get_project_test_runs_using_get(project_id, opts = {})
      data, _status_code, _headers = get_project_test_runs_using_get_with_http_info(project_id, opts)
      data
    end

    # Get test runs.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134485003&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134485003&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPITestRun, Fixnum, Hash)>] APIListOfAPITestRun data, response status code and response headers
    def get_project_test_runs_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_test_runs_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_test_runs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_test_runs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APIProject]
    def get_project_using_get1(project_id, opts = {})
      data, _status_code, _headers = get_project_using_get1_with_http_info(project_id, opts)
      data
    end

    # Get project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProject, Fixnum, Hash)>] APIProject data, response status code and response headers
    def get_project_using_get1_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_project_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_project_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_project_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get projects.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134484591&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134484591&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;readonly_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sharedbyemail_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;sharedByEmail_a
    # @return [APIListOfAPIProject]
    def get_projects_using_get1(opts = {})
      data, _status_code, _headers = get_projects_using_get1_with_http_info(opts)
      data
    end

    # Get projects.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134484591&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134484591&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;readonly_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sharedbyemail_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;sharedByEmail_a
    # @return [Array<(APIListOfAPIProject, Fixnum, Hash)>] APIListOfAPIProject data, response status code and response headers
    def get_projects_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_projects_using_get1 ...'
      end
      # resource path
      local_var_path = '/api/v2/projects'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_projects_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;updatedbydisplayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;fromtime_eq_1576134482207&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;updatetime_eq_1576134482207&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;updatedbyid_eq_1&lt;br&gt;filter&#x3D;value_eq_value&lt;br&gt;filter&#x3D;totime_eq_1576134482207
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;updatedByDisplayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;fromTime_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;updatedById_a&lt;br&gt;sort&#x3D;value_a&lt;br&gt;sort&#x3D;toTime_a
    # @return [APIListOfAPIProperty]
    def get_properties_using_get(opts = {})
      data, _status_code, _headers = get_properties_using_get_with_http_info(opts)
      data
    end

    # Get properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;updatedbydisplayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;fromtime_eq_1576134482207&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;updatetime_eq_1576134482207&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;updatedbyid_eq_1&lt;br&gt;filter&#x3D;value_eq_value&lt;br&gt;filter&#x3D;totime_eq_1576134482207
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;updatedByDisplayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;fromTime_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;updatedById_a&lt;br&gt;sort&#x3D;value_a&lt;br&gt;sort&#x3D;toTime_a
    # @return [Array<(APIListOfAPIProperty, Fixnum, Hash)>] APIListOfAPIProperty data, response status code and response headers
    def get_properties_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_properties_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/properties'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_properties_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resource.
    # @param access_group_id accessGroupId
    # @param resource_id resourceId
    # @param [Hash] opts the optional parameters
    # @return [APISharedResource]
    def get_resource_using_get(access_group_id, resource_id, opts = {})
      data, _status_code, _headers = get_resource_using_get_with_http_info(access_group_id, resource_id, opts)
      data
    end

    # Get access group resource.
    # @param access_group_id accessGroupId
    # @param resource_id resourceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APISharedResource, Fixnum, Hash)>] APISharedResource data, response status code and response headers
    def get_resource_using_get_with_http_info(access_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_resource_using_get ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.get_resource_using_get"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling AdminApi.get_resource_using_get"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_resource_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resources.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @return [APIListOfAPISharedResource]
    def get_resources_using_get(access_group_id, opts = {})
      data, _status_code, _headers = get_resources_using_get_with_http_info(access_group_id, opts)
      data
    end

    # Get access group resources.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @return [Array<(APIListOfAPISharedResource, Fixnum, Hash)>] APIListOfAPISharedResource data, response status code and response headers
    def get_resources_using_get_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_resources_using_get ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.get_resources_using_get"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/resources'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_resources_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get roles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [BOOLEAN] :without_priorities withoutPriorities (default to false)
    # @return [APIListOfAPIRole]
    def get_roles_using_get(opts = {})
      data, _status_code, _headers = get_roles_using_get_with_http_info(opts)
      data
    end

    # Get roles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [BOOLEAN] :without_priorities withoutPriorities
    # @return [Array<(APIListOfAPIRole, Fixnum, Hash)>] APIListOfAPIRole data, response status code and response headers
    def get_roles_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_roles_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/roles'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'withoutPriorities'] = opts[:'without_priorities'] if !opts[:'without_priorities'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIRole')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_roles_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get sample files.
    # Sample files
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482387&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @return [APIListOfAPIUserFile]
    def get_sample_files_using_get(opts = {})
      data, _status_code, _headers = get_sample_files_using_get_with_http_info(opts)
      data
    end

    # Get sample files.
    # Sample files
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482387&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_sample_files_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_sample_files_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/samples'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_sample_files_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification scopes.
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIEnum]
    def get_scopes_using_get(opts = {})
      data, _status_code, _headers = get_scopes_using_get_with_http_info(opts)
      data
    end

    # Get notification scopes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIEnum, Fixnum, Hash)>] APIListOfAPIEnum data, response status code and response headers
    def get_scopes_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_scopes_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans/scopes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIEnum')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_scopes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download device session screenshot.
    # @param device_session_id deviceSessionId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_screenshot_for_device_session_using_get(device_session_id, screenshot_id, opts = {})
      get_screenshot_for_device_session_using_get_with_http_info(device_session_id, screenshot_id, opts)
      nil
    end

    # Download device session screenshot.
    # @param device_session_id deviceSessionId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_screenshot_for_device_session_using_get_with_http_info(device_session_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_screenshot_for_device_session_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_screenshot_for_device_session_using_get"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AdminApi.get_screenshot_for_device_session_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/screenshots/{screenshotId}/file'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_screenshot_for_device_session_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def get_screenshot_for_device_session_using_get1(device_session_id, screenshot_id, opts = {})
      data, _status_code, _headers = get_screenshot_for_device_session_using_get1_with_http_info(device_session_id, screenshot_id, opts)
      data
    end

    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param screenshot_id screenshotId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def get_screenshot_for_device_session_using_get1_with_http_info(device_session_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_screenshot_for_device_session_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_screenshot_for_device_session_using_get1"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AdminApi.get_screenshot_for_device_session_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/screenshots/{screenshotId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_screenshot_for_device_session_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get screenshot names.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIScreenshot]
    def get_screenshot_names_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_screenshot_names_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # Get screenshot names.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIScreenshot, Fixnum, Hash)>] APIListOfAPIScreenshot data, response status code and response headers
    def get_screenshot_names_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_screenshot_names_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_screenshot_names_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_screenshot_names_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/screenshot-names'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_screenshot_names_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get screenshot names.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIScreenshot]
    def get_screenshot_names_using_get1(run_id, opts = {})
      data, _status_code, _headers = get_screenshot_names_using_get1_with_http_info(run_id, opts)
      data
    end

    # Get screenshot names.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIScreenshot, Fixnum, Hash)>] APIListOfAPIScreenshot data, response status code and response headers
    def get_screenshot_names_using_get1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_screenshot_names_using_get1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_screenshot_names_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/screenshot-names'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_screenshot_names_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get screenshots for device session.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483700&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @return [APIListOfAPIUserFile]
    def get_screenshots_for_device_session_using_get(device_session_id, opts = {})
      data, _status_code, _headers = get_screenshots_for_device_session_using_get_with_http_info(device_session_id, opts)
      data
    end

    # Get screenshots for device session.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483700&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_screenshots_for_device_session_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_screenshots_for_device_session_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.get_screenshots_for_device_session_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/screenshots'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_screenshots_for_device_session_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get service.
    # @param service_id serviceId
    # @param [Hash] opts the optional parameters
    # @return [APIService]
    def get_service_using_get(service_id, opts = {})
      data, _status_code, _headers = get_service_using_get_with_http_info(service_id, opts)
      data
    end

    # Get service.
    # @param service_id serviceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIService, Fixnum, Hash)>] APIService data, response status code and response headers
    def get_service_using_get_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_service_using_get ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AdminApi.get_service_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/services/{serviceId}'.sub('{' + 'serviceId' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_service_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get services.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only activeOnly (default to false)
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134482490&lt;br&gt;filter&#x3D;includedhours_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;chargetype_eq_usage&lt;br&gt;filter&#x3D;priceperhour_eq_1&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;activatetime_eq_1576134482490&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;centprice_eq_1&lt;br&gt;filter&#x3D;customplan_eq_true&lt;br&gt;filter&#x3D;activated_eq_true
    # @option opts [BOOLEAN] :in_use inUse (default to false)
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [BOOLEAN] :not_archived notArchived (default to false)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;includedHours_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;pricePerHour_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;centPrice_a&lt;br&gt;sort&#x3D;customPlan_a&lt;br&gt;sort&#x3D;activated_a
    # @return [APIListOfAPIService]
    def get_services_using_get(opts = {})
      data, _status_code, _headers = get_services_using_get_with_http_info(opts)
      data
    end

    # Get services.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only activeOnly
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1576134482490&lt;br&gt;filter&#x3D;includedhours_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;chargetype_eq_usage&lt;br&gt;filter&#x3D;priceperhour_eq_1&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;activatetime_eq_1576134482490&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;centprice_eq_1&lt;br&gt;filter&#x3D;customplan_eq_true&lt;br&gt;filter&#x3D;activated_eq_true
    # @option opts [BOOLEAN] :in_use inUse
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [BOOLEAN] :not_archived notArchived
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;includedHours_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;pricePerHour_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;centPrice_a&lt;br&gt;sort&#x3D;customPlan_a&lt;br&gt;sort&#x3D;activated_a
    # @return [Array<(APIListOfAPIService, Fixnum, Hash)>] APIListOfAPIService data, response status code and response headers
    def get_services_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_services_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/services'

      # query parameters
      query_params = {}
      query_params[:'activeOnly'] = opts[:'active_only'] if !opts[:'active_only'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'inUse'] = opts[:'in_use'] if !opts[:'in_use'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'notArchived'] = opts[:'not_archived'] if !opts[:'not_archived'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_services_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get settings.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_vulnerable_data withVulnerableData (default to false)
    # @return [Hash<String, Object>]
    def get_settings_using_get(opts = {})
      data, _status_code, _headers = get_settings_using_get_with_http_info(opts)
      data
    end

    # Get settings.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_vulnerable_data withVulnerableData
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_settings_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_settings_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/settings'

      # query parameters
      query_params = {}
      query_params[:'withVulnerableData'] = opts[:'with_vulnerable_data'] if !opts[:'with_vulnerable_data'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_settings_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device cleanup configuration.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_specific_device_cleanup_configuration_using_delete(id, opts = {})
      get_specific_device_cleanup_configuration_using_delete_with_http_info(id, opts)
      nil
    end

    # Delete device cleanup configuration.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_specific_device_cleanup_configuration_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_specific_device_cleanup_configuration_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_specific_device_cleanup_configuration_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_specific_device_cleanup_configuration_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get specific device cleanup configuration.
    # @param serial_id serialId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceCleanupConfiguration]
    def get_specific_device_cleanup_configuration_using_get(serial_id, opts = {})
      data, _status_code, _headers = get_specific_device_cleanup_configuration_using_get_with_http_info(serial_id, opts)
      data
    end

    # Get specific device cleanup configuration.
    # @param serial_id serialId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceCleanupConfiguration, Fixnum, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def get_specific_device_cleanup_configuration_using_get_with_http_info(serial_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_specific_device_cleanup_configuration_using_get ...'
      end
      # verify the required parameter 'serial_id' is set
      if @api_client.config.client_side_validation && serial_id.nil?
        fail ArgumentError, "Missing the required parameter 'serial_id' when calling AdminApi.get_specific_device_cleanup_configuration_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/specific'

      # query parameters
      query_params = {}
      query_params[:'serialId'] = serial_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceCleanupConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_specific_device_cleanup_configuration_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get overview status.
    # @param [Hash] opts the optional parameters
    # @return [APIAdminOverview]
    def get_system_overview_using_get(opts = {})
      data, _status_code, _headers = get_system_overview_using_get_with_http_info(opts)
      data
    end

    # Get overview status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminOverview, Fixnum, Hash)>] APIAdminOverview data, response status code and response headers
    def get_system_overview_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_system_overview_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/overview'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminOverview')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_system_overview_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def get_test_run_application_file_using_get(run_id, opts = {})
      get_test_run_application_file_using_get_with_http_info(run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_application_file_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_application_file_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_application_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files/application'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_application_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [APITestRunConfig]
    def get_test_run_config_using_get(run_id, opts = {})
      data, _status_code, _headers = get_test_run_config_using_get_with_http_info(run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def get_test_run_config_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_config_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_config_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/config'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunDataAvailability]
    def get_test_run_data_availability_with_project_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_test_run_data_availability_with_project_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunDataAvailability, Fixnum, Hash)>] APITestRunDataAvailability data, response status code and response headers
    def get_test_run_data_availability_with_project_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_data_availability_with_project_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_test_run_data_availability_with_project_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_data_availability_with_project_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/data-availability'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunDataAvailability')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_data_availability_with_project_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [APITestRunDataAvailability]
    def get_test_run_data_availability_with_test_run_using_get(run_id, opts = {})
      data, _status_code, _headers = get_test_run_data_availability_with_test_run_using_get_with_http_info(run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [Array<(APITestRunDataAvailability, Fixnum, Hash)>] APITestRunDataAvailability data, response status code and response headers
    def get_test_run_data_availability_with_test_run_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_data_availability_with_test_run_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_data_availability_with_test_run_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/data-availability'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunDataAvailability')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_data_availability_with_test_run_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def get_test_run_data_file_using_get(run_id, opts = {})
      get_test_run_data_file_using_get_with_http_info(run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_data_file_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_data_file_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_data_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files/data'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_data_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def get_test_run_file_zip_using_get(run_id, opts = {})
      get_test_run_file_zip_using_get_with_http_info(run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_file_zip_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_file_zip_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_file_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_file_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483999&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @return [APIListOfAPIUserFile]
    def get_test_run_files_using_get(run_id, opts = {})
      data, _status_code, _headers = get_test_run_files_using_get_with_http_info(run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483999&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_test_run_files_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_files_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_files_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_files_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run screenshots by name.
    # @param name name
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIScreenshotExtended]
    def get_test_run_screenshots_using_get(name, project_id, run_id, opts = {})
      data, _status_code, _headers = get_test_run_screenshots_using_get_with_http_info(name, project_id, run_id, opts)
      data
    end

    # Get test run screenshots by name.
    # @param name name
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIScreenshotExtended, Fixnum, Hash)>] APIListOfAPIScreenshotExtended data, response status code and response headers
    def get_test_run_screenshots_using_get_with_http_info(name, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_screenshots_using_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.get_test_run_screenshots_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_test_run_screenshots_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_screenshots_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/screenshots'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshotExtended')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_screenshots_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run screenshots by name.
    # @param name name
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIScreenshotExtended]
    def get_test_run_screenshots_using_get1(name, run_id, opts = {})
      data, _status_code, _headers = get_test_run_screenshots_using_get1_with_http_info(name, run_id, opts)
      data
    end

    # Get test run screenshots by name.
    # @param name name
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIScreenshotExtended, Fixnum, Hash)>] APIListOfAPIScreenshotExtended data, response status code and response headers
    def get_test_run_screenshots_using_get1_with_http_info(name, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_screenshots_using_get1 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.get_test_run_screenshots_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_screenshots_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/screenshots'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshotExtended')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_screenshots_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tag.
    # @param project_id projectId
    # @param run_id runId
    # @param tag_id tagId
    # @param [Hash] opts the optional parameters
    # @return [APITag]
    def get_test_run_tag_using_get(project_id, run_id, tag_id, opts = {})
      data, _status_code, _headers = get_test_run_tag_using_get_with_http_info(project_id, run_id, tag_id, opts)
      data
    end

    # Get test run tag.
    # @param project_id projectId
    # @param run_id runId
    # @param tag_id tagId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITag, Fixnum, Hash)>] APITag data, response status code and response headers
    def get_test_run_tag_using_get_with_http_info(project_id, run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_tag_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.get_test_run_tag_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_tag_using_get"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AdminApi.get_test_run_tag_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/tags/{tagId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_tag_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tag.
    # @param run_id runId
    # @param tag_id tagId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [APITag]
    def get_test_run_tag_with_run_using_get(run_id, tag_id, opts = {})
      data, _status_code, _headers = get_test_run_tag_with_run_using_get_with_http_info(run_id, tag_id, opts)
      data
    end

    # Get test run tag.
    # @param run_id runId
    # @param tag_id tagId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(APITag, Fixnum, Hash)>] APITag data, response status code and response headers
    def get_test_run_tag_with_run_using_get_with_http_info(run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_tag_with_run_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_tag_with_run_using_get"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AdminApi.get_test_run_tag_with_run_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/tags/{tagId}'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_tag_with_run_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tags.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPITag]
    def get_test_run_tags_using_get(run_id, opts = {})
      data, _status_code, _headers = get_test_run_tags_using_get_with_http_info(run_id, opts)
      data
    end

    # Get test run tags.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPITag, Fixnum, Hash)>] APIListOfAPITag data, response status code and response headers
    def get_test_run_tags_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_tags_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_tags_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/tags'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_tags_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def get_test_run_test_file_using_get(run_id, opts = {})
      get_test_run_test_file_using_get_with_http_info(run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_test_file_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_test_file_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_test_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files/test'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_test_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [APITestRun]
    def get_test_run_using_get(run_id, opts = {})
      data, _status_code, _headers = get_test_run_using_get_with_http_info(run_id, opts)
      data
    end

    # Get test run.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def get_test_run_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_run_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.get_test_run_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_run_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134485210&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134485210&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPITestRun]
    def get_test_runs_using_get(opts = {})
      data, _status_code, _headers = get_test_runs_using_get_with_http_info(opts)
      data
    end

    # Get test runs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1576134485210&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1576134485210&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPITestRun, Fixnum, Hash)>] APIListOfAPITestRun data, response status code and response headers
    def get_test_runs_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_test_runs_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/runs'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_test_runs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def get_user_file_using_get(file_id, opts = {})
      data, _status_code, _headers = get_user_file_using_get_with_http_info(file_id, opts)
      data
    end

    # Get file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def get_user_file_using_get_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_user_file_using_get ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AdminApi.get_user_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_user_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user licenses.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1576134485400&lt;br&gt;filter&#x3D;closetime_eq_1576134485400&lt;br&gt;filter&#x3D;privateinstance_eq_true&lt;br&gt;filter&#x3D;activatetime_eq_1576134485400&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;status_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;closeTime_a&lt;br&gt;sort&#x3D;privateInstance_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;status_a
    # @return [APIListOfAPILicense]
    def get_user_licenses_using_get(user_id, opts = {})
      data, _status_code, _headers = get_user_licenses_using_get_with_http_info(user_id, opts)
      data
    end

    # Get user licenses.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1576134485400&lt;br&gt;filter&#x3D;closetime_eq_1576134485400&lt;br&gt;filter&#x3D;privateinstance_eq_true&lt;br&gt;filter&#x3D;activatetime_eq_1576134485400&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;status_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;closeTime_a&lt;br&gt;sort&#x3D;privateInstance_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;status_a
    # @return [Array<(APIListOfAPILicense, Fixnum, Hash)>] APIListOfAPILicense data, response status code and response headers
    def get_user_licenses_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_user_licenses_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.get_user_licenses_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/licenses'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPILicense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_user_licenses_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account service.
    # @param account_service_id accountServiceId
    # @param [Hash] opts the optional parameters
    # @return [APIAccountService]
    def get_user_service_using_get(account_service_id, opts = {})
      data, _status_code, _headers = get_user_service_using_get_with_http_info(account_service_id, opts)
      data
    end

    # Get account service.
    # @param account_service_id accountServiceId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountService, Fixnum, Hash)>] APIAccountService data, response status code and response headers
    def get_user_service_using_get_with_http_info(account_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_user_service_using_get ...'
      end
      # verify the required parameter 'account_service_id' is set
      if @api_client.config.client_side_validation && account_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_service_id' when calling AdminApi.get_user_service_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/account-services/{accountServiceId}'.sub('{' + 'accountServiceId' + '}', account_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccountService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_user_service_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account services.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;chargetype_eq_usage&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1576134479392&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134479392&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a
    # @return [APIListOfAPIAccountService]
    def get_user_services_using_get(user_id, opts = {})
      data, _status_code, _headers = get_user_services_using_get_with_http_info(user_id, opts)
      data
    end

    # Get account services.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;chargetype_eq_usage&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1576134479392&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134479392&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a
    # @return [Array<(APIListOfAPIAccountService, Fixnum, Hash)>] APIListOfAPIAccountService data, response status code and response headers
    def get_user_services_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_user_services_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.get_user_services_using_get"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account-services'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAccountService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_user_services_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account services.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;chargetype_eq_usage&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1576134479394&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134479394&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a
    # @return [APIListOfAPIAccountService]
    def get_user_services_using_get1(user_id, opts = {})
      data, _status_code, _headers = get_user_services_using_get1_with_http_info(user_id, opts)
      data
    end

    # Get account services.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;chargetype_eq_usage&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1576134479394&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1576134479394&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a
    # @return [Array<(APIListOfAPIAccountService, Fixnum, Hash)>] APIListOfAPIAccountService data, response status code and response headers
    def get_user_services_using_get1_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_user_services_using_get1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.get_user_services_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account/services'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAccountService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_user_services_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group user.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def get_user_using_get(access_group_id, user_id, opts = {})
      data, _status_code, _headers = get_user_using_get_with_http_info(access_group_id, user_id, opts)
      data
    end

    # Get access group user.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def get_user_using_get_with_http_info(access_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_user_using_get ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.get_user_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.get_user_using_get"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/users/{userId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_user_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group users.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @return [APIListOfAPIUser]
    def get_users_using_get(access_group_id, opts = {})
      data, _status_code, _headers = get_users_using_get_with_http_info(access_group_id, opts)
      data
    end

    # Get access group users.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @return [Array<(APIListOfAPIUser, Fixnum, Hash)>] APIListOfAPIUser data, response status code and response headers
    def get_users_using_get_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_users_using_get ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.get_users_using_get"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/users'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_users_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get users.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;country_eq_value&lt;br&gt;filter&#x3D;code_eq_value&lt;br&gt;filter&#x3D;address_eq_value&lt;br&gt;filter&#x3D;lastlaunchedtesttime_eq_1576134485789&lt;br&gt;filter&#x3D;city_eq_value&lt;br&gt;filter&#x3D;vatid_eq_value&lt;br&gt;filter&#x3D;timezone_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;lastlogintime_eq_1576134485789&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;serviceids_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;phone_eq_value&lt;br&gt;filter&#x3D;deletetime_eq_1576134485789&lt;br&gt;filter&#x3D;createtime_eq_1576134485789&lt;br&gt;filter&#x3D;accountserviceids_eq_1&lt;br&gt;filter&#x3D;organization_eq_value&lt;br&gt;filter&#x3D;ismainuser_eq_true&lt;br&gt;filter&#x3D;state_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value&lt;br&gt;filter&#x3D;status_eq_inactive
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [BOOLEAN] :only_main_users onlyMainUsers (default to false)
    # @option opts [BOOLEAN] :only_with_disabled_services onlyWithDisabledServices (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;country_a&lt;br&gt;sort&#x3D;code_a&lt;br&gt;sort&#x3D;address_a&lt;br&gt;sort&#x3D;lastLaunchedTestTime_a&lt;br&gt;sort&#x3D;city_a&lt;br&gt;sort&#x3D;vatId_a&lt;br&gt;sort&#x3D;timeZone_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;lastLoginTime_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;serviceIds_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;phone_a&lt;br&gt;sort&#x3D;deleteTime_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;accountServiceIds_a&lt;br&gt;sort&#x3D;organization_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :with_role withRole
    # @option opts [BOOLEAN] :with_roles withRoles (default to false)
    # @return [APIListOfAPIUser]
    def get_users_using_get2(opts = {})
      data, _status_code, _headers = get_users_using_get2_with_http_info(opts)
      data
    end

    # Get users.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;country_eq_value&lt;br&gt;filter&#x3D;code_eq_value&lt;br&gt;filter&#x3D;address_eq_value&lt;br&gt;filter&#x3D;lastlaunchedtesttime_eq_1576134485789&lt;br&gt;filter&#x3D;city_eq_value&lt;br&gt;filter&#x3D;vatid_eq_value&lt;br&gt;filter&#x3D;timezone_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;lastlogintime_eq_1576134485789&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;serviceids_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;phone_eq_value&lt;br&gt;filter&#x3D;deletetime_eq_1576134485789&lt;br&gt;filter&#x3D;createtime_eq_1576134485789&lt;br&gt;filter&#x3D;accountserviceids_eq_1&lt;br&gt;filter&#x3D;organization_eq_value&lt;br&gt;filter&#x3D;ismainuser_eq_true&lt;br&gt;filter&#x3D;state_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value&lt;br&gt;filter&#x3D;status_eq_inactive
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [BOOLEAN] :only_main_users onlyMainUsers
    # @option opts [BOOLEAN] :only_with_disabled_services onlyWithDisabledServices
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;country_a&lt;br&gt;sort&#x3D;code_a&lt;br&gt;sort&#x3D;address_a&lt;br&gt;sort&#x3D;lastLaunchedTestTime_a&lt;br&gt;sort&#x3D;city_a&lt;br&gt;sort&#x3D;vatId_a&lt;br&gt;sort&#x3D;timeZone_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;lastLoginTime_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;serviceIds_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;phone_a&lt;br&gt;sort&#x3D;deleteTime_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;accountServiceIds_a&lt;br&gt;sort&#x3D;organization_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :with_role withRole
    # @option opts [BOOLEAN] :with_roles withRoles
    # @return [Array<(APIListOfAPIUser, Fixnum, Hash)>] APIListOfAPIUser data, response status code and response headers
    def get_users_using_get2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_users_using_get2 ...'
      end
      # resource path
      local_var_path = '/api/v2/users'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'onlyMainUsers'] = opts[:'only_main_users'] if !opts[:'only_main_users'].nil?
      query_params[:'onlyWithDisabledServices'] = opts[:'only_with_disabled_services'] if !opts[:'only_with_disabled_services'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'withRole'] = opts[:'with_role'] if !opts[:'with_role'].nil?
      query_params[:'withRoles'] = opts[:'with_roles'] if !opts[:'with_roles'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_users_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @return [APIAccessGroup]
    def get_using_get(access_group_id, opts = {})
      data, _status_code, _headers = get_using_get_with_http_info(access_group_id, opts)
      data
    end

    # Get access group.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccessGroup, Fixnum, Hash)>] APIAccessGroup data, response status code and response headers
    def get_using_get_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_using_get ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.get_using_get"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccessGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get build executor.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIBuildExecutor]
    def get_using_get2(id, opts = {})
      data, _status_code, _headers = get_using_get2_with_http_info(id, opts)
      data
    end

    # Get build executor.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIBuildExecutor, Fixnum, Hash)>] APIBuildExecutor data, response status code and response headers
    def get_using_get2_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_using_get2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/admin/build-executors/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIBuildExecutor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get country vat rate.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APICountryVatRate]
    def get_using_get3(id, opts = {})
      data, _status_code, _headers = get_using_get3_with_http_info(id, opts)
      data
    end

    # Get country vat rate.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APICountryVatRate, Fixnum, Hash)>] APICountryVatRate data, response status code and response headers
    def get_using_get3_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_using_get3 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_using_get3"
      end
      # resource path
      local_var_path = '/api/v2/admin/country-vat-rates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APICountryVatRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark billing period as paid.
    # @param billing_period_id billingPeriodId
    # @param [Hash] opts the optional parameters
    # @return [APIBillingPeriod]
    def mark_billing_period_as_paid_using_post(billing_period_id, opts = {})
      data, _status_code, _headers = mark_billing_period_as_paid_using_post_with_http_info(billing_period_id, opts)
      data
    end

    # Mark billing period as paid.
    # @param billing_period_id billingPeriodId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIBillingPeriod, Fixnum, Hash)>] APIBillingPeriod data, response status code and response headers
    def mark_billing_period_as_paid_using_post_with_http_info(billing_period_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.mark_billing_period_as_paid_using_post ...'
      end
      # verify the required parameter 'billing_period_id' is set
      if @api_client.config.client_side_validation && billing_period_id.nil?
        fail ArgumentError, "Missing the required parameter 'billing_period_id' when calling AdminApi.mark_billing_period_as_paid_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/billing-periods/{billingPeriodId}'.sub('{' + 'billingPeriodId' + '}', billing_period_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIBillingPeriod')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#mark_billing_period_as_paid_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Release device session.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def release_device_session_using_post(device_session_id, opts = {})
      data, _status_code, _headers = release_device_session_using_post_with_http_info(device_session_id, opts)
      data
    end

    # Release device session.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def release_device_session_using_post_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.release_device_session_using_post ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.release_device_session_using_post"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/release'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#release_device_session_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate build logs zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIUserFile]
    def request_project_test_run_build_logs_using_post(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_build_logs_using_post_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate build logs zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_build_logs_using_post_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_project_test_run_build_logs_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.request_project_test_run_build_logs_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_project_test_run_build_logs_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/build-logs.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_project_test_run_build_logs_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate files zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIUserFile]
    def request_project_test_run_files_using_post(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_files_using_post_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate files zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_files_using_post_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_project_test_run_files_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.request_project_test_run_files_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_project_test_run_files_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_project_test_run_files_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate logs zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIUserFile]
    def request_project_test_run_logs_using_post(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_logs_using_post_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate logs zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_logs_using_post_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_project_test_run_logs_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.request_project_test_run_logs_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_project_test_run_logs_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/logs.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_project_test_run_logs_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate performance zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIUserFile]
    def request_project_test_run_performance_using_post(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_performance_using_post_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate performance zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_performance_using_post_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_project_test_run_performance_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.request_project_test_run_performance_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_project_test_run_performance_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/performance.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_project_test_run_performance_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate screenshot zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIUserFile]
    def request_project_test_run_screenshots_using_post(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_screenshots_using_post_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate screenshot zip.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_screenshots_using_post_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_project_test_run_screenshots_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.request_project_test_run_screenshots_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_project_test_run_screenshots_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/screenshots.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_project_test_run_screenshots_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate build logs zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [APIUserFile]
    def request_test_run_build_logs_using_post(run_id, opts = {})
      data, _status_code, _headers = request_test_run_build_logs_using_post_with_http_info(run_id, opts)
      data
    end

    # Generate build logs zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_build_logs_using_post_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_test_run_build_logs_using_post ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_test_run_build_logs_using_post"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/build-logs.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_test_run_build_logs_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate files zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [APIUserFile]
    def request_test_run_files_using_post(run_id, opts = {})
      data, _status_code, _headers = request_test_run_files_using_post_with_http_info(run_id, opts)
      data
    end

    # Generate files zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_files_using_post_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_test_run_files_using_post ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_test_run_files_using_post"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_test_run_files_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate logs zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [APIUserFile]
    def request_test_run_logs_using_post(run_id, opts = {})
      data, _status_code, _headers = request_test_run_logs_using_post_with_http_info(run_id, opts)
      data
    end

    # Generate logs zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_logs_using_post_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_test_run_logs_using_post ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_test_run_logs_using_post"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/logs.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_test_run_logs_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate performance zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [APIUserFile]
    def request_test_run_performance_using_post(run_id, opts = {})
      data, _status_code, _headers = request_test_run_performance_using_post_with_http_info(run_id, opts)
      data
    end

    # Generate performance zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_performance_using_post_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_test_run_performance_using_post ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_test_run_performance_using_post"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/performance.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_test_run_performance_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate screenshot zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [APIUserFile]
    def request_test_run_screenshots_using_post(run_id, opts = {})
      data, _status_code, _headers = request_test_run_screenshots_using_post_with_http_info(run_id, opts)
      data
    end

    # Generate screenshot zip.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_screenshots_using_post_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_test_run_screenshots_using_post ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.request_test_run_screenshots_using_post"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/screenshots.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_test_run_screenshots_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate zipped screenshots file.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def request_user_test_run_screenshots_using_post(device_session_id, opts = {})
      data, _status_code, _headers = request_user_test_run_screenshots_using_post_with_http_info(device_session_id, opts)
      data
    end

    # Generate zipped screenshots file.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_user_test_run_screenshots_using_post_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.request_user_test_run_screenshots_using_post ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.request_user_test_run_screenshots_using_post"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/screenshots/screenshots.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#request_user_test_run_screenshots_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resend activation email.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def resend_activation_email_using_post(user_id, opts = {})
      data, _status_code, _headers = resend_activation_email_using_post_with_http_info(user_id, opts)
      data
    end

    # Resend activation email.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def resend_activation_email_using_post_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.resend_activation_email_using_post ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.resend_activation_email_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/resend-activation'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#resend_activation_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resend activation email to additional user.
    # @param additional_user_id additionalUserId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def resend_activation_email_using_post1(additional_user_id, user_id, opts = {})
      data, _status_code, _headers = resend_activation_email_using_post1_with_http_info(additional_user_id, user_id, opts)
      data
    end

    # Resend activation email to additional user.
    # @param additional_user_id additionalUserId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def resend_activation_email_using_post1_with_http_info(additional_user_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.resend_activation_email_using_post1 ...'
      end
      # verify the required parameter 'additional_user_id' is set
      if @api_client.config.client_side_validation && additional_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'additional_user_id' when calling AdminApi.resend_activation_email_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.resend_activation_email_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account/additional-users/{additionalUserId}/resend-activation'.sub('{' + 'additionalUserId' + '}', additional_user_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#resend_activation_email_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resend email.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIAdminEmail]
    def resend_email_using_post(id, opts = {})
      data, _status_code, _headers = resend_email_using_post_with_http_info(id, opts)
      data
    end

    # Resend email.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminEmail, Fixnum, Hash)>] APIAdminEmail data, response status code and response headers
    def resend_email_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.resend_email_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.resend_email_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/emails/{id}/resend'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminEmail')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#resend_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resend license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def resend_license_using_post(id, opts = {})
      data, _status_code, _headers = resend_license_using_post_with_http_info(id, opts)
      data
    end

    # Resend license.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Fixnum, Hash)>] APILicense data, response status code and response headers
    def resend_license_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.resend_license_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.resend_license_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}/resend'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APILicense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#resend_license_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry device session.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def retry_device_session_using_post(device_session_id, project_id, run_id, opts = {})
      data, _status_code, _headers = retry_device_session_using_post_with_http_info(device_session_id, project_id, run_id, opts)
      data
    end

    # Retry device session.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def retry_device_session_using_post_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.retry_device_session_using_post ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.retry_device_session_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.retry_device_session_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.retry_device_session_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/retry'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#retry_device_session_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry test run or its device sessions.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIAdminTestRun]
    def retry_test_run_using_post(run_id, opts = {})
      data, _status_code, _headers = retry_test_run_using_post_with_http_info(run_id, opts)
      data
    end

    # Retry test run or its device sessions.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIAdminTestRun, Fixnum, Hash)>] APIAdminTestRun data, response status code and response headers
    def retry_test_run_using_post_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.retry_test_run_using_post ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.retry_test_run_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}/retry'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminTestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#retry_test_run_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry test run or its device sessions.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APITestRun]
    def retry_test_run_with_project_using_post(project_id, run_id, opts = {})
      data, _status_code, _headers = retry_test_run_with_project_using_post_with_http_info(project_id, run_id, opts)
      data
    end

    # Retry test run or its device sessions.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def retry_test_run_with_project_using_post_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.retry_test_run_with_project_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.retry_test_run_with_project_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.retry_test_run_with_project_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/retry'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#retry_test_run_with_project_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry test run or its device sessions.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @return [APITestRun]
    def retry_test_run_with_test_run_using_post(run_id, opts = {})
      data, _status_code, _headers = retry_test_run_with_test_run_using_post_with_http_info(run_id, opts)
      data
    end

    # Retry test run or its device sessions.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @option opts [Integer] :project_id projectId
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def retry_test_run_with_test_run_using_post_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.retry_test_run_with_test_run_using_post ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.retry_test_run_with_test_run_using_post"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/retry'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#retry_test_run_with_test_run_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rollback framework's config.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIProjectJobConfig]
    def rollback_framework_config_using_delete(id, opts = {})
      data, _status_code, _headers = rollback_framework_config_using_delete_with_http_info(id, opts)
      data
    end

    # Rollback framework&#39;s config.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProjectJobConfig, Fixnum, Hash)>] APIProjectJobConfig data, response status code and response headers
    def rollback_framework_config_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.rollback_framework_config_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.rollback_framework_config_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}/config'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProjectJobConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#rollback_framework_config_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [Integer] :app_file_id appFileId
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [Integer] :data_file_id dataFileId
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :device_name_pattern deviceNamePattern
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :name name
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :test_file_id testFileId
    # @option opts [Integer] :test_run_id testRunId
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [Array<Integer>] :used_device_ids usedDeviceIds[]
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [APITestRun]
    def run_project_using_post(project_id, opts = {})
      data, _status_code, _headers = run_project_using_post_with_http_info(project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [Integer] :app_file_id appFileId
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [Integer] :data_file_id dataFileId
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :device_name_pattern deviceNamePattern
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :name name
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :test_file_id testFileId
    # @option opts [Integer] :test_run_id testRunId
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [Array<Integer>] :used_device_ids usedDeviceIds[]
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def run_project_using_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.run_project_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.run_project_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'limitation_type'] && !['PACKAGE', 'CLASS'].include?(opts[:'limitation_type'])
        fail ArgumentError, 'invalid value for "limitation_type", must be one of PACKAGE, CLASS'
      end
      if @api_client.config.client_side_validation && opts[:'scheduler'] && !['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'].include?(opts[:'scheduler'])
        fail ArgumentError, 'invalid value for "scheduler", must be one of PARALLEL, SERIAL, SINGLE, ALL_INSTANCES'
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'appCrawlerRun'] = opts[:'app_crawler_run'] if !opts[:'app_crawler_run'].nil?
      query_params[:'appFileId'] = opts[:'app_file_id'] if !opts[:'app_file_id'].nil?
      query_params[:'appiumBrokerAddress'] = opts[:'appium_broker_address'] if !opts[:'appium_broker_address'].nil?
      query_params[:'applicationPassword'] = opts[:'application_password'] if !opts[:'application_password'].nil?
      query_params[:'applicationUsername'] = opts[:'application_username'] if !opts[:'application_username'].nil?
      query_params[:'dataFileId'] = opts[:'data_file_id'] if !opts[:'data_file_id'].nil?
      query_params[:'deviceLanguageCode'] = opts[:'device_language_code'] if !opts[:'device_language_code'].nil?
      query_params[:'deviceNamePattern'] = opts[:'device_name_pattern'] if !opts[:'device_name_pattern'].nil?
      query_params[:'hookURL'] = opts[:'hook_url'] if !opts[:'hook_url'].nil?
      query_params[:'instrumentationRunner'] = opts[:'instrumentation_runner'] if !opts[:'instrumentation_runner'].nil?
      query_params[:'limitationType'] = opts[:'limitation_type'] if !opts[:'limitation_type'].nil?
      query_params[:'limitationValue'] = opts[:'limitation_value'] if !opts[:'limitation_value'].nil?
      query_params[:'maxAutoRetriesCount'] = opts[:'max_auto_retries_count'] if !opts[:'max_auto_retries_count'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'scheduler'] = opts[:'scheduler'] if !opts[:'scheduler'].nil?
      query_params[:'screenshotDir'] = opts[:'screenshot_dir'] if !opts[:'screenshot_dir'].nil?
      query_params[:'testFileId'] = opts[:'test_file_id'] if !opts[:'test_file_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'usedDeviceGroupId'] = opts[:'used_device_group_id'] if !opts[:'used_device_group_id'].nil?
      query_params[:'usedDeviceIds[]'] = @api_client.build_collection_param(opts[:'used_device_ids'], :multi) if !opts[:'used_device_ids'].nil?
      query_params[:'videoRecordingEnabled'] = opts[:'video_recording_enabled'] if !opts[:'video_recording_enabled'].nil?
      query_params[:'withAnnotation'] = opts[:'with_annotation'] if !opts[:'with_annotation'].nil?
      query_params[:'withoutAnnotation'] = opts[:'without_annotation'] if !opts[:'without_annotation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#run_project_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run test run.
    # @param configuration configuration
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def run_project_using_post1(configuration, opts = {})
      data, _status_code, _headers = run_project_using_post1_with_http_info(configuration, opts)
      data
    end

    # Run test run.
    # @param configuration configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def run_project_using_post1_with_http_info(configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.run_project_using_post1 ...'
      end
      # verify the required parameter 'configuration' is set
      if @api_client.config.client_side_validation && configuration.nil?
        fail ArgumentError, "Missing the required parameter 'configuration' when calling AdminApi.run_project_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/runs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration)
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#run_project_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change billable status for device session.
    # @param billable billable
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def set_billable_flag_using_post(billable, device_session_id, opts = {})
      data, _status_code, _headers = set_billable_flag_using_post_with_http_info(billable, device_session_id, opts)
      data
    end

    # Change billable status for device session.
    # @param billable billable
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def set_billable_flag_using_post_with_http_info(billable, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.set_billable_flag_using_post ...'
      end
      # verify the required parameter 'billable' is set
      if @api_client.config.client_side_validation && billable.nil?
        fail ArgumentError, "Missing the required parameter 'billable' when calling AdminApi.set_billable_flag_using_post"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AdminApi.set_billable_flag_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-sessions/{deviceSessionId}/changebillable'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'billable'] = billable

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#set_billable_flag_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change billable status.
    # @param billable billable
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIAdminTestRun]
    def set_billable_flag_using_post1(billable, run_id, opts = {})
      data, _status_code, _headers = set_billable_flag_using_post1_with_http_info(billable, run_id, opts)
      data
    end

    # Change billable status.
    # @param billable billable
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminTestRun, Fixnum, Hash)>] APIAdminTestRun data, response status code and response headers
    def set_billable_flag_using_post1_with_http_info(billable, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.set_billable_flag_using_post1 ...'
      end
      # verify the required parameter 'billable' is set
      if @api_client.config.client_side_validation && billable.nil?
        fail ArgumentError, "Missing the required parameter 'billable' when calling AdminApi.set_billable_flag_using_post1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.set_billable_flag_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}/changebillable'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'billable'] = billable

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminTestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#set_billable_flag_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change priority.
    # @param priority priority
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIAdminTestRun]
    def set_priority_using_post(priority, run_id, opts = {})
      data, _status_code, _headers = set_priority_using_post_with_http_info(priority, run_id, opts)
      data
    end

    # Change priority.
    # @param priority priority
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminTestRun, Fixnum, Hash)>] APIAdminTestRun data, response status code and response headers
    def set_priority_using_post_with_http_info(priority, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.set_priority_using_post ...'
      end
      # verify the required parameter 'priority' is set
      if @api_client.config.client_side_validation && priority.nil?
        fail ArgumentError, "Missing the required parameter 'priority' when calling AdminApi.set_priority_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.set_priority_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}/changepriority'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'priority'] = priority

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminTestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#set_priority_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [APIListOfAPISharedResource]
    def share_device_group_using_post(device_group_id, opts = {})
      data, _status_code, _headers = share_device_group_using_post_with_http_info(device_group_id, opts)
      data
    end

    # Share device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [Array<(APIListOfAPISharedResource, Fixnum, Hash)>] APIListOfAPISharedResource data, response status code and response headers
    def share_device_group_using_post_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.share_device_group_using_post ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.share_device_group_using_post"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/share'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#share_device_group_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [APIListOfAPISharedResource]
    def share_file_using_post(file_id, opts = {})
      data, _status_code, _headers = share_file_using_post_with_http_info(file_id, opts)
      data
    end

    # Share file.
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [Array<(APIListOfAPISharedResource, Fixnum, Hash)>] APIListOfAPISharedResource data, response status code and response headers
    def share_file_using_post_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.share_file_using_post ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AdminApi.share_file_using_post"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/share'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#share_file_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [APIListOfAPISharedResource]
    def share_project_using_post(project_id, opts = {})
      data, _status_code, _headers = share_project_using_post_with_http_info(project_id, opts)
      data
    end

    # Share project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [Array<(APIListOfAPISharedResource, Fixnum, Hash)>] APIListOfAPISharedResource data, response status code and response headers
    def share_project_using_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.share_project_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.share_project_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/share'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#share_project_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test notifications basing on notification plan by sending it to admin.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APINotificationPlan]
    def test_notification_plan_using_post(id, opts = {})
      data, _status_code, _headers = test_notification_plan_using_post_with_http_info(id, opts)
      data
    end

    # Test notifications basing on notification plan by sending it to admin.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APINotificationPlan, Fixnum, Hash)>] APINotificationPlan data, response status code and response headers
    def test_notification_plan_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.test_notification_plan_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.test_notification_plan_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans/{id}/test'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APINotificationPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#test_notification_plan_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unarchive project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unarchive_project_using_post(project_id, opts = {})
      unarchive_project_using_post_with_http_info(project_id, opts)
      nil
    end

    # Unarchive project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unarchive_project_using_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.unarchive_project_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.unarchive_project_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/unarchive'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#unarchive_project_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update label.
    # @param group_id groupId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :display_name displayName
    # @option opts [String] :name name
    # @return [APIDeviceProperty]
    def update_api_label_using_post(group_id, label_id, opts = {})
      data, _status_code, _headers = update_api_label_using_post_with_http_info(group_id, label_id, opts)
      data
    end

    # Update label.
    # @param group_id groupId
    # @param label_id labelId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :display_name displayName
    # @option opts [String] :name name
    # @return [Array<(APIDeviceProperty, Fixnum, Hash)>] APIDeviceProperty data, response status code and response headers
    def update_api_label_using_post_with_http_info(group_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_api_label_using_post ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdminApi.update_api_label_using_post"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AdminApi.update_api_label_using_post"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}/labels/{labelId}'.sub('{' + 'groupId' + '}', group_id.to_s).sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_api_label_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update cluster.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled enabled
    # @option opts [String] :name name
    # @option opts [String] :url url
    # @return [APICluster]
    def update_cluster_using_post(id, opts = {})
      data, _status_code, _headers = update_cluster_using_post_with_http_info(id, opts)
      data
    end

    # Update cluster.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled enabled
    # @option opts [String] :name name
    # @option opts [String] :url url
    # @return [Array<(APICluster, Fixnum, Hash)>] APICluster data, response status code and response headers
    def update_cluster_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_cluster_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.update_cluster_using_post"
      end
      # resource path
      local_var_path = '/api/v2/clusters/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APICluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_cluster_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device cleanup configuration.
    # @param content content
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :discriminator discriminator
    # @option opts [BOOLEAN] :enabled enabled (default to true)
    # @return [APIDeviceCleanupConfiguration]
    def update_device_cleanup_configuration_using_post(content, id, opts = {})
      data, _status_code, _headers = update_device_cleanup_configuration_using_post_with_http_info(content, id, opts)
      data
    end

    # Update device cleanup configuration.
    # @param content content
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :discriminator discriminator
    # @option opts [BOOLEAN] :enabled enabled
    # @return [Array<(APIDeviceCleanupConfiguration, Fixnum, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def update_device_cleanup_configuration_using_post_with_http_info(content, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_device_cleanup_configuration_using_post ...'
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling AdminApi.update_device_cleanup_configuration_using_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.update_device_cleanup_configuration_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'content'] = content
      query_params[:'discriminator'] = opts[:'discriminator'] if !opts[:'discriminator'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceCleanupConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_device_cleanup_configuration_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device model.
    # @param device_model_id deviceModelId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :api_level apiLevel
    # @option opts [Integer] :credits_price creditsPrice
    # @option opts [BOOLEAN] :enabled enabled
    # @option opts [String] :name name
    # @option opts [String] :release_version releaseVersion
    # @option opts [Integer] :type_id typeId
    # @return [APIDevice]
    def update_device_model_using_post(device_model_id, opts = {})
      data, _status_code, _headers = update_device_model_using_post_with_http_info(device_model_id, opts)
      data
    end

    # Update device model.
    # @param device_model_id deviceModelId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :api_level apiLevel
    # @option opts [Integer] :credits_price creditsPrice
    # @option opts [BOOLEAN] :enabled enabled
    # @option opts [String] :name name
    # @option opts [String] :release_version releaseVersion
    # @option opts [Integer] :type_id typeId
    # @return [Array<(APIDevice, Fixnum, Hash)>] APIDevice data, response status code and response headers
    def update_device_model_using_post_with_http_info(device_model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_device_model_using_post ...'
      end
      # verify the required parameter 'device_model_id' is set
      if @api_client.config.client_side_validation && device_model_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_model_id' when calling AdminApi.update_device_model_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-models/{deviceModelId}'.sub('{' + 'deviceModelId' + '}', device_model_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apiLevel'] = opts[:'api_level'] if !opts[:'api_level'].nil?
      query_params[:'creditsPrice'] = opts[:'credits_price'] if !opts[:'credits_price'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'releaseVersion'] = opts[:'release_version'] if !opts[:'release_version'].nil?
      query_params[:'typeId'] = opts[:'type_id'] if !opts[:'type_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_device_model_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device picker filters.
    # @param device_picker devicePicker
    # @param [Hash] opts the optional parameters
    # @return [APIDevicePicker]
    def update_device_picker_using_post(device_picker, opts = {})
      data, _status_code, _headers = update_device_picker_using_post_with_http_info(device_picker, opts)
      data
    end

    # Update device picker filters.
    # @param device_picker devicePicker
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDevicePicker, Fixnum, Hash)>] APIDevicePicker data, response status code and response headers
    def update_device_picker_using_post_with_http_info(device_picker, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_device_picker_using_post ...'
      end
      # verify the required parameter 'device_picker' is set
      if @api_client.config.client_side_validation && device_picker.nil?
        fail ArgumentError, "Missing the required parameter 'device_picker' when calling AdminApi.update_device_picker_using_post"
      end
      # resource path
      local_var_path = '/api/v2/devices/filters'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(device_picker)
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDevicePicker')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_device_picker_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device frame.
    # @param device_type_id deviceTypeId
    # @param image_height imageHeight
    # @param image_left imageLeft
    # @param image_top imageTop
    # @param image_width imageWidth
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :frame_extra_width frameExtraWidth
    # @return [APIAdminDeviceType]
    def update_device_type_using_post(device_type_id, image_height, image_left, image_top, image_width, opts = {})
      data, _status_code, _headers = update_device_type_using_post_with_http_info(device_type_id, image_height, image_left, image_top, image_width, opts)
      data
    end

    # Update device frame.
    # @param device_type_id deviceTypeId
    # @param image_height imageHeight
    # @param image_left imageLeft
    # @param image_top imageTop
    # @param image_width imageWidth
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :frame_extra_width frameExtraWidth
    # @return [Array<(APIAdminDeviceType, Fixnum, Hash)>] APIAdminDeviceType data, response status code and response headers
    def update_device_type_using_post_with_http_info(device_type_id, image_height, image_left, image_top, image_width, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_device_type_using_post ...'
      end
      # verify the required parameter 'device_type_id' is set
      if @api_client.config.client_side_validation && device_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_type_id' when calling AdminApi.update_device_type_using_post"
      end
      # verify the required parameter 'image_height' is set
      if @api_client.config.client_side_validation && image_height.nil?
        fail ArgumentError, "Missing the required parameter 'image_height' when calling AdminApi.update_device_type_using_post"
      end
      # verify the required parameter 'image_left' is set
      if @api_client.config.client_side_validation && image_left.nil?
        fail ArgumentError, "Missing the required parameter 'image_left' when calling AdminApi.update_device_type_using_post"
      end
      # verify the required parameter 'image_top' is set
      if @api_client.config.client_side_validation && image_top.nil?
        fail ArgumentError, "Missing the required parameter 'image_top' when calling AdminApi.update_device_type_using_post"
      end
      # verify the required parameter 'image_width' is set
      if @api_client.config.client_side_validation && image_width.nil?
        fail ArgumentError, "Missing the required parameter 'image_width' when calling AdminApi.update_device_type_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-types/{deviceTypeId}'.sub('{' + 'deviceTypeId' + '}', device_type_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageHeight'] = image_height
      query_params[:'imageLeft'] = image_left
      query_params[:'imageTop'] = image_top
      query_params[:'imageWidth'] = image_width
      query_params[:'frameExtraWidth'] = opts[:'frame_extra_width'] if !opts[:'frame_extra_width'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminDeviceType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_device_type_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id accountId
    # @option opts [Integer] :api_level apiLevel
    # @option opts [BOOLEAN] :enabled enabled
    # @option opts [String] :init_step initStep
    # @option opts [String] :ip_address ipAddress
    # @option opts [String] :name name
    # @option opts [String] :release_version releaseVersion
    # @option opts [String] :serial_id serialId
    # @option opts [String] :unlock_gesture unlockGesture
    # @return [APIAdminDevice]
    def update_device_using_post(device_id, opts = {})
      data, _status_code, _headers = update_device_using_post_with_http_info(device_id, opts)
      data
    end

    # Update device.
    # @param device_id deviceId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id accountId
    # @option opts [Integer] :api_level apiLevel
    # @option opts [BOOLEAN] :enabled enabled
    # @option opts [String] :init_step initStep
    # @option opts [String] :ip_address ipAddress
    # @option opts [String] :name name
    # @option opts [String] :release_version releaseVersion
    # @option opts [String] :serial_id serialId
    # @option opts [String] :unlock_gesture unlockGesture
    # @return [Array<(APIAdminDevice, Fixnum, Hash)>] APIAdminDevice data, response status code and response headers
    def update_device_using_post_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_device_using_post ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AdminApi.update_device_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'init_step'] && !['SKIP', 'REBOOT', 'REBOOT_WITH_UNLOCK', 'UNLOCK_ONLY'].include?(opts[:'init_step'])
        fail ArgumentError, 'invalid value for "init_step", must be one of SKIP, REBOOT, REBOOT_WITH_UNLOCK, UNLOCK_ONLY'
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'apiLevel'] = opts[:'api_level'] if !opts[:'api_level'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'initStep'] = opts[:'init_step'] if !opts[:'init_step'].nil?
      query_params[:'ipAddress'] = opts[:'ip_address'] if !opts[:'ip_address'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'releaseVersion'] = opts[:'release_version'] if !opts[:'release_version'].nil?
      query_params[:'serialId'] = opts[:'serial_id'] if !opts[:'serial_id'].nil?
      query_params[:'unlockGesture'] = opts[:'unlock_gesture'] if !opts[:'unlock_gesture'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAdminDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_device_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update file name.
    # @param file_id fileId
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def update_file_name_using_post(file_id, name, opts = {})
      data, _status_code, _headers = update_file_name_using_post_with_http_info(file_id, name, opts)
      data
    end

    # Update file name.
    # @param file_id fileId
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def update_file_name_using_post_with_http_info(file_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_file_name_using_post ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AdminApi.update_file_name_using_post"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.update_file_name_using_post"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_file_name_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update framework's config.
    # @param content content
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIProjectJobConfig]
    def update_framework_config_using_post(content, id, opts = {})
      data, _status_code, _headers = update_framework_config_using_post_with_http_info(content, id, opts)
      data
    end

    # Update framework&#39;s config.
    # @param content content
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProjectJobConfig, Fixnum, Hash)>] APIProjectJobConfig data, response status code and response headers
    def update_framework_config_using_post_with_http_info(content, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_framework_config_using_post ...'
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling AdminApi.update_framework_config_using_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.update_framework_config_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}/config'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'content'] = content

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProjectJobConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_framework_config_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update framework.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :add_label_to_devices addLabelToDevices (default to false)
    # @option opts [BOOLEAN] :can_run_from_ui canRunFromUI
    # @option opts [String] :description description
    # @option opts [String] :documentation_url documentationUrl
    # @option opts [BOOLEAN] :for_projects forProjects
    # @option opts [String] :icon icon
    # @option opts [Integer] :label_id labelId
    # @option opts [String] :name name
    # @option opts [String] :os_type osType
    # @option opts [String] :required_app_extensions requiredAppExtensions
    # @option opts [String] :required_test_extensions requiredTestExtensions
    # @option opts [String] :required_test_file_tags requiredTestFileTags
    # @option opts [BOOLEAN] :retryable retryable
    # @option opts [Array<Integer>] :role_ids roleIds[]
    # @option opts [Integer] :sample_app_id sampleAppId
    # @option opts [Integer] :sample_test_id sampleTestId
    # @option opts [BOOLEAN] :skip_older_sdk skipOlderSdk
    # @option opts [BOOLEAN] :skip_queue skipQueue
    # @option opts [String] :type type
    # @return [APIFramework]
    def update_framework_using_post(id, opts = {})
      data, _status_code, _headers = update_framework_using_post_with_http_info(id, opts)
      data
    end

    # Update framework.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :add_label_to_devices addLabelToDevices
    # @option opts [BOOLEAN] :can_run_from_ui canRunFromUI
    # @option opts [String] :description description
    # @option opts [String] :documentation_url documentationUrl
    # @option opts [BOOLEAN] :for_projects forProjects
    # @option opts [String] :icon icon
    # @option opts [Integer] :label_id labelId
    # @option opts [String] :name name
    # @option opts [String] :os_type osType
    # @option opts [String] :required_app_extensions requiredAppExtensions
    # @option opts [String] :required_test_extensions requiredTestExtensions
    # @option opts [String] :required_test_file_tags requiredTestFileTags
    # @option opts [BOOLEAN] :retryable retryable
    # @option opts [Array<Integer>] :role_ids roleIds[]
    # @option opts [Integer] :sample_app_id sampleAppId
    # @option opts [Integer] :sample_test_id sampleTestId
    # @option opts [BOOLEAN] :skip_older_sdk skipOlderSdk
    # @option opts [BOOLEAN] :skip_queue skipQueue
    # @option opts [String] :type type
    # @return [Array<(APIFramework, Fixnum, Hash)>] APIFramework data, response status code and response headers
    def update_framework_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_framework_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.update_framework_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'os_type'] && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(opts[:'os_type'])
        fail ArgumentError, 'invalid value for "os_type", must be one of IOS, ANDROID, DESKTOP, UNDEFINED'
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'addLabelToDevices'] = opts[:'add_label_to_devices'] if !opts[:'add_label_to_devices'].nil?
      query_params[:'canRunFromUI'] = opts[:'can_run_from_ui'] if !opts[:'can_run_from_ui'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'documentationUrl'] = opts[:'documentation_url'] if !opts[:'documentation_url'].nil?
      query_params[:'forProjects'] = opts[:'for_projects'] if !opts[:'for_projects'].nil?
      query_params[:'icon'] = opts[:'icon'] if !opts[:'icon'].nil?
      query_params[:'labelId'] = opts[:'label_id'] if !opts[:'label_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'osType'] = opts[:'os_type'] if !opts[:'os_type'].nil?
      query_params[:'requiredAppExtensions'] = opts[:'required_app_extensions'] if !opts[:'required_app_extensions'].nil?
      query_params[:'requiredTestExtensions'] = opts[:'required_test_extensions'] if !opts[:'required_test_extensions'].nil?
      query_params[:'requiredTestFileTags'] = opts[:'required_test_file_tags'] if !opts[:'required_test_file_tags'].nil?
      query_params[:'retryable'] = opts[:'retryable'] if !opts[:'retryable'].nil?
      query_params[:'roleIds[]'] = @api_client.build_collection_param(opts[:'role_ids'], :multi) if !opts[:'role_ids'].nil?
      query_params[:'sampleAppId'] = opts[:'sample_app_id'] if !opts[:'sample_app_id'].nil?
      query_params[:'sampleTestId'] = opts[:'sample_test_id'] if !opts[:'sample_test_id'].nil?
      query_params[:'skipOlderSdk'] = opts[:'skip_older_sdk'] if !opts[:'skip_older_sdk'].nil?
      query_params[:'skipQueue'] = opts[:'skip_queue'] if !opts[:'skip_queue'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIFramework')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_framework_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update job.
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content content
    # @option opts [String] :name name
    # @return [APIPipelineJob]
    def update_job_using_post(job_id, opts = {})
      data, _status_code, _headers = update_job_using_post_with_http_info(job_id, opts)
      data
    end

    # Update job.
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content content
    # @option opts [String] :name name
    # @return [Array<(APIPipelineJob, Fixnum, Hash)>] APIPipelineJob data, response status code and response headers
    def update_job_using_post_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_job_using_post ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AdminApi.update_job_using_post"
      end
      # resource path
      local_var_path = '/api/v2/jobs/{jobId}'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineJob')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_job_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update label group.
    # @param group_id groupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :display_name displayName
    # @option opts [String] :name name
    # @return [APILabelGroup]
    def update_label_group_using_post(group_id, opts = {})
      data, _status_code, _headers = update_label_group_using_post_with_http_info(group_id, opts)
      data
    end

    # Update label group.
    # @param group_id groupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :display_name displayName
    # @option opts [String] :name name
    # @return [Array<(APILabelGroup, Fixnum, Hash)>] APILabelGroup data, response status code and response headers
    def update_label_group_using_post_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_label_group_using_post ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdminApi.update_label_group_using_post"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}'.sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APILabelGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_label_group_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @option opts [String] :notification_content notificationContent
    # @option opts [String] :notification_subject notificationSubject
    # @option opts [String] :scope scope
    # @return [APINotificationPlan]
    def update_notification_plan_using_post(id, opts = {})
      data, _status_code, _headers = update_notification_plan_using_post_with_http_info(id, opts)
      data
    end

    # Update notification plan.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @option opts [String] :notification_content notificationContent
    # @option opts [String] :notification_subject notificationSubject
    # @option opts [String] :scope scope
    # @return [Array<(APINotificationPlan, Fixnum, Hash)>] APINotificationPlan data, response status code and response headers
    def update_notification_plan_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_notification_plan_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.update_notification_plan_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['ALL', 'TEST_RUN', 'TEST_RUN_FAILURE', 'TEST_RUN_SUCCEEDED', 'MAINTENANCE', 'MAINTENANCE_RELEASE', 'CUSTOM', 'NEWS', 'SYSTEM', 'CHECK', 'PLAN_LIMIT_REACHED', 'PLAN_INVOICE'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of ALL, TEST_RUN, TEST_RUN_FAILURE, TEST_RUN_SUCCEEDED, MAINTENANCE, MAINTENANCE_RELEASE, CUSTOM, NEWS, SYSTEM, CHECK, PLAN_LIMIT_REACHED, PLAN_INVOICE'
      end
      # resource path
      local_var_path = '/api/v2/admin/notification-plans/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'notificationContent'] = opts[:'notification_content'] if !opts[:'notification_content'].nil?
      query_params[:'notificationSubject'] = opts[:'notification_subject'] if !opts[:'notification_subject'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APINotificationPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_notification_plan_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [APITestRunConfig]
    def update_project_config_using_post(project_id, opts = {})
      data, _status_code, _headers = update_project_config_using_post_with_http_info(project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def update_project_config_using_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_project_config_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.update_project_config_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'limitation_type'] && !['PACKAGE', 'CLASS'].include?(opts[:'limitation_type'])
        fail ArgumentError, 'invalid value for "limitation_type", must be one of PACKAGE, CLASS'
      end
      if @api_client.config.client_side_validation && opts[:'scheduler'] && !['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'].include?(opts[:'scheduler'])
        fail ArgumentError, 'invalid value for "scheduler", must be one of PARALLEL, SERIAL, SINGLE, ALL_INSTANCES'
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/config'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'appCrawlerRun'] = opts[:'app_crawler_run'] if !opts[:'app_crawler_run'].nil?
      query_params[:'appiumBrokerAddress'] = opts[:'appium_broker_address'] if !opts[:'appium_broker_address'].nil?
      query_params[:'applicationPassword'] = opts[:'application_password'] if !opts[:'application_password'].nil?
      query_params[:'applicationUsername'] = opts[:'application_username'] if !opts[:'application_username'].nil?
      query_params[:'deviceLanguageCode'] = opts[:'device_language_code'] if !opts[:'device_language_code'].nil?
      query_params[:'hookURL'] = opts[:'hook_url'] if !opts[:'hook_url'].nil?
      query_params[:'instrumentationRunner'] = opts[:'instrumentation_runner'] if !opts[:'instrumentation_runner'].nil?
      query_params[:'limitationType'] = opts[:'limitation_type'] if !opts[:'limitation_type'].nil?
      query_params[:'limitationValue'] = opts[:'limitation_value'] if !opts[:'limitation_value'].nil?
      query_params[:'maxAutoRetriesCount'] = opts[:'max_auto_retries_count'] if !opts[:'max_auto_retries_count'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'scheduler'] = opts[:'scheduler'] if !opts[:'scheduler'].nil?
      query_params[:'screenshotDir'] = opts[:'screenshot_dir'] if !opts[:'screenshot_dir'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'usedDeviceGroupId'] = opts[:'used_device_group_id'] if !opts[:'used_device_group_id'].nil?
      query_params[:'videoRecordingEnabled'] = opts[:'video_recording_enabled'] if !opts[:'video_recording_enabled'].nil?
      query_params[:'withAnnotation'] = opts[:'with_annotation'] if !opts[:'with_annotation'].nil?
      query_params[:'withoutAnnotation'] = opts[:'without_annotation'] if !opts[:'without_annotation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_project_config_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update test run.
    # @param display_name displayName
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def update_project_test_run_using_post(display_name, project_id, run_id, opts = {})
      data, _status_code, _headers = update_project_test_run_using_post_with_http_info(display_name, project_id, run_id, opts)
      data
    end

    # Update test run.
    # @param display_name displayName
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def update_project_test_run_using_post_with_http_info(display_name, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_project_test_run_using_post ...'
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AdminApi.update_project_test_run_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.update_project_test_run_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.update_project_test_run_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'displayName'] = display_name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_project_test_run_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :archiving_item_count archivingItemCount
    # @option opts [String] :archiving_strategy archivingStrategy
    # @option opts [BOOLEAN] :common common
    # @option opts [String] :description description
    # @option opts [String] :email email
    # @option opts [String] :name name
    # @return [APIProject]
    def update_project_using_post(project_id, opts = {})
      data, _status_code, _headers = update_project_using_post_with_http_info(project_id, opts)
      data
    end

    # Update project.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :archiving_item_count archivingItemCount
    # @option opts [String] :archiving_strategy archivingStrategy
    # @option opts [BOOLEAN] :common common
    # @option opts [String] :description description
    # @option opts [String] :email email
    # @option opts [String] :name name
    # @return [Array<(APIProject, Fixnum, Hash)>] APIProject data, response status code and response headers
    def update_project_using_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_project_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.update_project_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'archiving_strategy'] && !['NEVER', 'DAYS', 'RUNS'].include?(opts[:'archiving_strategy'])
        fail ArgumentError, 'invalid value for "archiving_strategy", must be one of NEVER, DAYS, RUNS'
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'archivingItemCount'] = opts[:'archiving_item_count'] if !opts[:'archiving_item_count'].nil?
      query_params[:'archivingStrategy'] = opts[:'archiving_strategy'] if !opts[:'archiving_strategy'].nil?
      query_params[:'common'] = opts[:'common'] if !opts[:'common'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_project_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update property.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :always_valid alwaysValid
    # @option opts [String] :description description
    # @option opts [Integer] :from_time fromTime
    # @option opts [String] :name name
    # @option opts [Integer] :to_time toTime
    # @option opts [String] :value value
    # @return [APIProperty]
    def update_property_using_post(id, opts = {})
      data, _status_code, _headers = update_property_using_post_with_http_info(id, opts)
      data
    end

    # Update property.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :always_valid alwaysValid
    # @option opts [String] :description description
    # @option opts [Integer] :from_time fromTime
    # @option opts [String] :name name
    # @option opts [Integer] :to_time toTime
    # @option opts [String] :value value
    # @return [Array<(APIProperty, Fixnum, Hash)>] APIProperty data, response status code and response headers
    def update_property_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_property_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.update_property_using_post"
      end
      # resource path
      local_var_path = '/api/v2/properties/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'alwaysValid'] = opts[:'always_valid'] if !opts[:'always_valid'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'fromTime'] = opts[:'from_time'] if !opts[:'from_time'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'toTime'] = opts[:'to_time'] if !opts[:'to_time'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_property_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update test run.
    # @param display_name displayName
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [APITestRun]
    def update_test_run_using_post(display_name, run_id, opts = {})
      data, _status_code, _headers = update_test_run_using_post_with_http_info(display_name, run_id, opts)
      data
    end

    # Update test run.
    # @param display_name displayName
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def update_test_run_using_post_with_http_info(display_name, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_test_run_using_post ...'
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AdminApi.update_test_run_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AdminApi.update_test_run_using_post"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'displayName'] = display_name
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_test_run_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :display_name displayName
    # @option opts [String] :name name
    # @option opts [String] :os_type osType
    # @return [APIDeviceGroup]
    def update_user_device_group_using_post(device_group_id, opts = {})
      data, _status_code, _headers = update_user_device_group_using_post_with_http_info(device_group_id, opts)
      data
    end

    # Update device group.
    # @param device_group_id deviceGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :display_name displayName
    # @option opts [String] :name name
    # @option opts [String] :os_type osType
    # @return [Array<(APIDeviceGroup, Fixnum, Hash)>] APIDeviceGroup data, response status code and response headers
    def update_user_device_group_using_post_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_user_device_group_using_post ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AdminApi.update_user_device_group_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'os_type'] && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(opts[:'os_type'])
        fail ArgumentError, 'invalid value for "os_type", must be one of IOS, ANDROID, DESKTOP, UNDEFINED'
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'osType'] = opts[:'os_type'] if !opts[:'os_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_user_device_group_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update file content.
    # @param file file
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def update_user_file_using_post(file, file_id, opts = {})
      data, _status_code, _headers = update_user_file_using_post_with_http_info(file, file_id, opts)
      data
    end

    # Update file content.
    # @param file file
    # @param file_id fileId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def update_user_file_using_post_with_http_info(file, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_user_file_using_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling AdminApi.update_user_file_using_post"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AdminApi.update_user_file_using_post"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/file'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_user_file_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update users main account, switch main user.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id accountId
    # @return [APIUser]
    def update_users_main_account_using_post(user_id, opts = {})
      data, _status_code, _headers = update_users_main_account_using_post_with_http_info(user_id, opts)
      data
    end

    # Update users main account, switch main user.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id accountId
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def update_users_main_account_using_post_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_users_main_account_using_post ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.update_users_main_account_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/update-account'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_users_main_account_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update access group.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @option opts [String] :scope scope
    # @return [APIAccessGroup]
    def update_using_post(access_group_id, opts = {})
      data, _status_code, _headers = update_using_post_with_http_info(access_group_id, opts)
      data
    end

    # Update access group.
    # @param access_group_id accessGroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @option opts [String] :scope scope
    # @return [Array<(APIAccessGroup, Fixnum, Hash)>] APIAccessGroup data, response status code and response headers
    def update_using_post_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_using_post ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AdminApi.update_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccessGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update build executor.
    # @param build_executor buildExecutor
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [APIBuildExecutor]
    def update_using_post2(build_executor, id, opts = {})
      data, _status_code, _headers = update_using_post2_with_http_info(build_executor, id, opts)
      data
    end

    # Update build executor.
    # @param build_executor buildExecutor
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIBuildExecutor, Fixnum, Hash)>] APIBuildExecutor data, response status code and response headers
    def update_using_post2_with_http_info(build_executor, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_using_post2 ...'
      end
      # verify the required parameter 'build_executor' is set
      if @api_client.config.client_side_validation && build_executor.nil?
        fail ArgumentError, "Missing the required parameter 'build_executor' when calling AdminApi.update_using_post2"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.update_using_post2"
      end
      # resource path
      local_var_path = '/api/v2/admin/build-executors/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(build_executor)
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIBuildExecutor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_using_post2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update country vat rate.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code countryCode
    # @option opts [Integer] :vat_rate vatRate
    # @return [APICountryVatRate]
    def update_using_post3(id, opts = {})
      data, _status_code, _headers = update_using_post3_with_http_info(id, opts)
      data
    end

    # Update country vat rate.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code countryCode
    # @option opts [Integer] :vat_rate vatRate
    # @return [Array<(APICountryVatRate, Fixnum, Hash)>] APICountryVatRate data, response status code and response headers
    def update_using_post3_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_using_post3 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.update_using_post3"
      end
      # resource path
      local_var_path = '/api/v2/admin/country-vat-rates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'countryCode'] = opts[:'country_code'] if !opts[:'country_code'].nil?
      query_params[:'vatRate'] = opts[:'vat_rate'] if !opts[:'vat_rate'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APICountryVatRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_using_post3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload sample file.
    # @param file file
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_file_using_post(file, opts = {})
      data, _status_code, _headers = upload_file_using_post_with_http_info(file, opts)
      data
    end

    # Upload sample file.
    # @param file file
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_file_using_post_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.upload_file_using_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling AdminApi.upload_file_using_post"
      end
      # resource path
      local_var_path = '/api/v2/admin/samples'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#upload_file_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload file.
    # @param file file
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :global global (default to false)
    # @return [APIUserFile]
    def upload_file_using_post1(file, opts = {})
      data, _status_code, _headers = upload_file_using_post1_with_http_info(file, opts)
      data
    end

    # Upload file.
    # @param file file
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :global global
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_file_using_post1_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.upload_file_using_post1 ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling AdminApi.upload_file_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/files'

      # query parameters
      query_params = {}
      query_params[:'global'] = opts[:'global'] if !opts[:'global'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#upload_file_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload license to cloud.
    # @param file file
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def upload_license_using_post(file, opts = {})
      data, _status_code, _headers = upload_license_using_post_with_http_info(file, opts)
      data
    end

    # Upload license to cloud.
    # @param file file
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Fixnum, Hash)>] APILicense data, response status code and response headers
    def upload_license_using_post_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.upload_license_using_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling AdminApi.upload_license_using_post"
      end
      # resource path
      local_var_path = '/api/v2/license'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APILicense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#upload_license_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_project_application_file_using_post(file, project_id, opts = {})
      data, _status_code, _headers = upload_project_application_file_using_post_with_http_info(file, project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_project_application_file_using_post_with_http_info(file, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.upload_project_application_file_using_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling AdminApi.upload_project_application_file_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.upload_project_application_file_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/application'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#upload_project_application_file_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_project_data_file_using_post(file, project_id, opts = {})
      data, _status_code, _headers = upload_project_data_file_using_post_with_http_info(file, project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_project_data_file_using_post_with_http_info(file, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.upload_project_data_file_using_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling AdminApi.upload_project_data_file_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.upload_project_data_file_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/data'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#upload_project_data_file_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_project_test_file_using_post(file, project_id, opts = {})
      data, _status_code, _headers = upload_project_test_file_using_post_with_http_info(file, project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_project_test_file_using_post_with_http_info(file, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.upload_project_test_file_using_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling AdminApi.upload_project_test_file_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AdminApi.upload_project_test_file_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/test'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#upload_project_test_file_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate test run configuration.
    # @param configuration configuration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_device_groups includeDeviceGroups (default to true)
    # @option opts [BOOLEAN] :include_devices includeDevices (default to false)
    # @option opts [BOOLEAN] :include_frameworks includeFrameworks (default to true)
    # @return [APITestRunConfig]
    def validate_test_run_config_using_post(configuration, opts = {})
      data, _status_code, _headers = validate_test_run_config_using_post_with_http_info(configuration, opts)
      data
    end

    # Validate test run configuration.
    # @param configuration configuration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_device_groups includeDeviceGroups
    # @option opts [BOOLEAN] :include_devices includeDevices
    # @option opts [BOOLEAN] :include_frameworks includeFrameworks
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def validate_test_run_config_using_post_with_http_info(configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.validate_test_run_config_using_post ...'
      end
      # verify the required parameter 'configuration' is set
      if @api_client.config.client_side_validation && configuration.nil?
        fail ArgumentError, "Missing the required parameter 'configuration' when calling AdminApi.validate_test_run_config_using_post"
      end
      # resource path
      local_var_path = '/api/v2/runs/config'

      # query parameters
      query_params = {}
      query_params[:'includeDeviceGroups'] = opts[:'include_device_groups'] if !opts[:'include_device_groups'].nil?
      query_params[:'includeDevices'] = opts[:'include_devices'] if !opts[:'include_devices'].nil?
      query_params[:'includeFrameworks'] = opts[:'include_frameworks'] if !opts[:'include_frameworks'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration)
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#validate_test_run_config_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
