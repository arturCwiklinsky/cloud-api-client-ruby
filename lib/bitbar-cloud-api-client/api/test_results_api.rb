=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.100.0
Contact: damian.sniezek@smartbear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module BitbarCloudApiClient
  class TestResultsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Abort test run and receive partial results.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def abort_user_test_run_using_post(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = abort_user_test_run_using_post_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Abort test run and receive partial results.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def abort_user_test_run_using_post_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.abort_user_test_run_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.abort_user_test_run_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.abort_user_test_run_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.abort_user_test_run_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/abort'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#abort_user_test_run_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add file to device session.
    # @param device_session_id deviceSessionId
    # @param file file
    # @param name name
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag tag
    # @return [APIUserFile]
    def add_file_using_post1(device_session_id, file, name, user_id, opts = {})
      data, _status_code, _headers = add_file_using_post1_with_http_info(device_session_id, file, name, user_id, opts)
      data
    end

    # Add file to device session.
    # @param device_session_id deviceSessionId
    # @param file file
    # @param name name
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag tag
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def add_file_using_post1_with_http_info(device_session_id, file, name, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.add_file_using_post1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.add_file_using_post1"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling TestResultsApi.add_file_using_post1"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TestResultsApi.add_file_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.add_file_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#add_file_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add tag to test run.
    # @param name name
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITag]
    def add_test_run_tag_using_post1(name, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = add_test_run_tag_using_post1_with_http_info(name, project_id, run_id, user_id, opts)
      data
    end

    # Add tag to test run.
    # @param name name
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITag, Fixnum, Hash)>] APITag data, response status code and response headers
    def add_test_run_tag_using_post1_with_http_info(name, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.add_test_run_tag_using_post1 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TestResultsApi.add_test_run_tag_using_post1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.add_test_run_tag_using_post1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.add_test_run_tag_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.add_test_run_tag_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/tags'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#add_test_run_tag_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete file from device session.
    # @param device_session_id deviceSessionId
    # @param file_id fileId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file_using_delete4(device_session_id, file_id, user_id, opts = {})
      delete_file_using_delete4_with_http_info(device_session_id, file_id, user_id, opts)
      nil
    end

    # Delete file from device session.
    # @param device_session_id deviceSessionId
    # @param file_id fileId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_file_using_delete4_with_http_info(device_session_id, file_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.delete_file_using_delete4 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.delete_file_using_delete4"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling TestResultsApi.delete_file_using_delete4"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.delete_file_using_delete4"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/output-file-set/files/{fileId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#delete_file_using_delete4\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run tag.
    # @param project_id projectId
    # @param run_id runId
    # @param tag_id tagId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_test_run_tag_using_delete1(project_id, run_id, tag_id, user_id, opts = {})
      delete_test_run_tag_using_delete1_with_http_info(project_id, run_id, tag_id, user_id, opts)
      nil
    end

    # Delete test run tag.
    # @param project_id projectId
    # @param run_id runId
    # @param tag_id tagId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_test_run_tag_using_delete1_with_http_info(project_id, run_id, tag_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.delete_test_run_tag_using_delete1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.delete_test_run_tag_using_delete1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.delete_test_run_tag_using_delete1"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling TestResultsApi.delete_test_run_tag_using_delete1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.delete_test_run_tag_using_delete1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/tags/{tagId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#delete_test_run_tag_using_delete1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_test_run_using_delete(project_id, run_id, user_id, opts = {})
      delete_user_test_run_using_delete_with_http_info(project_id, run_id, user_id, opts)
      nil
    end

    # Delete test run.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_test_run_using_delete_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.delete_user_test_run_using_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.delete_user_test_run_using_delete"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.delete_user_test_run_using_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.delete_user_test_run_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#delete_user_test_run_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_output_files_zip_using_get1(device_session_id, user_id, opts = {})
      download_output_files_zip_using_get1_with_http_info(device_session_id, user_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_output_files_zip_using_get1_with_http_info(device_session_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.download_output_files_zip_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.download_output_files_zip_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.download_output_files_zip_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#download_output_files_zip_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_test_run_output_files_zip_using_get2(device_session_id, project_id, run_id, user_id, opts = {})
      download_test_run_output_files_zip_using_get2_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_test_run_output_files_zip_using_get2_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.download_test_run_output_files_zip_using_get2 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.download_test_run_output_files_zip_using_get2"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.download_test_run_output_files_zip_using_get2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.download_test_run_output_files_zip_using_get2"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.download_test_run_output_files_zip_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#download_test_run_output_files_zip_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps of all device sessions in run.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIDeviceSessionStep]
    def get_all_test_run_device_session_steps_using_get2(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_all_test_run_device_session_steps_using_get2_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Get device session steps of all device sessions in run.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIDeviceSessionStep, Fixnum, Hash)>] APIListOfAPIDeviceSessionStep data, response status code and response headers
    def get_all_test_run_device_session_steps_using_get2_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_all_test_run_device_session_steps_using_get2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_all_test_run_device_session_steps_using_get2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_all_test_run_device_session_steps_using_get2"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_all_test_run_device_session_steps_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/steps'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_all_test_run_device_session_steps_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current device session step.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_current_device_session_step_using_get3(device_session_id, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_current_device_session_step_using_get3_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      data
    end

    # Get current device session step.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Fixnum, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_current_device_session_step_using_get3_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_current_device_session_step_using_get3 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_current_device_session_step_using_get3"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_current_device_session_step_using_get3"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_current_device_session_step_using_get3"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_current_device_session_step_using_get3"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps/current'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_current_device_session_step_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIDeviceSessionStep]
    def get_device_session_steps_using_get3(device_session_id, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_device_session_steps_using_get3_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIDeviceSessionStep, Fixnum, Hash)>] APIListOfAPIDeviceSessionStep data, response status code and response headers
    def get_device_session_steps_using_get3_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_device_session_steps_using_get3 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_device_session_steps_using_get3"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_device_session_steps_using_get3"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_device_session_steps_using_get3"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_device_session_steps_using_get3"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_device_session_steps_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;result_eq_passed&lt;br&gt;filter&#x3D;createtime_eq_1593583746581&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;result_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPITestCaseRun]
    def get_device_session_test_case_runs_using_get2(device_session_id, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_device_session_test_case_runs_using_get2_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;result_eq_passed&lt;br&gt;filter&#x3D;createtime_eq_1593583746581&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;result_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPITestCaseRun, Fixnum, Hash)>] APIListOfAPITestCaseRun data, response status code and response headers
    def get_device_session_test_case_runs_using_get2_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_device_session_test_case_runs_using_get2 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_device_session_test_case_runs_using_get2"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_device_session_test_case_runs_using_get2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_device_session_test_case_runs_using_get2"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_device_session_test_case_runs_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/test-case-runs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITestCaseRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_device_session_test_case_runs_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583743582&lt;br&gt;filter&#x3D;launchappduration_eq_1&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1593583743582&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1593583743582&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_null&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;launchAppDuration_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;testRunName_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPIDeviceSession]
    def get_device_sessions_using_get1(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_device_sessions_using_get1_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Get device sessions.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583743582&lt;br&gt;filter&#x3D;launchappduration_eq_1&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1593583743582&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1593583743582&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_null&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;launchAppDuration_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;testRunName_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPIDeviceSession, Fixnum, Hash)>] APIListOfAPIDeviceSession data, response status code and response headers
    def get_device_sessions_using_get1_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_device_sessions_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_device_sessions_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_device_sessions_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_device_sessions_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_device_sessions_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583743377&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [APIListOfAPIUserFile]
    def get_files_for_device_session_by_tag_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_files_for_device_session_by_tag_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      data
    end

    # Get device session output files.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583743377&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_files_for_device_session_by_tag_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_files_for_device_session_by_tag_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_files_for_device_session_by_tag_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_files_for_device_session_by_tag_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_files_for_device_session_by_tag_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_files_for_device_session_by_tag_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_files_for_device_session_by_tag_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583747969&lt;br&gt;filter&#x3D;launchappduration_eq_1&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1593583747969&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1593583747969&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_null&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;launchAppDuration_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;testRunName_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPIDeviceSession]
    def get_inspector_device_sessions_using_get(user_id, opts = {})
      data, _status_code, _headers = get_inspector_device_sessions_using_get_with_http_info(user_id, opts)
      data
    end

    # Get device sessions.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583747969&lt;br&gt;filter&#x3D;launchappduration_eq_1&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;starttime_eq_1593583747969&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1593583747969&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_null&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;launchAppDuration_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;testRunName_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPIDeviceSession, Fixnum, Hash)>] APIListOfAPIDeviceSession data, response status code and response headers
    def get_inspector_device_sessions_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_inspector_device_sessions_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_inspector_device_sessions_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_inspector_device_sessions_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get files for device session.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583747884&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [APIListOfAPIUserFile]
    def get_output_files_using_get(device_session_id, user_id, opts = {})
      data, _status_code, _headers = get_output_files_using_get_with_http_info(device_session_id, user_id, opts)
      data
    end

    # Get files for device session.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583747884&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_output_files_using_get_with_http_info(device_session_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_output_files_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_output_files_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_output_files_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_output_files_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get screenshot names.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIScreenshot]
    def get_screenshot_names_using_get2(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_screenshot_names_using_get2_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Get screenshot names.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIScreenshot, Fixnum, Hash)>] APIListOfAPIScreenshot data, response status code and response headers
    def get_screenshot_names_using_get2_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_screenshot_names_using_get2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_screenshot_names_using_get2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_screenshot_names_using_get2"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_screenshot_names_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/screenshot-names'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_screenshot_names_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run data availability.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunDataAvailability]
    def get_test_run_data_availability_with_user_using_get(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_test_run_data_availability_with_user_using_get_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Get test run data availability.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunDataAvailability, Fixnum, Hash)>] APITestRunDataAvailability data, response status code and response headers
    def get_test_run_data_availability_with_user_using_get_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_test_run_data_availability_with_user_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_test_run_data_availability_with_user_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_test_run_data_availability_with_user_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_test_run_data_availability_with_user_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/data-availability'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunDataAvailability')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_test_run_data_availability_with_user_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run screenshots by name.
    # @param name name
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIScreenshotExtended]
    def get_test_run_screenshots_using_get2(name, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_test_run_screenshots_using_get2_with_http_info(name, project_id, run_id, user_id, opts)
      data
    end

    # Get test run screenshots by name.
    # @param name name
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIScreenshotExtended, Fixnum, Hash)>] APIListOfAPIScreenshotExtended data, response status code and response headers
    def get_test_run_screenshots_using_get2_with_http_info(name, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_test_run_screenshots_using_get2 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TestResultsApi.get_test_run_screenshots_using_get2"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_test_run_screenshots_using_get2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_test_run_screenshots_using_get2"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_test_run_screenshots_using_get2"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/screenshots'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshotExtended')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_test_run_screenshots_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tag.
    # @param project_id projectId
    # @param run_id runId
    # @param tag_id tagId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITag]
    def get_test_run_tag_using_get1(project_id, run_id, tag_id, user_id, opts = {})
      data, _status_code, _headers = get_test_run_tag_using_get1_with_http_info(project_id, run_id, tag_id, user_id, opts)
      data
    end

    # Get test run tag.
    # @param project_id projectId
    # @param run_id runId
    # @param tag_id tagId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITag, Fixnum, Hash)>] APITag data, response status code and response headers
    def get_test_run_tag_using_get1_with_http_info(project_id, run_id, tag_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_test_run_tag_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_test_run_tag_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_test_run_tag_using_get1"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling TestResultsApi.get_test_run_tag_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_test_run_tag_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/tags/{tagId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_test_run_tag_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tags.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPITag]
    def get_test_run_tags_using_get1(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_test_run_tags_using_get1_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Get test run tags.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPITag, Fixnum, Hash)>] APIListOfAPITag data, response status code and response headers
    def get_test_run_tags_using_get1_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_test_run_tags_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_test_run_tags_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_test_run_tags_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_test_run_tags_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/tags'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_test_run_tags_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_cluster_logs_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_cluster_logs_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_cluster_logs_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_cluster_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_user_cluster_logs_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_cluster_logs_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_user_cluster_logs_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_cluster_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/cluster-logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_cluster_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_device_session_data_zip_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_device_session_data_zip_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_device_session_data_zip_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_device_session_data_zip_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_user_device_session_data_zip_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_device_session_data_zip_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_user_device_session_data_zip_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_device_session_data_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/result-data.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_device_session_data_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_device_session_junit_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_device_session_junit_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_device_session_junit_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_device_session_junit_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_user_device_session_junit_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_device_session_junit_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_user_device_session_junit_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_device_session_junit_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/junit.xml'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_device_session_junit_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_device_session_logs_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_device_session_logs_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_device_session_logs_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_device_session_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_user_device_session_logs_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_device_session_logs_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_user_device_session_logs_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_device_session_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_device_session_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_device_session_performance_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_device_session_performance_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_device_session_performance_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_device_session_performance_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_user_device_session_performance_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_device_session_performance_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_user_device_session_performance_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_device_session_performance_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/performance'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_device_session_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshots.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [APIListOfAPIScreenshot]
    def get_user_device_session_screenshots_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_user_device_session_screenshots_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      data
    end

    # Get device session screenshots.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @return [Array<(APIListOfAPIScreenshot, Fixnum, Hash)>] APIListOfAPIScreenshot data, response status code and response headers
    def get_user_device_session_screenshots_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_device_session_screenshots_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_user_device_session_screenshots_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_device_session_screenshots_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_user_device_session_screenshots_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_device_session_screenshots_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/screenshots'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIScreenshot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_device_session_screenshots_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session step.
    # @param device_session_id deviceSessionId
    # @param device_session_step_id deviceSessionStepId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_user_device_session_step_using_get(device_session_id, device_session_step_id, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_user_device_session_step_using_get_with_http_info(device_session_id, device_session_step_id, project_id, run_id, user_id, opts)
      data
    end

    # Get device session step.
    # @param device_session_id deviceSessionId
    # @param device_session_step_id deviceSessionStepId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Fixnum, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_user_device_session_step_using_get_with_http_info(device_session_id, device_session_step_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_device_session_step_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_user_device_session_step_using_get"
      end
      # verify the required parameter 'device_session_step_id' is set
      if @api_client.config.client_side_validation && device_session_step_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_step_id' when calling TestResultsApi.get_user_device_session_step_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_device_session_step_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_user_device_session_step_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_device_session_step_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps/{deviceSessionStepId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'deviceSessionStepId' + '}', device_session_step_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSessionStep')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_device_session_step_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def get_user_device_session_with_users_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_user_device_session_with_users_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      data
    end

    # Get device session.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def get_user_device_session_with_users_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_device_session_with_users_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_user_device_session_with_users_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_device_session_with_users_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_user_device_session_with_users_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_device_session_with_users_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_device_session_with_users_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def get_user_inspector_device_session_using_get(device_session_id, user_id, opts = {})
      data, _status_code, _headers = get_user_inspector_device_session_using_get_with_http_info(device_session_id, user_id, opts)
      data
    end

    # Get device session.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def get_user_inspector_device_session_using_get_with_http_info(device_session_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_inspector_device_session_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.get_user_inspector_device_session_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_inspector_device_session_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_inspector_device_session_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1593583747582&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1593583747582&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPITestRun]
    def get_user_project_test_runs_using_get(project_id, user_id, opts = {})
      data, _status_code, _headers = get_user_project_test_runs_using_get_with_http_info(project_id, user_id, opts)
      data
    end

    # Get test runs.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1593583747582&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1593583747582&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPITestRun, Fixnum, Hash)>] APIListOfAPITestRun data, response status code and response headers
    def get_user_project_test_runs_using_get_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_project_test_runs_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_project_test_runs_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_project_test_runs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_project_test_runs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def get_user_test_run_using_get(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_user_test_run_using_get_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Get test run.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def get_user_test_run_using_get_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_test_run_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.get_user_test_run_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.get_user_test_run_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_test_run_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_test_run_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1593583747585&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1593583747585&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [BOOLEAN] :for_whole_account forWholeAccount (default to false)
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [BOOLEAN] :skip_common_project skipCommonProject (default to false)
    # @option opts [BOOLEAN] :skip_shared skipShared (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [APIListOfAPITestRun]
    def get_user_test_runs_using_get(user_id, opts = {})
      data, _status_code, _headers = get_user_test_runs_using_get_with_http_info(user_id, opts)
      data
    end

    # Get test runs.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;common_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1593583747585&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;starttime_eq_1593583747585&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [BOOLEAN] :for_whole_account forWholeAccount
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [BOOLEAN] :skip_common_project skipCommonProject
    # @option opts [BOOLEAN] :skip_shared skipShared
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;projectId_a
    # @return [Array<(APIListOfAPITestRun, Fixnum, Hash)>] APIListOfAPITestRun data, response status code and response headers
    def get_user_test_runs_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.get_user_test_runs_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.get_user_test_runs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/runs'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'skipCommonProject'] = opts[:'skip_common_project'] if !opts[:'skip_common_project'].nil?
      query_params[:'skipShared'] = opts[:'skip_shared'] if !opts[:'skip_shared'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#get_user_test_runs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Release device session.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def release_device_session_using_post1(device_session_id, user_id, opts = {})
      data, _status_code, _headers = release_device_session_using_post1_with_http_info(device_session_id, user_id, opts)
      data
    end

    # Release device session.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def release_device_session_using_post1_with_http_info(device_session_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.release_device_session_using_post1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.release_device_session_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.release_device_session_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/release'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#release_device_session_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate files zip.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIUserFile]
    def request_user_test_run_files_using_post(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = request_user_test_run_files_using_post_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Generate files zip.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_user_test_run_files_using_post_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.request_user_test_run_files_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.request_user_test_run_files_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.request_user_test_run_files_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.request_user_test_run_files_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#request_user_test_run_files_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate logs zip.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIUserFile]
    def request_user_test_run_logs_using_post(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = request_user_test_run_logs_using_post_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Generate logs zip.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_user_test_run_logs_using_post_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.request_user_test_run_logs_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.request_user_test_run_logs_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.request_user_test_run_logs_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.request_user_test_run_logs_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/logs.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#request_user_test_run_logs_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate performance zip.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIUserFile]
    def request_user_test_run_performance_using_post(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = request_user_test_run_performance_using_post_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Generate performance zip.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_user_test_run_performance_using_post_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.request_user_test_run_performance_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.request_user_test_run_performance_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.request_user_test_run_performance_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.request_user_test_run_performance_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/performance.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#request_user_test_run_performance_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate screenshot zip.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APIUserFile]
    def request_user_test_run_screenshots_using_post(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = request_user_test_run_screenshots_using_post_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Generate screenshot zip.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def request_user_test_run_screenshots_using_post_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.request_user_test_run_screenshots_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.request_user_test_run_screenshots_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.request_user_test_run_screenshots_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.request_user_test_run_screenshots_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/screenshots.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#request_user_test_run_screenshots_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry device session.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def retry_device_session_with_user_using_post(device_session_id, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = retry_device_session_with_user_using_post_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      data
    end

    # Retry device session.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def retry_device_session_with_user_using_post_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.retry_device_session_with_user_using_post ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.retry_device_session_with_user_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.retry_device_session_with_user_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.retry_device_session_with_user_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.retry_device_session_with_user_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/retry'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#retry_device_session_with_user_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry test run or its device sessions.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [APITestRun]
    def retry_test_run_with_user_using_post(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = retry_test_run_with_user_using_post_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # Retry test run or its device sessions.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids deviceRunIds[]
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def retry_test_run_with_user_using_post_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.retry_test_run_with_user_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.retry_test_run_with_user_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.retry_test_run_with_user_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.retry_test_run_with_user_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/retry'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#retry_test_run_with_user_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param screenshot_id screenshotId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :height height
    # @option opts [Integer] :width width
    # @return [nil]
    def serve_screenshot_using_get(device_session_id, project_id, run_id, screenshot_id, user_id, opts = {})
      serve_screenshot_using_get_with_http_info(device_session_id, project_id, run_id, screenshot_id, user_id, opts)
      nil
    end

    # Get device session screenshot.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param screenshot_id screenshotId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :height height
    # @option opts [Integer] :width width
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def serve_screenshot_using_get_with_http_info(device_session_id, project_id, run_id, screenshot_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.serve_screenshot_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling TestResultsApi.serve_screenshot_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.serve_screenshot_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.serve_screenshot_using_get"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling TestResultsApi.serve_screenshot_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.serve_screenshot_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/screenshots/{screenshotId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#serve_screenshot_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update test run.
    # @param display_name displayName
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def update_user_test_run_using_post(display_name, project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = update_user_test_run_using_post_with_http_info(display_name, project_id, run_id, user_id, opts)
      data
    end

    # Update test run.
    # @param display_name displayName
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def update_user_test_run_using_post_with_http_info(display_name, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestResultsApi.update_user_test_run_using_post ...'
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling TestResultsApi.update_user_test_run_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TestResultsApi.update_user_test_run_using_post"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TestResultsApi.update_user_test_run_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TestResultsApi.update_user_test_run_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'displayName'] = display_name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestResultsApi#update_user_test_run_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
