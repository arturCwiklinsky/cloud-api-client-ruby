=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.87.0
Contact: support@bitbar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module BitbarCloudApiClient
  class BuildsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Abort build.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIPipelineBuild]
    def abort_build_using_post1(build_id, job_id, user_id, opts = {})
      data, _status_code, _headers = abort_build_using_post1_with_http_info(build_id, job_id, user_id, opts)
      data
    end

    # Abort build.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPipelineBuild, Fixnum, Hash)>] APIPipelineBuild data, response status code and response headers
    def abort_build_using_post1_with_http_info(build_id, job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.abort_build_using_post1 ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling BuildsApi.abort_build_using_post1"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.abort_build_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.abort_build_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}/builds/{buildId}/abort'.sub('{' + 'buildId' + '}', build_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#abort_build_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create build.
    # @param config config
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIPipelineBuild]
    def create_build_using_post(config, job_id, user_id, opts = {})
      data, _status_code, _headers = create_build_using_post_with_http_info(config, job_id, user_id, opts)
      data
    end

    # Create build.
    # @param config config
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPipelineBuild, Fixnum, Hash)>] APIPipelineBuild data, response status code and response headers
    def create_build_using_post_with_http_info(config, job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.create_build_using_post ...'
      end
      # verify the required parameter 'config' is set
      if @api_client.config.client_side_validation && config.nil?
        fail ArgumentError, "Missing the required parameter 'config' when calling BuildsApi.create_build_using_post"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.create_build_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.create_build_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}/builds'.sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(config)
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#create_build_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create job.
    # @param name name
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content content
    # @option opts [String] :type type (default to BUILD)
    # @return [APIPipelineJob]
    def create_my_job_using_post(name, user_id, opts = {})
      data, _status_code, _headers = create_my_job_using_post_with_http_info(name, user_id, opts)
      data
    end

    # Create job.
    # @param name name
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content content
    # @option opts [String] :type type
    # @return [Array<(APIPipelineJob, Fixnum, Hash)>] APIPipelineJob data, response status code and response headers
    def create_my_job_using_post_with_http_info(name, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.create_my_job_using_post ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling BuildsApi.create_my_job_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.create_my_job_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['BUILD', 'BROWSER_TESTING'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of BUILD, BROWSER_TESTING'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineJob')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#create_my_job_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete build.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_build_using_delete(build_id, job_id, user_id, opts = {})
      delete_user_build_using_delete_with_http_info(build_id, job_id, user_id, opts)
      nil
    end

    # Delete build.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_build_using_delete_with_http_info(build_id, job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.delete_user_build_using_delete ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling BuildsApi.delete_user_build_using_delete"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.delete_user_build_using_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.delete_user_build_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}/builds/{buildId}'.sub('{' + 'buildId' + '}', build_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#delete_user_build_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete job.
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_job_using_delete(job_id, user_id, opts = {})
      delete_user_job_using_delete_with_http_info(job_id, user_id, opts)
      nil
    end

    # Delete job.
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_job_using_delete_with_http_info(job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.delete_user_job_using_delete ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.delete_user_job_using_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.delete_user_job_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}'.sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#delete_user_job_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get available build executors.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;label.id_eq_1&lt;br&gt;filter&#x3D;createtime_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_build&lt;br&gt;filter&#x3D;label.name_eq_value&lt;br&gt;filter&#x3D;enabled_eq_null&lt;br&gt;filter&#x3D;label.displayname_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;label.id_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;label.name_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;label.displayName_a
    # @return [APIListOfAPIBuildExecutor]
    def get_available_executors_using_get(user_id, opts = {})
      data, _status_code, _headers = get_available_executors_using_get_with_http_info(user_id, opts)
      data
    end

    # Get available build executors.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;label.id_eq_1&lt;br&gt;filter&#x3D;createtime_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_build&lt;br&gt;filter&#x3D;label.name_eq_value&lt;br&gt;filter&#x3D;enabled_eq_null&lt;br&gt;filter&#x3D;label.displayname_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;label.id_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;label.name_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;label.displayName_a
    # @return [Array<(APIListOfAPIBuildExecutor, Fixnum, Hash)>] APIListOfAPIBuildExecutor data, response status code and response headers
    def get_available_executors_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.get_available_executors_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.get_available_executors_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/available-build-executors'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIBuildExecutor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#get_available_executors_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get build.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIPipelineBuild]
    def get_build_using_get1(build_id, job_id, user_id, opts = {})
      data, _status_code, _headers = get_build_using_get1_with_http_info(build_id, job_id, user_id, opts)
      data
    end

    # Get build.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPipelineBuild, Fixnum, Hash)>] APIPipelineBuild data, response status code and response headers
    def get_build_using_get1_with_http_info(build_id, job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.get_build_using_get1 ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling BuildsApi.get_build_using_get1"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.get_build_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.get_build_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}/builds/{buildId}'.sub('{' + 'buildId' + '}', build_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#get_build_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get builds.
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482789&lt;br&gt;filter&#x3D;pipelinejobid_eq_1&lt;br&gt;filter&#x3D;state_eq_created&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;buildnumber_eq_1&lt;br&gt;filter&#x3D;status_eq_undefined
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;pipelineJobId_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;buildNumber_a&lt;br&gt;sort&#x3D;status_a
    # @return [APIListOfAPIPipelineBuild]
    def get_builds_using_get1(job_id, user_id, opts = {})
      data, _status_code, _headers = get_builds_using_get1_with_http_info(job_id, user_id, opts)
      data
    end

    # Get builds.
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482789&lt;br&gt;filter&#x3D;pipelinejobid_eq_1&lt;br&gt;filter&#x3D;state_eq_created&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;buildnumber_eq_1&lt;br&gt;filter&#x3D;status_eq_undefined
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;pipelineJobId_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;buildNumber_a&lt;br&gt;sort&#x3D;status_a
    # @return [Array<(APIListOfAPIPipelineBuild, Fixnum, Hash)>] APIListOfAPIPipelineBuild data, response status code and response headers
    def get_builds_using_get1_with_http_info(job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.get_builds_using_get1 ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.get_builds_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.get_builds_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}/builds'.sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#get_builds_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get job.
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIPipelineJob]
    def get_job_using_get1(job_id, user_id, opts = {})
      data, _status_code, _headers = get_job_using_get1_with_http_info(job_id, user_id, opts)
      data
    end

    # Get job.
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPipelineJob, Fixnum, Hash)>] APIPipelineJob data, response status code and response headers
    def get_job_using_get1_with_http_info(job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.get_job_using_get1 ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.get_job_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.get_job_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}'.sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineJob')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#get_job_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get output files.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482792&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [APIListOfAPIUserFile]
    def get_output_files_for_pipeline_build_by_tag_using_get1(build_id, job_id, user_id, opts = {})
      data, _status_code, _headers = get_output_files_for_pipeline_build_by_tag_using_get1_with_http_info(build_id, job_id, user_id, opts)
      data
    end

    # Get output files.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482792&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [Array<String>] :tag tag[]
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_output_files_for_pipeline_build_by_tag_using_get1_with_http_info(build_id, job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.get_output_files_for_pipeline_build_by_tag_using_get1 ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling BuildsApi.get_output_files_for_pipeline_build_by_tag_using_get1"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.get_output_files_for_pipeline_build_by_tag_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.get_output_files_for_pipeline_build_by_tag_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}/builds/{buildId}/output-file-set/files'.sub('{' + 'buildId' + '}', build_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#get_output_files_for_pipeline_build_by_tag_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get builds.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482793&lt;br&gt;filter&#x3D;pipelinejobid_eq_1&lt;br&gt;filter&#x3D;state_eq_created&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;buildnumber_eq_1&lt;br&gt;filter&#x3D;status_eq_undefined
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;pipelineJobId_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;buildNumber_a&lt;br&gt;sort&#x3D;status_a
    # @return [APIListOfAPIPipelineBuild]
    def get_user_builds_using_get(user_id, opts = {})
      data, _status_code, _headers = get_user_builds_using_get_with_http_info(user_id, opts)
      data
    end

    # Get builds.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134482793&lt;br&gt;filter&#x3D;pipelinejobid_eq_1&lt;br&gt;filter&#x3D;state_eq_created&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;buildnumber_eq_1&lt;br&gt;filter&#x3D;status_eq_undefined
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;pipelineJobId_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;buildNumber_a&lt;br&gt;sort&#x3D;status_a
    # @return [Array<(APIListOfAPIPipelineBuild, Fixnum, Hash)>] APIListOfAPIPipelineBuild data, response status code and response headers
    def get_user_builds_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.get_user_builds_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.get_user_builds_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/builds'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#get_user_builds_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jobs.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134484403&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_build&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a
    # @return [APIListOfAPIPipelineJob]
    def get_user_jobs_using_get(user_id, opts = {})
      data, _status_code, _headers = get_user_jobs_using_get_with_http_info(user_id, opts)
      data
    end

    # Get jobs.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1576134484403&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_build&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a
    # @return [Array<(APIListOfAPIPipelineJob, Fixnum, Hash)>] APIListOfAPIPipelineJob data, response status code and response headers
    def get_user_jobs_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.get_user_jobs_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.get_user_jobs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIPipelineJob')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#get_user_jobs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update build.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :build_number buildNumber
    # @return [APIPipelineBuild]
    def update_build_using_post(build_id, job_id, user_id, opts = {})
      data, _status_code, _headers = update_build_using_post_with_http_info(build_id, job_id, user_id, opts)
      data
    end

    # Update build.
    # @param build_id buildId
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :build_number buildNumber
    # @return [Array<(APIPipelineBuild, Fixnum, Hash)>] APIPipelineBuild data, response status code and response headers
    def update_build_using_post_with_http_info(build_id, job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.update_build_using_post ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling BuildsApi.update_build_using_post"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.update_build_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.update_build_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}/builds/{buildId}'.sub('{' + 'buildId' + '}', build_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'buildNumber'] = opts[:'build_number'] if !opts[:'build_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineBuild')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#update_build_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update job.
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content content
    # @option opts [String] :name name
    # @return [APIPipelineJob]
    def update_job_using_post1(job_id, user_id, opts = {})
      data, _status_code, _headers = update_job_using_post1_with_http_info(job_id, user_id, opts)
      data
    end

    # Update job.
    # @param job_id jobId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content content
    # @option opts [String] :name name
    # @return [Array<(APIPipelineJob, Fixnum, Hash)>] APIPipelineJob data, response status code and response headers
    def update_job_using_post1_with_http_info(job_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildsApi.update_job_using_post1 ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling BuildsApi.update_job_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling BuildsApi.update_job_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/jobs/{jobId}'.sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPipelineJob')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildsApi#update_job_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
