=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.100.0
Contact: damian.sniezek@smartbear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module BitbarCloudApiClient
  class IntegrationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create jira issue.
    # @param issue_type_id issueTypeId
    # @param project_key projectKey
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description description
    # @option opts [Integer] :priority_id priorityId
    # @option opts [String] :summary summary
    # @return [APIJiraIssue]
    def create_issue_using_post(issue_type_id, project_key, opts = {})
      data, _status_code, _headers = create_issue_using_post_with_http_info(issue_type_id, project_key, opts)
      data
    end

    # Create jira issue.
    # @param issue_type_id issueTypeId
    # @param project_key projectKey
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description description
    # @option opts [Integer] :priority_id priorityId
    # @option opts [String] :summary summary
    # @return [Array<(APIJiraIssue, Fixnum, Hash)>] APIJiraIssue data, response status code and response headers
    def create_issue_using_post_with_http_info(issue_type_id, project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.create_issue_using_post ...'
      end
      # verify the required parameter 'issue_type_id' is set
      if @api_client.config.client_side_validation && issue_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_type_id' when calling IntegrationsApi.create_issue_using_post"
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling IntegrationsApi.create_issue_using_post"
      end
      # resource path
      local_var_path = '/api/v2/jira/projects/{projectKey}/issues'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = {}
      query_params[:'issueTypeId'] = issue_type_id
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'priorityId'] = opts[:'priority_id'] if !opts[:'priority_id'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIJiraIssue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#create_issue_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create integration.
    # @param type type
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key apiKey
    # @option opts [File] :cert cert
    # @option opts [String] :password password
    # @option opts [String] :url url
    # @option opts [String] :username username
    # @return [APIUserIntegration]
    def create_users_integration_using_post(type, user_id, opts = {})
      data, _status_code, _headers = create_users_integration_using_post_with_http_info(type, user_id, opts)
      data
    end

    # Create integration.
    # @param type type
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key apiKey
    # @option opts [File] :cert cert
    # @option opts [String] :password password
    # @option opts [String] :url url
    # @option opts [String] :username username
    # @return [Array<(APIUserIntegration, Fixnum, Hash)>] APIUserIntegration data, response status code and response headers
    def create_users_integration_using_post_with_http_info(type, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.create_users_integration_using_post ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IntegrationsApi.create_users_integration_using_post"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['GAMEBENCH', 'JIRA', 'CUSTOM'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of GAMEBENCH, JIRA, CUSTOM"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling IntegrationsApi.create_users_integration_using_post"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/integrations'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = type
      query_params[:'apiKey'] = opts[:'api_key'] if !opts[:'api_key'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['cert'] = opts[:'cert'] if !opts[:'cert'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#create_users_integration_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete jira issue.
    # @param issue_key issueKey
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_issue_using_delete(issue_key, opts = {})
      delete_issue_using_delete_with_http_info(issue_key, opts)
      nil
    end

    # Delete jira issue.
    # @param issue_key issueKey
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_issue_using_delete_with_http_info(issue_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.delete_issue_using_delete ...'
      end
      # verify the required parameter 'issue_key' is set
      if @api_client.config.client_side_validation && issue_key.nil?
        fail ArgumentError, "Missing the required parameter 'issue_key' when calling IntegrationsApi.delete_issue_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/jira/issues/{issueKey}'.sub('{' + 'issueKey' + '}', issue_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#delete_issue_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete integration.
    # @param id id
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_users_integration_using_delete(id, user_id, opts = {})
      delete_users_integration_using_delete_with_http_info(id, user_id, opts)
      nil
    end

    # Delete integration.
    # @param id id
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_users_integration_using_delete_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.delete_users_integration_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntegrationsApi.delete_users_integration_using_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling IntegrationsApi.delete_users_integration_using_delete"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/integrations/{id}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#delete_users_integration_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get integrations.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1593583748082&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_gamebench&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a
    # @return [APIListOfAPIUserIntegration]
    def get_integrations_using_get(user_id, opts = {})
      data, _status_code, _headers = get_integrations_using_get_with_http_info(user_id, opts)
      data
    end

    # Get integrations.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1593583748082&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_gamebench&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a
    # @return [Array<(APIListOfAPIUserIntegration, Fixnum, Hash)>] APIListOfAPIUserIntegration data, response status code and response headers
    def get_integrations_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_integrations_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling IntegrationsApi.get_integrations_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/integrations'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_integrations_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jira issue types.
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIJiraIssueType]
    def get_issue_types_using_get(opts = {})
      data, _status_code, _headers = get_issue_types_using_get_with_http_info(opts)
      data
    end

    # Get jira issue types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIJiraIssueType, Fixnum, Hash)>] APIListOfAPIJiraIssueType data, response status code and response headers
    def get_issue_types_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_issue_types_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/jira/issues/issue-types'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIJiraIssueType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_issue_types_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jira issue.
    # @param issue_key issueKey
    # @param [Hash] opts the optional parameters
    # @return [APIJiraIssue]
    def get_issue_using_get(issue_key, opts = {})
      data, _status_code, _headers = get_issue_using_get_with_http_info(issue_key, opts)
      data
    end

    # Get jira issue.
    # @param issue_key issueKey
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIJiraIssue, Fixnum, Hash)>] APIJiraIssue data, response status code and response headers
    def get_issue_using_get_with_http_info(issue_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_issue_using_get ...'
      end
      # verify the required parameter 'issue_key' is set
      if @api_client.config.client_side_validation && issue_key.nil?
        fail ArgumentError, "Missing the required parameter 'issue_key' when calling IntegrationsApi.get_issue_using_get"
      end
      # resource path
      local_var_path = '/api/v2/jira/issues/{issueKey}'.sub('{' + 'issueKey' + '}', issue_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIJiraIssue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_issue_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jira issues.
    # @param project_key projectKey
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIJiraIssue]
    def get_issues_using_get(project_key, opts = {})
      data, _status_code, _headers = get_issues_using_get_with_http_info(project_key, opts)
      data
    end

    # Get jira issues.
    # @param project_key projectKey
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIJiraIssue, Fixnum, Hash)>] APIListOfAPIJiraIssue data, response status code and response headers
    def get_issues_using_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_issues_using_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling IntegrationsApi.get_issues_using_get"
      end
      # resource path
      local_var_path = '/api/v2/jira/projects/{projectKey}/issues'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIJiraIssue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_issues_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jira issue priorities.
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIJiraPriority]
    def get_priorities_using_get(opts = {})
      data, _status_code, _headers = get_priorities_using_get_with_http_info(opts)
      data
    end

    # Get jira issue priorities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIJiraPriority, Fixnum, Hash)>] APIListOfAPIJiraPriority data, response status code and response headers
    def get_priorities_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_priorities_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/jira/issues/priorities'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIJiraPriority')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_priorities_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jira projects.
    # @param project_key projectKey
    # @param [Hash] opts the optional parameters
    # @return [APIJiraProject]
    def get_project_using_get(project_key, opts = {})
      data, _status_code, _headers = get_project_using_get_with_http_info(project_key, opts)
      data
    end

    # Get jira projects.
    # @param project_key projectKey
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIJiraProject, Fixnum, Hash)>] APIJiraProject data, response status code and response headers
    def get_project_using_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_project_using_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling IntegrationsApi.get_project_using_get"
      end
      # resource path
      local_var_path = '/api/v2/jira/projects/{projectKey}'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIJiraProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_project_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jira projects.
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIBasicJiraProject]
    def get_projects_using_get(opts = {})
      data, _status_code, _headers = get_projects_using_get_with_http_info(opts)
      data
    end

    # Get jira projects.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIBasicJiraProject, Fixnum, Hash)>] APIListOfAPIBasicJiraProject data, response status code and response headers
    def get_projects_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_projects_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/jira/projects'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIBasicJiraProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_projects_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jira server info and validate connection.
    # @param [Hash] opts the optional parameters
    # @return [APIJiraServerInfo]
    def get_server_info_using_get(opts = {})
      data, _status_code, _headers = get_server_info_using_get_with_http_info(opts)
      data
    end

    # Get jira server info and validate connection.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIJiraServerInfo, Fixnum, Hash)>] APIJiraServerInfo data, response status code and response headers
    def get_server_info_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_server_info_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/jira/server-info'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIJiraServerInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_server_info_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update jira issue.
    # @param comment comment
    # @param issue_key issueKey
    # @param [Hash] opts the optional parameters
    # @return [APIJiraIssue]
    def update_issue_using_post(comment, issue_key, opts = {})
      data, _status_code, _headers = update_issue_using_post_with_http_info(comment, issue_key, opts)
      data
    end

    # Update jira issue.
    # @param comment comment
    # @param issue_key issueKey
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIJiraIssue, Fixnum, Hash)>] APIJiraIssue data, response status code and response headers
    def update_issue_using_post_with_http_info(comment, issue_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.update_issue_using_post ...'
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling IntegrationsApi.update_issue_using_post"
      end
      # verify the required parameter 'issue_key' is set
      if @api_client.config.client_side_validation && issue_key.nil?
        fail ArgumentError, "Missing the required parameter 'issue_key' when calling IntegrationsApi.update_issue_using_post"
      end
      # resource path
      local_var_path = '/api/v2/jira/issues/{issueKey}'.sub('{' + 'issueKey' + '}', issue_key.to_s)

      # query parameters
      query_params = {}
      query_params[:'comment'] = comment

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIJiraIssue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#update_issue_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
