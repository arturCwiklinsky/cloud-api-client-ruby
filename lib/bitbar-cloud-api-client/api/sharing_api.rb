=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.87.0
Contact: support@bitbar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module BitbarCloudApiClient
  class SharingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add user to access group.
    # @param access_group_id accessGroupId
    # @param email email
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def add_user_using_post1(access_group_id, email, user_id, opts = {})
      data, _status_code, _headers = add_user_using_post1_with_http_info(access_group_id, email, user_id, opts)
      data
    end

    # Add user to access group.
    # @param access_group_id accessGroupId
    # @param email email
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def add_user_using_post1_with_http_info(access_group_id, email, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.add_user_using_post1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.add_user_using_post1"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling SharingApi.add_user_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.add_user_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'email'] = email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#add_user_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create access group.
    # @param name name
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope scope (default to USER)
    # @return [APIAccessGroup]
    def create_using_post1(name, user_id, opts = {})
      data, _status_code, _headers = create_using_post1_with_http_info(name, user_id, opts)
      data
    end

    # Create access group.
    # @param name name
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope scope
    # @return [Array<(APIAccessGroup, Fixnum, Hash)>] APIAccessGroup data, response status code and response headers
    def create_using_post1_with_http_info(name, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.create_using_post1 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SharingApi.create_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.create_using_post1"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccessGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#create_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group resource.
    # @param access_group_id accessGroupId
    # @param resource_id resourceId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource_using_delete1(access_group_id, resource_id, user_id, opts = {})
      delete_resource_using_delete1_with_http_info(access_group_id, resource_id, user_id, opts)
      nil
    end

    # Delete access group resource.
    # @param access_group_id accessGroupId
    # @param resource_id resourceId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_resource_using_delete1_with_http_info(access_group_id, resource_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.delete_resource_using_delete1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.delete_resource_using_delete1"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling SharingApi.delete_resource_using_delete1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.delete_resource_using_delete1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#delete_resource_using_delete1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group user.
    # @param access_group_id accessGroupId
    # @param participant_id participantId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_using_delete1(access_group_id, participant_id, user_id, opts = {})
      delete_user_using_delete1_with_http_info(access_group_id, participant_id, user_id, opts)
      nil
    end

    # Delete access group user.
    # @param access_group_id accessGroupId
    # @param participant_id participantId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_using_delete1_with_http_info(access_group_id, participant_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.delete_user_using_delete1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.delete_user_using_delete1"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling SharingApi.delete_user_using_delete1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.delete_user_using_delete1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users/{participantId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#delete_user_using_delete1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_using_delete1(access_group_id, user_id, opts = {})
      delete_using_delete1_with_http_info(access_group_id, user_id, opts)
      nil
    end

    # Delete access group.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_using_delete1_with_http_info(access_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.delete_using_delete1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.delete_using_delete1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.delete_using_delete1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#delete_using_delete1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access groups.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @return [APIListOfAPIAccessGroup]
    def get_list_using_get1(user_id, opts = {})
      data, _status_code, _headers = get_list_using_get1_with_http_info(user_id, opts)
      data
    end

    # Get access groups.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @return [Array<(APIListOfAPIAccessGroup, Fixnum, Hash)>] APIListOfAPIAccessGroup data, response status code and response headers
    def get_list_using_get1_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_list_using_get1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_list_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIAccessGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_list_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resource.
    # @param access_group_id accessGroupId
    # @param resource_id resourceId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APISharedResource]
    def get_resource_using_get1(access_group_id, resource_id, user_id, opts = {})
      data, _status_code, _headers = get_resource_using_get1_with_http_info(access_group_id, resource_id, user_id, opts)
      data
    end

    # Get access group resource.
    # @param access_group_id accessGroupId
    # @param resource_id resourceId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APISharedResource, Fixnum, Hash)>] APISharedResource data, response status code and response headers
    def get_resource_using_get1_with_http_info(access_group_id, resource_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_resource_using_get1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get_resource_using_get1"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling SharingApi.get_resource_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_resource_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_resource_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resources.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @return [APIListOfAPISharedResource]
    def get_resources_using_get1(access_group_id, user_id, opts = {})
      data, _status_code, _headers = get_resources_using_get1_with_http_info(access_group_id, user_id, opts)
      data
    end

    # Get access group resources.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @return [Array<(APIListOfAPISharedResource, Fixnum, Hash)>] APIListOfAPISharedResource data, response status code and response headers
    def get_resources_using_get1_with_http_info(access_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_resources_using_get1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get_resources_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_resources_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/resources'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_resources_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group user.
    # @param access_group_id accessGroupId
    # @param participant_id participantId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def get_user_using_get1(access_group_id, participant_id, user_id, opts = {})
      data, _status_code, _headers = get_user_using_get1_with_http_info(access_group_id, participant_id, user_id, opts)
      data
    end

    # Get access group user.
    # @param access_group_id accessGroupId
    # @param participant_id participantId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Fixnum, Hash)>] APIUser data, response status code and response headers
    def get_user_using_get1_with_http_info(access_group_id, participant_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_user_using_get1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get_user_using_get1"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling SharingApi.get_user_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_user_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users/{participantId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_user_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group users.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @return [APIListOfAPIUser]
    def get_users_using_get1(access_group_id, user_id, opts = {})
      data, _status_code, _headers = get_users_using_get1_with_http_info(access_group_id, user_id, opts)
      data
    end

    # Get access group users.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @return [Array<(APIListOfAPIUser, Fixnum, Hash)>] APIListOfAPIUser data, response status code and response headers
    def get_users_using_get1_with_http_info(access_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_users_using_get1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get_users_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_users_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_users_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIAccessGroup]
    def get_using_get1(access_group_id, user_id, opts = {})
      data, _status_code, _headers = get_using_get1_with_http_info(access_group_id, user_id, opts)
      data
    end

    # Get access group.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccessGroup, Fixnum, Hash)>] APIAccessGroup data, response status code and response headers
    def get_using_get1_with_http_info(access_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_using_get1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccessGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share device group.
    # @param device_group_id deviceGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [APIListOfAPISharedResource]
    def share_device_group_using_post1(device_group_id, user_id, opts = {})
      data, _status_code, _headers = share_device_group_using_post1_with_http_info(device_group_id, user_id, opts)
      data
    end

    # Share device group.
    # @param device_group_id deviceGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [Array<(APIListOfAPISharedResource, Fixnum, Hash)>] APIListOfAPISharedResource data, response status code and response headers
    def share_device_group_using_post1_with_http_info(device_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.share_device_group_using_post1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling SharingApi.share_device_group_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.share_device_group_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/share'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#share_device_group_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share file.
    # @param file_id fileId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [APIListOfAPISharedResource]
    def share_file_using_post1(file_id, user_id, opts = {})
      data, _status_code, _headers = share_file_using_post1_with_http_info(file_id, user_id, opts)
      data
    end

    # Share file.
    # @param file_id fileId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [Array<(APIListOfAPISharedResource, Fixnum, Hash)>] APIListOfAPISharedResource data, response status code and response headers
    def share_file_using_post1_with_http_info(file_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.share_file_using_post1 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling SharingApi.share_file_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.share_file_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}/share'.sub('{' + 'fileId' + '}', file_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#share_file_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share project.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [APIListOfAPISharedResource]
    def share_project_using_post1(project_id, user_id, opts = {})
      data, _status_code, _headers = share_project_using_post1_with_http_info(project_id, user_id, opts)
      data
    end

    # Share project.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id accessGroupId
    # @option opts [String] :email email
    # @return [Array<(APIListOfAPISharedResource, Fixnum, Hash)>] APIListOfAPISharedResource data, response status code and response headers
    def share_project_using_post1_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.share_project_using_post1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharingApi.share_project_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.share_project_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/share'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPISharedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#share_project_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update access group.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @option opts [String] :scope scope
    # @return [APIAccessGroup]
    def update_using_post1(access_group_id, user_id, opts = {})
      data, _status_code, _headers = update_using_post1_with_http_info(access_group_id, user_id, opts)
      data
    end

    # Update access group.
    # @param access_group_id accessGroupId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @option opts [String] :scope scope
    # @return [Array<(APIAccessGroup, Fixnum, Hash)>] APIAccessGroup data, response status code and response headers
    def update_using_post1_with_http_info(access_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.update_using_post1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.update_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.update_using_post1"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIAccessGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#update_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
