=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.100.0
Contact: damian.sniezek@smartbear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module BitbarCloudApiClient
  class CloudInfoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get enums.
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<String>>]
    def get_enums_using_get(opts = {})
      data, _status_code, _headers = get_enums_using_get_with_http_info(opts)
      data
    end

    # Get enums.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<String>>, Fixnum, Hash)>] Hash<String, Array<String>> data, response status code and response headers
    def get_enums_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudInfoApi.get_enums_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/enums'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Array<String>>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudInfoApi#get_enums_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get health check.
    # @param [Hash] opts the optional parameters
    # @return [APIHealthCheck]
    def get_health_check_using_get(opts = {})
      data, _status_code, _headers = get_health_check_using_get_with_http_info(opts)
      data
    end

    # Get health check.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIHealthCheck, Fixnum, Hash)>] APIHealthCheck data, response status code and response headers
    def get_health_check_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudInfoApi.get_health_check_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/health'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIHealthCheck')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudInfoApi#get_health_check_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get basic cloud info.
    # @param [Hash] opts the optional parameters
    # @return [APICloudInfo]
    def get_status_using_get(opts = {})
      data, _status_code, _headers = get_status_using_get_with_http_info(opts)
      data
    end

    # Get basic cloud info.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APICloudInfo, Fixnum, Hash)>] APICloudInfo data, response status code and response headers
    def get_status_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudInfoApi.get_status_using_get ...'
      end
      # resource path
      local_var_path = '/api/v2/info'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APICloudInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudInfoApi#get_status_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
