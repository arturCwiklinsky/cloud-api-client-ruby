=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.87.0
Contact: support@bitbar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module BitbarCloudApiClient
  class DeprecatedApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_cluster_logs_using_get(device_session_id, opts = {})
      get_cluster_logs_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_cluster_logs_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_cluster_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_cluster_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/cluster-logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_cluster_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_cluster_logs_using_get1(device_session_id, run_id, opts = {})
      get_cluster_logs_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_cluster_logs_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_cluster_logs_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_cluster_logs_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_cluster_logs_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/cluster-logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_cluster_logs_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_device_session_data_zip_using_get(device_session_id, opts = {})
      get_device_session_data_zip_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_data_zip_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_device_session_data_zip_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_device_session_data_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/result-data.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_device_session_data_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_device_session_data_zip_using_get1(device_session_id, run_id, opts = {})
      get_device_session_data_zip_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_data_zip_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_device_session_data_zip_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_device_session_data_zip_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_device_session_data_zip_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/result-data.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_device_session_data_zip_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_device_session_junit_using_get(device_session_id, opts = {})
      get_device_session_junit_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_junit_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_device_session_junit_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_device_session_junit_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/junit.xml'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_device_session_junit_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_device_session_junit_using_get1(device_session_id, run_id, opts = {})
      get_device_session_junit_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_junit_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_device_session_junit_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_device_session_junit_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_device_session_junit_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/junit.xml'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_device_session_junit_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_device_session_logs_using_get(device_session_id, opts = {})
      get_device_session_logs_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_logs_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_device_session_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_device_session_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_device_session_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_device_session_logs_using_get1(device_session_id, run_id, opts = {})
      get_device_session_logs_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_logs_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_device_session_logs_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_device_session_logs_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_device_session_logs_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_device_session_logs_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [nil]
    def get_device_session_performance_using_get(device_session_id, opts = {})
      get_device_session_performance_using_get_with_http_info(device_session_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :test_run_id testRunId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_performance_using_get_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_device_session_performance_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_device_session_performance_using_get"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/performance'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_device_session_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_device_session_performance_using_get1(device_session_id, run_id, opts = {})
      get_device_session_performance_using_get1_with_http_info(device_session_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_device_session_performance_using_get1_with_http_info(device_session_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_device_session_performance_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_device_session_performance_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_device_session_performance_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/performance'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_device_session_performance_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_application_file_using_get(project_id, opts = {})
      get_project_application_file_using_get_with_http_info(project_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_application_file_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_application_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_application_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/application'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_application_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_application_file_using_get1(project_id, user_id, opts = {})
      get_project_application_file_using_get1_with_http_info(project_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_application_file_using_get1_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_application_file_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_application_file_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_project_application_file_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/files/application'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_application_file_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_cluster_logs_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_cluster_logs_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_cluster_logs_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_cluster_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_project_cluster_logs_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_cluster_logs_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_cluster_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/cluster-logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_cluster_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunConfig]
    def get_project_config_using_get(project_id, opts = {})
      data, _status_code, _headers = get_project_config_using_get_with_http_info(project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def get_project_config_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_config_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_config_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/config'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_data_file_using_get(project_id, opts = {})
      get_project_data_file_using_get_with_http_info(project_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_data_file_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_data_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_data_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/data'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_data_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_data_file_using_get1(project_id, user_id, opts = {})
      get_project_data_file_using_get1_with_http_info(project_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_data_file_using_get1_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_data_file_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_data_file_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_project_data_file_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/files/data'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_data_file_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_device_session_data_zip_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_device_session_data_zip_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_device_session_data_zip_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_device_session_data_zip_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_project_device_session_data_zip_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_device_session_data_zip_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_device_session_data_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/result-data.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_device_session_data_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_device_session_junit_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_device_session_junit_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_device_session_junit_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_device_session_junit_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_project_device_session_junit_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_device_session_junit_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_device_session_junit_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/junit.xml'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_device_session_junit_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_device_session_logs_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_device_session_logs_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_device_session_logs_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_device_session_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_project_device_session_logs_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_device_session_logs_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_device_session_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_device_session_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_device_session_performance_using_get(device_session_id, project_id, run_id, opts = {})
      get_project_device_session_performance_using_get_with_http_info(device_session_id, project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_device_session_performance_using_get_with_http_info(device_session_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_device_session_performance_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_project_device_session_performance_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_device_session_performance_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_device_session_performance_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/performance'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_device_session_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_file_zip_using_get(project_id, opts = {})
      get_project_file_zip_using_get_with_http_info(project_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_file_zip_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_file_zip_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_file_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_file_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_file_zip_using_get1(project_id, user_id, opts = {})
      get_project_file_zip_using_get1_with_http_info(project_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_file_zip_using_get1_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_file_zip_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_file_zip_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_project_file_zip_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_file_zip_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIUserFile]
    def get_project_files_using_get(project_id, opts = {})
      data, _status_code, _headers = get_project_files_using_get_with_http_info(project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_project_files_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_files_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_files_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_files_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIUserFile]
    def get_project_files_using_get1(project_id, user_id, opts = {})
      data, _status_code, _headers = get_project_files_using_get1_with_http_info(project_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_project_files_using_get1_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_files_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_files_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_project_files_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/files'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_files_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_file_using_get(project_id, opts = {})
      get_project_test_file_using_get_with_http_info(project_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_file_using_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_test_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_test_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/test'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_test_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_file_using_get1(project_id, user_id, opts = {})
      get_project_test_file_using_get1_with_http_info(project_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_file_using_get1_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_test_file_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_test_file_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_project_test_file_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/files/test'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_test_file_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_run_application_file_using_get(project_id, run_id, opts = {})
      get_project_test_run_application_file_using_get_with_http_info(project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_run_application_file_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_test_run_application_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_test_run_application_file_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_test_run_application_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files/application'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_test_run_application_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunConfig]
    def get_project_test_run_config_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_test_run_config_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def get_project_test_run_config_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_test_run_config_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_test_run_config_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_test_run_config_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/config'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_test_run_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_run_data_file_using_get(project_id, run_id, opts = {})
      get_project_test_run_data_file_using_get_with_http_info(project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_run_data_file_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_test_run_data_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_test_run_data_file_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_test_run_data_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files/data'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_test_run_data_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_run_file_zip_using_get(project_id, run_id, opts = {})
      get_project_test_run_file_zip_using_get_with_http_info(project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_run_file_zip_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_test_run_file_zip_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_test_run_file_zip_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_test_run_file_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_test_run_file_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIUserFile]
    def get_project_test_run_files_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_test_run_files_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_project_test_run_files_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_test_run_files_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_test_run_files_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_test_run_files_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_test_run_files_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_project_test_run_test_file_using_get(project_id, run_id, opts = {})
      get_project_test_run_test_file_using_get_with_http_info(project_id, run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_project_test_run_test_file_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_project_test_run_test_file_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_project_test_run_test_file_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_project_test_run_test_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files/test'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_project_test_run_test_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def get_test_run_application_file_using_get(run_id, opts = {})
      get_test_run_application_file_using_get_with_http_info(run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_application_file_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_application_file_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_application_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files/application'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_application_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_test_run_application_file_using_get1(project_id, run_id, user_id, opts = {})
      get_test_run_application_file_using_get1_with_http_info(project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_application_file_using_get1_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_application_file_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_test_run_application_file_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_application_file_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_test_run_application_file_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/files/application'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_application_file_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [APITestRunConfig]
    def get_test_run_config_using_get(run_id, opts = {})
      data, _status_code, _headers = get_test_run_config_using_get_with_http_info(run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def get_test_run_config_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_config_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_config_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/config'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunDataAvailability]
    def get_test_run_data_availability_with_project_using_get(project_id, run_id, opts = {})
      data, _status_code, _headers = get_test_run_data_availability_with_project_using_get_with_http_info(project_id, run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunDataAvailability, Fixnum, Hash)>] APITestRunDataAvailability data, response status code and response headers
    def get_test_run_data_availability_with_project_using_get_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_data_availability_with_project_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_test_run_data_availability_with_project_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_data_availability_with_project_using_get"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/data-availability'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunDataAvailability')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_data_availability_with_project_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [APITestRunDataAvailability]
    def get_test_run_data_availability_with_test_run_using_get(run_id, opts = {})
      data, _status_code, _headers = get_test_run_data_availability_with_test_run_using_get_with_http_info(run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @option opts [Integer] :user_id userId
    # @return [Array<(APITestRunDataAvailability, Fixnum, Hash)>] APITestRunDataAvailability data, response status code and response headers
    def get_test_run_data_availability_with_test_run_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_data_availability_with_test_run_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_data_availability_with_test_run_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/data-availability'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunDataAvailability')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_data_availability_with_test_run_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunDataAvailability]
    def get_test_run_data_availability_with_user_using_get(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_test_run_data_availability_with_user_using_get_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunDataAvailability, Fixnum, Hash)>] APITestRunDataAvailability data, response status code and response headers
    def get_test_run_data_availability_with_user_using_get_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_data_availability_with_user_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_test_run_data_availability_with_user_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_data_availability_with_user_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_test_run_data_availability_with_user_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/data-availability'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunDataAvailability')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_data_availability_with_user_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def get_test_run_data_file_using_get(run_id, opts = {})
      get_test_run_data_file_using_get_with_http_info(run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_data_file_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_data_file_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_data_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files/data'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_data_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_test_run_data_file_using_get1(project_id, run_id, user_id, opts = {})
      get_test_run_data_file_using_get1_with_http_info(project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_data_file_using_get1_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_data_file_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_test_run_data_file_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_data_file_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_test_run_data_file_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/files/data'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_data_file_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def get_test_run_file_zip_using_get(run_id, opts = {})
      get_test_run_file_zip_using_get_with_http_info(run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_file_zip_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_file_zip_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_file_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_file_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_test_run_file_zip_using_get1(project_id, run_id, user_id, opts = {})
      get_test_run_file_zip_using_get1_with_http_info(project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_file_zip_using_get1_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_file_zip_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_test_run_file_zip_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_file_zip_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_test_run_file_zip_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_file_zip_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483999&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @return [APIListOfAPIUserFile]
    def get_test_run_files_using_get(run_id, opts = {})
      data, _status_code, _headers = get_test_run_files_using_get_with_http_info(run_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1576134483999&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [Integer] :project_id projectId
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;direction_a
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_test_run_files_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_files_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_files_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_files_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIListOfAPIUserFile]
    def get_test_run_files_using_get1(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_test_run_files_using_get1_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListOfAPIUserFile, Fixnum, Hash)>] APIListOfAPIUserFile data, response status code and response headers
    def get_test_run_files_using_get1_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_files_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_test_run_files_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_files_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_test_run_files_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/files'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_files_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [nil]
    def get_test_run_test_file_using_get(run_id, opts = {})
      get_test_run_test_file_using_get_with_http_info(run_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param run_id runId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id projectId
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_test_file_using_get_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_test_file_using_get ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_test_file_using_get"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files/test'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_test_file_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_test_run_test_file_using_get1(project_id, run_id, user_id, opts = {})
      get_test_run_test_file_using_get1_with_http_info(project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_test_run_test_file_using_get1_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_test_run_test_file_using_get1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_test_run_test_file_using_get1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_test_run_test_file_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_test_run_test_file_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/files/test'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_test_run_test_file_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_cluster_logs_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_cluster_logs_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_cluster_logs_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_user_cluster_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_user_cluster_logs_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_user_cluster_logs_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_user_cluster_logs_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_user_cluster_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/cluster-logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_user_cluster_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_device_session_data_zip_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_device_session_data_zip_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_device_session_data_zip_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_user_device_session_data_zip_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_user_device_session_data_zip_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_user_device_session_data_zip_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_user_device_session_data_zip_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_user_device_session_data_zip_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/result-data.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_user_device_session_data_zip_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_device_session_junit_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_device_session_junit_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_device_session_junit_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_user_device_session_junit_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_user_device_session_junit_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_user_device_session_junit_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_user_device_session_junit_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_user_device_session_junit_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/junit.xml'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_user_device_session_junit_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_device_session_logs_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_device_session_logs_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_device_session_logs_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_user_device_session_logs_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_user_device_session_logs_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_user_device_session_logs_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_user_device_session_logs_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_user_device_session_logs_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/logs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_user_device_session_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_device_session_performance_using_get(device_session_id, project_id, run_id, user_id, opts = {})
      get_user_device_session_performance_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts)
      nil
    end

    # This endpoint is deprecated.
    # @param device_session_id deviceSessionId
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_device_session_performance_using_get_with_http_info(device_session_id, project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_user_device_session_performance_using_get ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling DeprecatedApi.get_user_device_session_performance_using_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_user_device_session_performance_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_user_device_session_performance_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_user_device_session_performance_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/performance'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_user_device_session_performance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunConfig]
    def get_user_project_config_using_get(project_id, user_id, opts = {})
      data, _status_code, _headers = get_user_project_config_using_get_with_http_info(project_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def get_user_project_config_using_get_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_user_project_config_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_user_project_config_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_user_project_config_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/config'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_user_project_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITestRunConfig]
    def get_user_test_run_config_using_get(project_id, run_id, user_id, opts = {})
      data, _status_code, _headers = get_user_test_run_config_using_get_with_http_info(project_id, run_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param run_id runId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def get_user_test_run_config_using_get_with_http_info(project_id, run_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.get_user_test_run_config_using_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.get_user_test_run_config_using_get"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling DeprecatedApi.get_user_test_run_config_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.get_user_test_run_config_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/config'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#get_user_test_run_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [Integer] :app_file_id appFileId
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [Integer] :data_file_id dataFileId
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :device_name_pattern deviceNamePattern
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :name name
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :test_file_id testFileId
    # @option opts [Integer] :test_run_id testRunId
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [Array<Integer>] :used_device_ids usedDeviceIds[]
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [APITestRun]
    def run_project_using_post(project_id, opts = {})
      data, _status_code, _headers = run_project_using_post_with_http_info(project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [Integer] :app_file_id appFileId
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [Integer] :data_file_id dataFileId
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :device_name_pattern deviceNamePattern
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :name name
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :test_file_id testFileId
    # @option opts [Integer] :test_run_id testRunId
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [Array<Integer>] :used_device_ids usedDeviceIds[]
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def run_project_using_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.run_project_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.run_project_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'limitation_type'] && !['PACKAGE', 'CLASS'].include?(opts[:'limitation_type'])
        fail ArgumentError, 'invalid value for "limitation_type", must be one of PACKAGE, CLASS'
      end
      if @api_client.config.client_side_validation && opts[:'scheduler'] && !['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'].include?(opts[:'scheduler'])
        fail ArgumentError, 'invalid value for "scheduler", must be one of PARALLEL, SERIAL, SINGLE, ALL_INSTANCES'
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'appCrawlerRun'] = opts[:'app_crawler_run'] if !opts[:'app_crawler_run'].nil?
      query_params[:'appFileId'] = opts[:'app_file_id'] if !opts[:'app_file_id'].nil?
      query_params[:'appiumBrokerAddress'] = opts[:'appium_broker_address'] if !opts[:'appium_broker_address'].nil?
      query_params[:'applicationPassword'] = opts[:'application_password'] if !opts[:'application_password'].nil?
      query_params[:'applicationUsername'] = opts[:'application_username'] if !opts[:'application_username'].nil?
      query_params[:'dataFileId'] = opts[:'data_file_id'] if !opts[:'data_file_id'].nil?
      query_params[:'deviceLanguageCode'] = opts[:'device_language_code'] if !opts[:'device_language_code'].nil?
      query_params[:'deviceNamePattern'] = opts[:'device_name_pattern'] if !opts[:'device_name_pattern'].nil?
      query_params[:'hookURL'] = opts[:'hook_url'] if !opts[:'hook_url'].nil?
      query_params[:'instrumentationRunner'] = opts[:'instrumentation_runner'] if !opts[:'instrumentation_runner'].nil?
      query_params[:'limitationType'] = opts[:'limitation_type'] if !opts[:'limitation_type'].nil?
      query_params[:'limitationValue'] = opts[:'limitation_value'] if !opts[:'limitation_value'].nil?
      query_params[:'maxAutoRetriesCount'] = opts[:'max_auto_retries_count'] if !opts[:'max_auto_retries_count'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'scheduler'] = opts[:'scheduler'] if !opts[:'scheduler'].nil?
      query_params[:'screenshotDir'] = opts[:'screenshot_dir'] if !opts[:'screenshot_dir'].nil?
      query_params[:'testFileId'] = opts[:'test_file_id'] if !opts[:'test_file_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'usedDeviceGroupId'] = opts[:'used_device_group_id'] if !opts[:'used_device_group_id'].nil?
      query_params[:'usedDeviceIds[]'] = @api_client.build_collection_param(opts[:'used_device_ids'], :multi) if !opts[:'used_device_ids'].nil?
      query_params[:'videoRecordingEnabled'] = opts[:'video_recording_enabled'] if !opts[:'video_recording_enabled'].nil?
      query_params[:'withAnnotation'] = opts[:'with_annotation'] if !opts[:'with_annotation'].nil?
      query_params[:'withoutAnnotation'] = opts[:'without_annotation'] if !opts[:'without_annotation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#run_project_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [Integer] :app_file_id appFileId
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [Integer] :data_file_id dataFileId
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :device_name_pattern deviceNamePattern
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :name name
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :test_file_id testFileId
    # @option opts [Integer] :test_run_id testRunId
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [Array<Integer>] :used_device_ids usedDeviceIds[]
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [APITestRun]
    def run_user_project_using_post(project_id, user_id, opts = {})
      data, _status_code, _headers = run_user_project_using_post_with_http_info(project_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [Integer] :app_file_id appFileId
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [Integer] :data_file_id dataFileId
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :device_name_pattern deviceNamePattern
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :name name
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :test_file_id testFileId
    # @option opts [Integer] :test_run_id testRunId
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [Array<Integer>] :used_device_ids usedDeviceIds[]
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def run_user_project_using_post_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.run_user_project_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.run_user_project_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.run_user_project_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'limitation_type'] && !['PACKAGE', 'CLASS'].include?(opts[:'limitation_type'])
        fail ArgumentError, 'invalid value for "limitation_type", must be one of PACKAGE, CLASS'
      end
      if @api_client.config.client_side_validation && opts[:'scheduler'] && !['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'].include?(opts[:'scheduler'])
        fail ArgumentError, 'invalid value for "scheduler", must be one of PARALLEL, SERIAL, SINGLE, ALL_INSTANCES'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'appCrawlerRun'] = opts[:'app_crawler_run'] if !opts[:'app_crawler_run'].nil?
      query_params[:'appFileId'] = opts[:'app_file_id'] if !opts[:'app_file_id'].nil?
      query_params[:'appiumBrokerAddress'] = opts[:'appium_broker_address'] if !opts[:'appium_broker_address'].nil?
      query_params[:'applicationPassword'] = opts[:'application_password'] if !opts[:'application_password'].nil?
      query_params[:'applicationUsername'] = opts[:'application_username'] if !opts[:'application_username'].nil?
      query_params[:'dataFileId'] = opts[:'data_file_id'] if !opts[:'data_file_id'].nil?
      query_params[:'deviceLanguageCode'] = opts[:'device_language_code'] if !opts[:'device_language_code'].nil?
      query_params[:'deviceNamePattern'] = opts[:'device_name_pattern'] if !opts[:'device_name_pattern'].nil?
      query_params[:'hookURL'] = opts[:'hook_url'] if !opts[:'hook_url'].nil?
      query_params[:'instrumentationRunner'] = opts[:'instrumentation_runner'] if !opts[:'instrumentation_runner'].nil?
      query_params[:'limitationType'] = opts[:'limitation_type'] if !opts[:'limitation_type'].nil?
      query_params[:'limitationValue'] = opts[:'limitation_value'] if !opts[:'limitation_value'].nil?
      query_params[:'maxAutoRetriesCount'] = opts[:'max_auto_retries_count'] if !opts[:'max_auto_retries_count'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'scheduler'] = opts[:'scheduler'] if !opts[:'scheduler'].nil?
      query_params[:'screenshotDir'] = opts[:'screenshot_dir'] if !opts[:'screenshot_dir'].nil?
      query_params[:'testFileId'] = opts[:'test_file_id'] if !opts[:'test_file_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'usedDeviceGroupId'] = opts[:'used_device_group_id'] if !opts[:'used_device_group_id'].nil?
      query_params[:'usedDeviceIds[]'] = @api_client.build_collection_param(opts[:'used_device_ids'], :multi) if !opts[:'used_device_ids'].nil?
      query_params[:'videoRecordingEnabled'] = opts[:'video_recording_enabled'] if !opts[:'video_recording_enabled'].nil?
      query_params[:'withAnnotation'] = opts[:'with_annotation'] if !opts[:'with_annotation'].nil?
      query_params[:'withoutAnnotation'] = opts[:'without_annotation'] if !opts[:'without_annotation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#run_user_project_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [APITestRunConfig]
    def update_project_config_using_post(project_id, opts = {})
      data, _status_code, _headers = update_project_config_using_post_with_http_info(project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def update_project_config_using_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.update_project_config_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.update_project_config_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'limitation_type'] && !['PACKAGE', 'CLASS'].include?(opts[:'limitation_type'])
        fail ArgumentError, 'invalid value for "limitation_type", must be one of PACKAGE, CLASS'
      end
      if @api_client.config.client_side_validation && opts[:'scheduler'] && !['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'].include?(opts[:'scheduler'])
        fail ArgumentError, 'invalid value for "scheduler", must be one of PARALLEL, SERIAL, SINGLE, ALL_INSTANCES'
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/config'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'appCrawlerRun'] = opts[:'app_crawler_run'] if !opts[:'app_crawler_run'].nil?
      query_params[:'appiumBrokerAddress'] = opts[:'appium_broker_address'] if !opts[:'appium_broker_address'].nil?
      query_params[:'applicationPassword'] = opts[:'application_password'] if !opts[:'application_password'].nil?
      query_params[:'applicationUsername'] = opts[:'application_username'] if !opts[:'application_username'].nil?
      query_params[:'deviceLanguageCode'] = opts[:'device_language_code'] if !opts[:'device_language_code'].nil?
      query_params[:'hookURL'] = opts[:'hook_url'] if !opts[:'hook_url'].nil?
      query_params[:'instrumentationRunner'] = opts[:'instrumentation_runner'] if !opts[:'instrumentation_runner'].nil?
      query_params[:'limitationType'] = opts[:'limitation_type'] if !opts[:'limitation_type'].nil?
      query_params[:'limitationValue'] = opts[:'limitation_value'] if !opts[:'limitation_value'].nil?
      query_params[:'maxAutoRetriesCount'] = opts[:'max_auto_retries_count'] if !opts[:'max_auto_retries_count'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'scheduler'] = opts[:'scheduler'] if !opts[:'scheduler'].nil?
      query_params[:'screenshotDir'] = opts[:'screenshot_dir'] if !opts[:'screenshot_dir'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'usedDeviceGroupId'] = opts[:'used_device_group_id'] if !opts[:'used_device_group_id'].nil?
      query_params[:'videoRecordingEnabled'] = opts[:'video_recording_enabled'] if !opts[:'video_recording_enabled'].nil?
      query_params[:'withAnnotation'] = opts[:'with_annotation'] if !opts[:'with_annotation'].nil?
      query_params[:'withoutAnnotation'] = opts[:'without_annotation'] if !opts[:'without_annotation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#update_project_config_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [APITestRunConfig]
    def update_user_project_config_using_post(project_id, user_id, opts = {})
      data, _status_code, _headers = update_user_project_config_using_post_with_http_info(project_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :app_crawler_run appCrawlerRun
    # @option opts [String] :appium_broker_address appiumBrokerAddress
    # @option opts [String] :application_password applicationPassword
    # @option opts [String] :application_username applicationUsername
    # @option opts [String] :device_language_code deviceLanguageCode
    # @option opts [String] :hook_url hookURL
    # @option opts [String] :instrumentation_runner instrumentationRunner
    # @option opts [String] :limitation_type limitationType
    # @option opts [String] :limitation_value limitationValue
    # @option opts [Integer] :max_auto_retries_count maxAutoRetriesCount
    # @option opts [String] :mode mode
    # @option opts [String] :scheduler scheduler
    # @option opts [String] :screenshot_dir screenshotDir
    # @option opts [Integer] :timeout timeout
    # @option opts [Integer] :used_device_group_id usedDeviceGroupId
    # @option opts [BOOLEAN] :video_recording_enabled videoRecordingEnabled
    # @option opts [String] :with_annotation withAnnotation
    # @option opts [String] :without_annotation withoutAnnotation
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def update_user_project_config_using_post_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.update_user_project_config_using_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.update_user_project_config_using_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.update_user_project_config_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'limitation_type'] && !['PACKAGE', 'CLASS'].include?(opts[:'limitation_type'])
        fail ArgumentError, 'invalid value for "limitation_type", must be one of PACKAGE, CLASS'
      end
      if @api_client.config.client_side_validation && opts[:'scheduler'] && !['PARALLEL', 'SERIAL', 'SINGLE', 'ALL_INSTANCES'].include?(opts[:'scheduler'])
        fail ArgumentError, 'invalid value for "scheduler", must be one of PARALLEL, SERIAL, SINGLE, ALL_INSTANCES'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/config'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'appCrawlerRun'] = opts[:'app_crawler_run'] if !opts[:'app_crawler_run'].nil?
      query_params[:'appiumBrokerAddress'] = opts[:'appium_broker_address'] if !opts[:'appium_broker_address'].nil?
      query_params[:'applicationPassword'] = opts[:'application_password'] if !opts[:'application_password'].nil?
      query_params[:'applicationUsername'] = opts[:'application_username'] if !opts[:'application_username'].nil?
      query_params[:'deviceLanguageCode'] = opts[:'device_language_code'] if !opts[:'device_language_code'].nil?
      query_params[:'hookURL'] = opts[:'hook_url'] if !opts[:'hook_url'].nil?
      query_params[:'instrumentationRunner'] = opts[:'instrumentation_runner'] if !opts[:'instrumentation_runner'].nil?
      query_params[:'limitationType'] = opts[:'limitation_type'] if !opts[:'limitation_type'].nil?
      query_params[:'limitationValue'] = opts[:'limitation_value'] if !opts[:'limitation_value'].nil?
      query_params[:'maxAutoRetriesCount'] = opts[:'max_auto_retries_count'] if !opts[:'max_auto_retries_count'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'scheduler'] = opts[:'scheduler'] if !opts[:'scheduler'].nil?
      query_params[:'screenshotDir'] = opts[:'screenshot_dir'] if !opts[:'screenshot_dir'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'usedDeviceGroupId'] = opts[:'used_device_group_id'] if !opts[:'used_device_group_id'].nil?
      query_params[:'videoRecordingEnabled'] = opts[:'video_recording_enabled'] if !opts[:'video_recording_enabled'].nil?
      query_params[:'withAnnotation'] = opts[:'with_annotation'] if !opts[:'with_annotation'].nil?
      query_params[:'withoutAnnotation'] = opts[:'without_annotation'] if !opts[:'without_annotation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#update_user_project_config_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_project_application_file_using_post(file, project_id, opts = {})
      data, _status_code, _headers = upload_project_application_file_using_post_with_http_info(file, project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_project_application_file_using_post_with_http_info(file, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.upload_project_application_file_using_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DeprecatedApi.upload_project_application_file_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.upload_project_application_file_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/application'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#upload_project_application_file_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_project_application_file_using_post1(file, project_id, user_id, opts = {})
      data, _status_code, _headers = upload_project_application_file_using_post1_with_http_info(file, project_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_project_application_file_using_post1_with_http_info(file, project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.upload_project_application_file_using_post1 ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DeprecatedApi.upload_project_application_file_using_post1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.upload_project_application_file_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.upload_project_application_file_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/files/application'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#upload_project_application_file_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_project_data_file_using_post(file, project_id, opts = {})
      data, _status_code, _headers = upload_project_data_file_using_post_with_http_info(file, project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_project_data_file_using_post_with_http_info(file, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.upload_project_data_file_using_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DeprecatedApi.upload_project_data_file_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.upload_project_data_file_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/data'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#upload_project_data_file_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_project_data_file_using_post1(file, project_id, user_id, opts = {})
      data, _status_code, _headers = upload_project_data_file_using_post1_with_http_info(file, project_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_project_data_file_using_post1_with_http_info(file, project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.upload_project_data_file_using_post1 ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DeprecatedApi.upload_project_data_file_using_post1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.upload_project_data_file_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.upload_project_data_file_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/files/data'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#upload_project_data_file_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_project_test_file_using_post(file, project_id, opts = {})
      data, _status_code, _headers = upload_project_test_file_using_post_with_http_info(file, project_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_project_test_file_using_post_with_http_info(file, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.upload_project_test_file_using_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DeprecatedApi.upload_project_test_file_using_post"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.upload_project_test_file_using_post"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/files/test'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#upload_project_test_file_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def upload_project_test_file_using_post1(file, project_id, user_id, opts = {})
      data, _status_code, _headers = upload_project_test_file_using_post1_with_http_info(file, project_id, user_id, opts)
      data
    end

    # This endpoint is deprecated.
    # @param file file
    # @param project_id projectId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Fixnum, Hash)>] APIUserFile data, response status code and response headers
    def upload_project_test_file_using_post1_with_http_info(file, project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeprecatedApi.upload_project_test_file_using_post1 ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DeprecatedApi.upload_project_test_file_using_post1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DeprecatedApi.upload_project_test_file_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeprecatedApi.upload_project_test_file_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/files/test'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIUserFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeprecatedApi#upload_project_test_file_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
