=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.100.0
Contact: damian.sniezek@smartbear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module BitbarCloudApiClient
  class RunningTestsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create connection for device session.
    # @param device_session_id deviceSessionId
    # @param host host
    # @param port port
    # @param type type
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password password
    # @return [APIConnection]
    def create_device_session_connection_using_post1(device_session_id, host, port, type, user_id, opts = {})
      data, _status_code, _headers = create_device_session_connection_using_post1_with_http_info(device_session_id, host, port, type, user_id, opts)
      data
    end

    # Create connection for device session.
    # @param device_session_id deviceSessionId
    # @param host host
    # @param port port
    # @param type type
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password password
    # @return [Array<(APIConnection, Fixnum, Hash)>] APIConnection data, response status code and response headers
    def create_device_session_connection_using_post1_with_http_info(device_session_id, host, port, type, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RunningTestsApi.create_device_session_connection_using_post1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling RunningTestsApi.create_device_session_connection_using_post1"
      end
      # verify the required parameter 'host' is set
      if @api_client.config.client_side_validation && host.nil?
        fail ArgumentError, "Missing the required parameter 'host' when calling RunningTestsApi.create_device_session_connection_using_post1"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling RunningTestsApi.create_device_session_connection_using_post1"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling RunningTestsApi.create_device_session_connection_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RunningTestsApi.create_device_session_connection_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/connections'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'host'] = host
      query_params[:'port'] = port
      query_params[:'type'] = type
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunningTestsApi#create_device_session_connection_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create device session.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [APIDeviceSessionConfig] :configuration configuration
    # @option opts [Integer] :device_model_id deviceModelId
    # @option opts [String] :type type (default to MANUAL)
    # @return [APIDeviceSession]
    def create_inspector_device_session_using_post(user_id, opts = {})
      data, _status_code, _headers = create_inspector_device_session_using_post_with_http_info(user_id, opts)
      data
    end

    # Create device session.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [APIDeviceSessionConfig] :configuration configuration
    # @option opts [Integer] :device_model_id deviceModelId
    # @option opts [String] :type type
    # @return [Array<(APIDeviceSession, Fixnum, Hash)>] APIDeviceSession data, response status code and response headers
    def create_inspector_device_session_using_post_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RunningTestsApi.create_inspector_device_session_using_post ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RunningTestsApi.create_inspector_device_session_using_post"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['AUTOMATIC', 'MANUAL', 'REMOTE'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of AUTOMATIC, MANUAL, REMOTE'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deviceModelId'] = opts[:'device_model_id'] if !opts[:'device_model_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'configuration'])
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIDeviceSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunningTestsApi#create_inspector_device_session_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get available frameworks.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;retryable_eq_true&lt;br&gt;filter&#x3D;canrunfromui_eq_true&lt;br&gt;filter&#x3D;skipqueue_eq_true&lt;br&gt;filter&#x3D;forprojects_eq_true&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;type_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;labelid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583748370&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;jobconfigid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelname_eq_value&lt;br&gt;filter&#x3D;secured_eq_true&lt;br&gt;filter&#x3D;skipoldersdk_eq_true
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;retryable_a&lt;br&gt;sort&#x3D;canRunFromUI_a&lt;br&gt;sort&#x3D;skipQueue_a&lt;br&gt;sort&#x3D;forProjects_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;labelId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;jobConfigId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelName_a&lt;br&gt;sort&#x3D;secured_a&lt;br&gt;sort&#x3D;skipOlderSdk_a
    # @return [APIListOfAPIFramework]
    def get_available_frameworks_using_get(user_id, opts = {})
      data, _status_code, _headers = get_available_frameworks_using_get_with_http_info(user_id, opts)
      data
    end

    # Get available frameworks.
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;retryable_eq_true&lt;br&gt;filter&#x3D;canrunfromui_eq_true&lt;br&gt;filter&#x3D;skipqueue_eq_true&lt;br&gt;filter&#x3D;forprojects_eq_true&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;type_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;labelid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1593583748370&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;jobconfigid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelname_eq_value&lt;br&gt;filter&#x3D;secured_eq_true&lt;br&gt;filter&#x3D;skipoldersdk_eq_true
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;retryable_a&lt;br&gt;sort&#x3D;canRunFromUI_a&lt;br&gt;sort&#x3D;skipQueue_a&lt;br&gt;sort&#x3D;forProjects_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;labelId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;jobConfigId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelName_a&lt;br&gt;sort&#x3D;secured_a&lt;br&gt;sort&#x3D;skipOlderSdk_a
    # @return [Array<(APIListOfAPIFramework, Fixnum, Hash)>] APIListOfAPIFramework data, response status code and response headers
    def get_available_frameworks_using_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RunningTestsApi.get_available_frameworks_using_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RunningTestsApi.get_available_frameworks_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/available-frameworks'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIFramework')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunningTestsApi#get_available_frameworks_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get connections for device session.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;path_eq_value&lt;br&gt;filter&#x3D;password_eq_value&lt;br&gt;filter&#x3D;urlschema_eq_value&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;port_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1593583743782&lt;br&gt;filter&#x3D;host_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1593583743782&lt;br&gt;filter&#x3D;type_eq_value
    # @option opts [Integer] :limit limit parameter define page size (default to 20)
    # @option opts [Integer] :offset offset parameter define page number (default to 0)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;path_a&lt;br&gt;sort&#x3D;password_a&lt;br&gt;sort&#x3D;urlSchema_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;port_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;host_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;type_a
    # @return [APIListOfAPIConnection]
    def get_device_session_connections_using_get1(device_session_id, user_id, opts = {})
      data, _status_code, _headers = get_device_session_connections_using_get1_with_http_info(device_session_id, user_id, opts)
      data
    end

    # Get connections for device session.
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;path_eq_value&lt;br&gt;filter&#x3D;password_eq_value&lt;br&gt;filter&#x3D;urlschema_eq_value&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;port_eq_null&lt;br&gt;filter&#x3D;createtime_eq_1593583743782&lt;br&gt;filter&#x3D;host_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;_endtime_eq_1593583743782&lt;br&gt;filter&#x3D;type_eq_value
    # @option opts [Integer] :limit limit parameter define page size
    # @option opts [Integer] :offset offset parameter define page number
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;path_a&lt;br&gt;sort&#x3D;password_a&lt;br&gt;sort&#x3D;urlSchema_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;port_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;host_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;type_a
    # @return [Array<(APIListOfAPIConnection, Fixnum, Hash)>] APIListOfAPIConnection data, response status code and response headers
    def get_device_session_connections_using_get1_with_http_info(device_session_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RunningTestsApi.get_device_session_connections_using_get1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling RunningTestsApi.get_device_session_connections_using_get1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RunningTestsApi.get_device_session_connections_using_get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/connections'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIListOfAPIConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunningTestsApi#get_device_session_connections_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get connection for device session.
    # @param connection_id connectionId
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APIConnection]
    def get_user_inspector_device_session_connection_using_get(connection_id, device_session_id, user_id, opts = {})
      data, _status_code, _headers = get_user_inspector_device_session_connection_using_get_with_http_info(connection_id, device_session_id, user_id, opts)
      data
    end

    # Get connection for device session.
    # @param connection_id connectionId
    # @param device_session_id deviceSessionId
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIConnection, Fixnum, Hash)>] APIConnection data, response status code and response headers
    def get_user_inspector_device_session_connection_using_get_with_http_info(connection_id, device_session_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RunningTestsApi.get_user_inspector_device_session_connection_using_get ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling RunningTestsApi.get_user_inspector_device_session_connection_using_get"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling RunningTestsApi.get_user_inspector_device_session_connection_using_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RunningTestsApi.get_user_inspector_device_session_connection_using_get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/connections/{connectionId}'.sub('{' + 'connectionId' + '}', connection_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunningTestsApi#get_user_inspector_device_session_connection_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run test run.
    # @param configuration configuration
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def run_test_run_using_post1(configuration, user_id, opts = {})
      data, _status_code, _headers = run_test_run_using_post1_with_http_info(configuration, user_id, opts)
      data
    end

    # Run test run.
    # @param configuration configuration
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Fixnum, Hash)>] APITestRun data, response status code and response headers
    def run_test_run_using_post1_with_http_info(configuration, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RunningTestsApi.run_test_run_using_post1 ...'
      end
      # verify the required parameter 'configuration' is set
      if @api_client.config.client_side_validation && configuration.nil?
        fail ArgumentError, "Missing the required parameter 'configuration' when calling RunningTestsApi.run_test_run_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RunningTestsApi.run_test_run_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/runs'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration)
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRun')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunningTestsApi#run_test_run_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate test run configuration.
    # @param configuration configuration
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_device_groups includeDeviceGroups (default to true)
    # @option opts [BOOLEAN] :include_devices includeDevices (default to false)
    # @option opts [BOOLEAN] :include_frameworks includeFrameworks (default to true)
    # @return [APITestRunConfig]
    def validate_test_run_config_using_post1(configuration, user_id, opts = {})
      data, _status_code, _headers = validate_test_run_config_using_post1_with_http_info(configuration, user_id, opts)
      data
    end

    # Validate test run configuration.
    # @param configuration configuration
    # @param user_id userId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_device_groups includeDeviceGroups
    # @option opts [BOOLEAN] :include_devices includeDevices
    # @option opts [BOOLEAN] :include_frameworks includeFrameworks
    # @return [Array<(APITestRunConfig, Fixnum, Hash)>] APITestRunConfig data, response status code and response headers
    def validate_test_run_config_using_post1_with_http_info(configuration, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RunningTestsApi.validate_test_run_config_using_post1 ...'
      end
      # verify the required parameter 'configuration' is set
      if @api_client.config.client_side_validation && configuration.nil?
        fail ArgumentError, "Missing the required parameter 'configuration' when calling RunningTestsApi.validate_test_run_config_using_post1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RunningTestsApi.validate_test_run_config_using_post1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/runs/config'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeDeviceGroups'] = opts[:'include_device_groups'] if !opts[:'include_device_groups'].nil?
      query_params[:'includeDevices'] = opts[:'include_devices'] if !opts[:'include_devices'].nil?
      query_params[:'includeFrameworks'] = opts[:'include_frameworks'] if !opts[:'include_frameworks'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration)
      auth_names = ['apiKeyInHeader', 'oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APITestRunConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunningTestsApi#validate_test_run_config_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
