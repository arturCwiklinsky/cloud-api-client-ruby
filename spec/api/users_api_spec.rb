=begin
#BitbarCloud API

#BitbarCloud API.

OpenAPI spec version: 2.100.0
Contact: damian.sniezek@smartbear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'spec_helper'
require 'json'

# Unit tests for BitbarCloudApiClient::UsersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UsersApi' do
  before do
    # run before each test
    @instance = BitbarCloudApiClient::UsersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersApi' do
    it 'should create an instance of UsersApi' do
      expect(@instance).to be_instance_of(BitbarCloudApiClient::UsersApi)
    end
  end

  # unit tests for activate_using_post
  # Activate user after registration.
  # @param email email
  # @param key key
  # @param password password
  # @param [Hash] opts the optional parameters
  # @option opts [String] :address address
  # @option opts [String] :city city
  # @option opts [String] :country country
  # @option opts [String] :first_name firstName
  # @option opts [String] :last_name lastName
  # @option opts [String] :organization organization
  # @option opts [String] :phone phone
  # @option opts [String] :state state
  # @option opts [String] :vat_id vatId
  # @option opts [String] :zip zip
  # @return [APIUser]
  describe 'activate_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_additional_user_using_post
  # Add additional user.
  # @param email email
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password password
  # @return [APIUser]
  describe 'add_additional_user_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_feedback_form_email_using_post
  # Create feedback email.
  # @param content content
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file file
  # @return [nil]
  describe 'create_feedback_form_email_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_user_using_post
  # Delete user.
  # @param password password
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [APIUser]
  describe 'delete_user_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_additional_user_using_delete
  # Disable additional user.
  # @param additional_user_id additionalUserId
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [APIUser]
  describe 'disable_additional_user_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for enable_additional_user_using_post
  # Enable additional user.
  # @param additional_user_id additionalUserId
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [APIUser]
  describe 'enable_additional_user_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_recovery_key_for_user_using_post
  # Generate recovery key.
  # @param email email
  # @param [Hash] opts the optional parameters
  # @return [APIMessage]
  describe 'generate_recovery_key_for_user_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_using_get
  # Get account.
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [APIAccount]
  describe 'get_account_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_additional_users_using_get
  # Get additional users.
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;country_eq_value&lt;br&gt;filter&#x3D;code_eq_value&lt;br&gt;filter&#x3D;address_eq_value&lt;br&gt;filter&#x3D;lastlaunchedtesttime_eq_1593583748368&lt;br&gt;filter&#x3D;city_eq_value&lt;br&gt;filter&#x3D;vatid_eq_value&lt;br&gt;filter&#x3D;timezone_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;lastlogintime_eq_1593583748368&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;serviceids_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;phone_eq_value&lt;br&gt;filter&#x3D;deletetime_eq_1593583748368&lt;br&gt;filter&#x3D;createtime_eq_1593583748368&lt;br&gt;filter&#x3D;accountserviceids_eq_1&lt;br&gt;filter&#x3D;organization_eq_value&lt;br&gt;filter&#x3D;ismainuser_eq_true&lt;br&gt;filter&#x3D;state_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value&lt;br&gt;filter&#x3D;status_eq_inactive
  # @option opts [Integer] :limit limit parameter define page size
  # @option opts [Integer] :offset offset parameter define page number
  # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;country_a&lt;br&gt;sort&#x3D;code_a&lt;br&gt;sort&#x3D;address_a&lt;br&gt;sort&#x3D;lastLaunchedTestTime_a&lt;br&gt;sort&#x3D;city_a&lt;br&gt;sort&#x3D;vatId_a&lt;br&gt;sort&#x3D;timeZone_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;lastLoginTime_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;serviceIds_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;phone_a&lt;br&gt;sort&#x3D;deleteTime_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;accountServiceIds_a&lt;br&gt;sort&#x3D;organization_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a&lt;br&gt;sort&#x3D;status_a
  # @return [APIListOfAPIUser]
  describe 'get_additional_users_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_by_recovery_key_using_get
  # Get user by recovery key.
  # @param recovery_key recoveryKey
  # @param [Hash] opts the optional parameters
  # @return [APIUser]
  describe 'get_user_by_recovery_key_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_using_get2
  # Get user.
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [APIUser]
  describe 'get_user_using_get2 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for load_user_preferences_using_get
  # Load user preferences.
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [APIUserPreference]
  describe 'load_user_preferences_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for load_user_ui_preferences_using_get
  # Load ui preferences.
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'load_user_ui_preferences_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recover_password_using_post
  # Set new password after recovery.
  # @param key key
  # @param password password
  # @param [Hash] opts the optional parameters
  # @return [APIUser]
  describe 'recover_password_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for register_using_post1
  # Register new user.
  # @param email email
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'register_using_post1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reset_api_key_using_post
  # Reset api key.
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [APIUser]
  describe 'reset_api_key_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for restore_user_using_post
  # Restore user requested to be deleted.
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [APIUser]
  describe 'restore_user_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for store_user_preferences_using_post
  # Store user preferences.
  # @param preference preference
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [APIUserPreference]
  describe 'store_user_preferences_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for store_user_ui_preferences_using_post
  # Store ui preferences.
  # @param data data
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'store_user_ui_preferences_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user_using_post
  # Update user.
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :address address
  # @option opts [String] :city city
  # @option opts [String] :code code
  # @option opts [String] :confirm_password confirmPassword
  # @option opts [String] :email email
  # @option opts [String] :first_name firstName
  # @option opts [String] :last_name lastName
  # @option opts [String] :locale_country localeCountry
  # @option opts [String] :mfa_code mfaCode
  # @option opts [BOOLEAN] :mfa_enabled mfaEnabled
  # @option opts [String] :new_password newPassword
  # @option opts [String] :organization organization
  # @option opts [String] :password password
  # @option opts [String] :phone phone
  # @option opts [String] :state state
  # @option opts [String] :time_zone timeZone
  # @option opts [String] :vat_id vatId
  # @return [APIUser]
  describe 'update_user_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_vat_id_using_get
  # Validate EU VAT ID.
  # @param country_code countryCode
  # @param vat_id vatId
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, String>]
  describe 'validate_vat_id_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
